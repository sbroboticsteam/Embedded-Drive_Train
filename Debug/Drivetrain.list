
Drivetrain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b38  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003cfc  08003cfc  00013cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003d44  08003d44  00013d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003d4c  08003d4c  00013d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003d50  08003d50  00013d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08003d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002c4  2000000c  08003d60  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002d0  08003d60  000202d0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001527a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000272c  00000000  00000000  000352b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c18  00000000  00000000  000379e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b00  00000000  00000000  00038600  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000060d9  00000000  00000000  00039100  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003f0f  00000000  00000000  0003f1d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000430e8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003150  00000000  00000000  00043164  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003ce4 	.word	0x08003ce4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003ce4 	.word	0x08003ce4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b97a 	b.w	8000520 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	468c      	mov	ip, r1
 800024a:	460d      	mov	r5, r1
 800024c:	4604      	mov	r4, r0
 800024e:	9e08      	ldr	r6, [sp, #32]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d151      	bne.n	80002f8 <__udivmoddi4+0xb4>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d96d      	bls.n	8000336 <__udivmoddi4+0xf2>
 800025a:	fab2 fe82 	clz	lr, r2
 800025e:	f1be 0f00 	cmp.w	lr, #0
 8000262:	d00b      	beq.n	800027c <__udivmoddi4+0x38>
 8000264:	f1ce 0c20 	rsb	ip, lr, #32
 8000268:	fa01 f50e 	lsl.w	r5, r1, lr
 800026c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000270:	fa02 f70e 	lsl.w	r7, r2, lr
 8000274:	ea4c 0c05 	orr.w	ip, ip, r5
 8000278:	fa00 f40e 	lsl.w	r4, r0, lr
 800027c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000280:	0c25      	lsrs	r5, r4, #16
 8000282:	fbbc f8fa 	udiv	r8, ip, sl
 8000286:	fa1f f987 	uxth.w	r9, r7
 800028a:	fb0a cc18 	mls	ip, sl, r8, ip
 800028e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000292:	fb08 f309 	mul.w	r3, r8, r9
 8000296:	42ab      	cmp	r3, r5
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x6c>
 800029a:	19ed      	adds	r5, r5, r7
 800029c:	f108 32ff 	add.w	r2, r8, #4294967295
 80002a0:	f080 8123 	bcs.w	80004ea <__udivmoddi4+0x2a6>
 80002a4:	42ab      	cmp	r3, r5
 80002a6:	f240 8120 	bls.w	80004ea <__udivmoddi4+0x2a6>
 80002aa:	f1a8 0802 	sub.w	r8, r8, #2
 80002ae:	443d      	add	r5, r7
 80002b0:	1aed      	subs	r5, r5, r3
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002b8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002c0:	fb00 f909 	mul.w	r9, r0, r9
 80002c4:	45a1      	cmp	r9, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x98>
 80002c8:	19e4      	adds	r4, r4, r7
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 810a 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80002d2:	45a1      	cmp	r9, r4
 80002d4:	f240 8107 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	eba4 0409 	sub.w	r4, r4, r9
 80002e0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002e4:	2100      	movs	r1, #0
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d061      	beq.n	80003ae <__udivmoddi4+0x16a>
 80002ea:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ee:	2300      	movs	r3, #0
 80002f0:	6034      	str	r4, [r6, #0]
 80002f2:	6073      	str	r3, [r6, #4]
 80002f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0xc8>
 80002fc:	2e00      	cmp	r6, #0
 80002fe:	d054      	beq.n	80003aa <__udivmoddi4+0x166>
 8000300:	2100      	movs	r1, #0
 8000302:	e886 0021 	stmia.w	r6, {r0, r5}
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	f040 808e 	bne.w	8000432 <__udivmoddi4+0x1ee>
 8000316:	42ab      	cmp	r3, r5
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xdc>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2d0>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb65 0503 	sbc.w	r5, r5, r3
 8000326:	2001      	movs	r0, #1
 8000328:	46ac      	mov	ip, r5
 800032a:	2e00      	cmp	r6, #0
 800032c:	d03f      	beq.n	80003ae <__udivmoddi4+0x16a>
 800032e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	b912      	cbnz	r2, 800033e <__udivmoddi4+0xfa>
 8000338:	2701      	movs	r7, #1
 800033a:	fbb7 f7f2 	udiv	r7, r7, r2
 800033e:	fab7 fe87 	clz	lr, r7
 8000342:	f1be 0f00 	cmp.w	lr, #0
 8000346:	d134      	bne.n	80003b2 <__udivmoddi4+0x16e>
 8000348:	1beb      	subs	r3, r5, r7
 800034a:	0c3a      	lsrs	r2, r7, #16
 800034c:	fa1f fc87 	uxth.w	ip, r7
 8000350:	2101      	movs	r1, #1
 8000352:	fbb3 f8f2 	udiv	r8, r3, r2
 8000356:	0c25      	lsrs	r5, r4, #16
 8000358:	fb02 3318 	mls	r3, r2, r8, r3
 800035c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000360:	fb0c f308 	mul.w	r3, ip, r8
 8000364:	42ab      	cmp	r3, r5
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x134>
 8000368:	19ed      	adds	r5, r5, r7
 800036a:	f108 30ff 	add.w	r0, r8, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x132>
 8000370:	42ab      	cmp	r3, r5
 8000372:	f200 80d1 	bhi.w	8000518 <__udivmoddi4+0x2d4>
 8000376:	4680      	mov	r8, r0
 8000378:	1aed      	subs	r5, r5, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000380:	fb02 5510 	mls	r5, r2, r0, r5
 8000384:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000388:	fb0c fc00 	mul.w	ip, ip, r0
 800038c:	45a4      	cmp	ip, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x15c>
 8000390:	19e4      	adds	r4, r4, r7
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x15a>
 8000398:	45a4      	cmp	ip, r4
 800039a:	f200 80b8 	bhi.w	800050e <__udivmoddi4+0x2ca>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a8:	e79d      	b.n	80002e6 <__udivmoddi4+0xa2>
 80003aa:	4631      	mov	r1, r6
 80003ac:	4630      	mov	r0, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	f1ce 0420 	rsb	r4, lr, #32
 80003b6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003ba:	fa07 f70e 	lsl.w	r7, r7, lr
 80003be:	fa20 f804 	lsr.w	r8, r0, r4
 80003c2:	0c3a      	lsrs	r2, r7, #16
 80003c4:	fa25 f404 	lsr.w	r4, r5, r4
 80003c8:	ea48 0803 	orr.w	r8, r8, r3
 80003cc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003d0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003d4:	fb02 4411 	mls	r4, r2, r1, r4
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003e0:	fb01 f30c 	mul.w	r3, r1, ip
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x1bc>
 80003ec:	19ed      	adds	r5, r5, r7
 80003ee:	f101 30ff 	add.w	r0, r1, #4294967295
 80003f2:	f080 808a 	bcs.w	800050a <__udivmoddi4+0x2c6>
 80003f6:	42ab      	cmp	r3, r5
 80003f8:	f240 8087 	bls.w	800050a <__udivmoddi4+0x2c6>
 80003fc:	3902      	subs	r1, #2
 80003fe:	443d      	add	r5, r7
 8000400:	1aeb      	subs	r3, r5, r3
 8000402:	fa1f f588 	uxth.w	r5, r8
 8000406:	fbb3 f0f2 	udiv	r0, r3, r2
 800040a:	fb02 3310 	mls	r3, r2, r0, r3
 800040e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000412:	fb00 f30c 	mul.w	r3, r0, ip
 8000416:	42ab      	cmp	r3, r5
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x1e6>
 800041a:	19ed      	adds	r5, r5, r7
 800041c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000420:	d26f      	bcs.n	8000502 <__udivmoddi4+0x2be>
 8000422:	42ab      	cmp	r3, r5
 8000424:	d96d      	bls.n	8000502 <__udivmoddi4+0x2be>
 8000426:	3802      	subs	r0, #2
 8000428:	443d      	add	r5, r7
 800042a:	1aeb      	subs	r3, r5, r3
 800042c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000430:	e78f      	b.n	8000352 <__udivmoddi4+0x10e>
 8000432:	f1c1 0720 	rsb	r7, r1, #32
 8000436:	fa22 f807 	lsr.w	r8, r2, r7
 800043a:	408b      	lsls	r3, r1
 800043c:	fa05 f401 	lsl.w	r4, r5, r1
 8000440:	ea48 0303 	orr.w	r3, r8, r3
 8000444:	fa20 fe07 	lsr.w	lr, r0, r7
 8000448:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800044c:	40fd      	lsrs	r5, r7
 800044e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000452:	fbb5 f9fc 	udiv	r9, r5, ip
 8000456:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800045a:	fb0c 5519 	mls	r5, ip, r9, r5
 800045e:	fa1f f883 	uxth.w	r8, r3
 8000462:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000466:	fb09 f408 	mul.w	r4, r9, r8
 800046a:	42ac      	cmp	r4, r5
 800046c:	fa02 f201 	lsl.w	r2, r2, r1
 8000470:	fa00 fa01 	lsl.w	sl, r0, r1
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x244>
 8000476:	18ed      	adds	r5, r5, r3
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d243      	bcs.n	8000506 <__udivmoddi4+0x2c2>
 800047e:	42ac      	cmp	r4, r5
 8000480:	d941      	bls.n	8000506 <__udivmoddi4+0x2c2>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	441d      	add	r5, r3
 8000488:	1b2d      	subs	r5, r5, r4
 800048a:	fa1f fe8e 	uxth.w	lr, lr
 800048e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000492:	fb0c 5510 	mls	r5, ip, r0, r5
 8000496:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45a0      	cmp	r8, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x26e>
 80004a2:	18e4      	adds	r4, r4, r3
 80004a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80004a8:	d229      	bcs.n	80004fe <__udivmoddi4+0x2ba>
 80004aa:	45a0      	cmp	r8, r4
 80004ac:	d927      	bls.n	80004fe <__udivmoddi4+0x2ba>
 80004ae:	3802      	subs	r0, #2
 80004b0:	441c      	add	r4, r3
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba4 0408 	sub.w	r4, r4, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454c      	cmp	r4, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	464d      	mov	r5, r9
 80004c4:	d315      	bcc.n	80004f2 <__udivmoddi4+0x2ae>
 80004c6:	d012      	beq.n	80004ee <__udivmoddi4+0x2aa>
 80004c8:	b156      	cbz	r6, 80004e0 <__udivmoddi4+0x29c>
 80004ca:	ebba 030e 	subs.w	r3, sl, lr
 80004ce:	eb64 0405 	sbc.w	r4, r4, r5
 80004d2:	fa04 f707 	lsl.w	r7, r4, r7
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431f      	orrs	r7, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	6037      	str	r7, [r6, #0]
 80004de:	6074      	str	r4, [r6, #4]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6f8      	b.n	80002dc <__udivmoddi4+0x98>
 80004ea:	4690      	mov	r8, r2
 80004ec:	e6e0      	b.n	80002b0 <__udivmoddi4+0x6c>
 80004ee:	45c2      	cmp	sl, r8
 80004f0:	d2ea      	bcs.n	80004c8 <__udivmoddi4+0x284>
 80004f2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f6:	eb69 0503 	sbc.w	r5, r9, r3
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7e4      	b.n	80004c8 <__udivmoddi4+0x284>
 80004fe:	4628      	mov	r0, r5
 8000500:	e7d7      	b.n	80004b2 <__udivmoddi4+0x26e>
 8000502:	4640      	mov	r0, r8
 8000504:	e791      	b.n	800042a <__udivmoddi4+0x1e6>
 8000506:	4681      	mov	r9, r0
 8000508:	e7be      	b.n	8000488 <__udivmoddi4+0x244>
 800050a:	4601      	mov	r1, r0
 800050c:	e778      	b.n	8000400 <__udivmoddi4+0x1bc>
 800050e:	3802      	subs	r0, #2
 8000510:	443c      	add	r4, r7
 8000512:	e745      	b.n	80003a0 <__udivmoddi4+0x15c>
 8000514:	4608      	mov	r0, r1
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xe6>
 8000518:	f1a8 0802 	sub.w	r8, r8, #2
 800051c:	443d      	add	r5, r7
 800051e:	e72b      	b.n	8000378 <__udivmoddi4+0x134>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000528:	4a0e      	ldr	r2, [pc, #56]	; (8000564 <HAL_Init+0x40>)
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <HAL_Init+0x40>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000532:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000534:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <HAL_Init+0x40>)
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <HAL_Init+0x40>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800053e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000540:	4a08      	ldr	r2, [pc, #32]	; (8000564 <HAL_Init+0x40>)
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <HAL_Init+0x40>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800054a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f925 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f000 f808 	bl	8000568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000558:	f002 fe90 	bl	800327c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40023c00 	.word	0x40023c00

08000568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_InitTick+0x54>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_InitTick+0x58>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4619      	mov	r1, r3
 800057a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000582:	fbb2 f3f3 	udiv	r3, r2, r3
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f93d 	bl	8000806 <HAL_SYSTICK_Config>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
 8000594:	e00e      	b.n	80005b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b0f      	cmp	r3, #15
 800059a:	d80a      	bhi.n	80005b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800059c:	2200      	movs	r2, #0
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	f04f 30ff 	mov.w	r0, #4294967295
 80005a4:	f000 f905 	bl	80007b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <HAL_InitTick+0x5c>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ae:	2300      	movs	r3, #0
 80005b0:	e000      	b.n	80005b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005b2:	2301      	movs	r3, #1
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000008 	.word	0x20000008
 80005c0:	20000004 	.word	0x20000004
 80005c4:	20000000 	.word	0x20000000

080005c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_IncTick+0x20>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_IncTick+0x24>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4413      	add	r3, r2
 80005d8:	4a04      	ldr	r2, [pc, #16]	; (80005ec <HAL_IncTick+0x24>)
 80005da:	6013      	str	r3, [r2, #0]
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000004 	.word	0x20000004
 80005ec:	200000ac 	.word	0x200000ac

080005f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return uwTick;
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <HAL_GetTick+0x14>)
 80005f6:	681b      	ldr	r3, [r3, #0]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	200000ac 	.word	0x200000ac

08000608 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f003 0307 	and.w	r3, r3, #7
 8000616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <NVIC_SetPriorityGrouping+0x44>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000624:	4013      	ands	r3, r2
 8000626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063a:	4a04      	ldr	r2, [pc, #16]	; (800064c <NVIC_SetPriorityGrouping+0x44>)
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	60d3      	str	r3, [r2, #12]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <NVIC_GetPriorityGrouping+0x18>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	0a1b      	lsrs	r3, r3, #8
 800065a:	f003 0307 	and.w	r3, r3, #7
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000676:	4909      	ldr	r1, [pc, #36]	; (800069c <NVIC_EnableIRQ+0x30>)
 8000678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067c:	095b      	lsrs	r3, r3, #5
 800067e:	79fa      	ldrb	r2, [r7, #7]
 8000680:	f002 021f 	and.w	r2, r2, #31
 8000684:	2001      	movs	r0, #1
 8000686:	fa00 f202 	lsl.w	r2, r0, r2
 800068a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000e100 	.word	0xe000e100

080006a0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	da0b      	bge.n	80006cc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	490d      	ldr	r1, [pc, #52]	; (80006ec <NVIC_SetPriority+0x4c>)
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	3b04      	subs	r3, #4
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	0112      	lsls	r2, r2, #4
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	440b      	add	r3, r1
 80006c8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ca:	e009      	b.n	80006e0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	4908      	ldr	r1, [pc, #32]	; (80006f0 <NVIC_SetPriority+0x50>)
 80006ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	b2d2      	uxtb	r2, r2
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	440b      	add	r3, r1
 80006dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	e000e100 	.word	0xe000e100

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	2201      	movs	r2, #1
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	fa02 f303 	lsl.w	r3, r2, r3
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	401a      	ands	r2, r3
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073a:	2101      	movs	r1, #1
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	1e59      	subs	r1, r3, #1
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	4313      	orrs	r3, r2
         );
}
 800074a:	4618      	mov	r0, r3
 800074c:	3724      	adds	r7, #36	; 0x24
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000768:	d301      	bcc.n	800076e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076a:	2301      	movs	r3, #1
 800076c:	e00f      	b.n	800078e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <SysTick_Config+0x40>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000776:	210f      	movs	r1, #15
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f7ff ff90 	bl	80006a0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <SysTick_Config+0x40>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SysTick_Config+0x40>)
 8000788:	2207      	movs	r2, #7
 800078a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	e000e010 	.word	0xe000e010

0800079c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff2f 	bl	8000608 <NVIC_SetPriorityGrouping>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b086      	sub	sp, #24
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c4:	f7ff ff44 	bl	8000650 <NVIC_GetPriorityGrouping>
 80007c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	f7ff ff90 	bl	80006f4 <NVIC_EncodePriority>
 80007d4:	4602      	mov	r2, r0
 80007d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff5f 	bl	80006a0 <NVIC_SetPriority>
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff37 	bl	800066c <NVIC_EnableIRQ>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ffa2 	bl	8000758 <SysTick_Config>
 8000814:	4603      	mov	r3, r0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b04      	cmp	r3, #4
 800082c:	d106      	bne.n	800083c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800082e:	4a09      	ldr	r2, [pc, #36]	; (8000854 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800083a:	e005      	b.n	8000848 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800083c:	4a05      	ldr	r2, [pc, #20]	; (8000854 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800083e:	4b05      	ldr	r3, [pc, #20]	; (8000854 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f023 0304 	bic.w	r3, r3, #4
 8000846:	6013      	str	r3, [r2, #0]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	e000e010 	.word	0xe000e010

08000858 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800085c:	f002 f950 	bl	8002b00 <HAL_SYSTICK_Callback>
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}

08000864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
 800087e:	e165      	b.n	8000b4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000880:	2201      	movs	r2, #1
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	4013      	ands	r3, r2
 8000892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	429a      	cmp	r2, r3
 800089a:	f040 8154 	bne.w	8000b46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d003      	beq.n	80008ae <HAL_GPIO_Init+0x4a>
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	2b12      	cmp	r3, #18
 80008ac:	d123      	bne.n	80008f6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	08da      	lsrs	r2, r3, #3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3208      	adds	r2, #8
 80008b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	220f      	movs	r2, #15
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43db      	mvns	r3, r3
 80008cc:	69ba      	ldr	r2, [r7, #24]
 80008ce:	4013      	ands	r3, r2
 80008d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	691a      	ldr	r2, [r3, #16]
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	f003 0307 	and.w	r3, r3, #7
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	08da      	lsrs	r2, r3, #3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3208      	adds	r2, #8
 80008f0:	69b9      	ldr	r1, [r7, #24]
 80008f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	2203      	movs	r2, #3
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43db      	mvns	r3, r3
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	4013      	ands	r3, r2
 800090c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	f003 0203 	and.w	r2, r3, #3
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4313      	orrs	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d00b      	beq.n	800094a <HAL_GPIO_Init+0xe6>
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	2b02      	cmp	r3, #2
 8000938:	d007      	beq.n	800094a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800093e:	2b11      	cmp	r3, #17
 8000940:	d003      	beq.n	800094a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	2b12      	cmp	r3, #18
 8000948:	d130      	bne.n	80009ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	2203      	movs	r2, #3
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	4013      	ands	r3, r2
 8000960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	68da      	ldr	r2, [r3, #12]
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	69ba      	ldr	r2, [r7, #24]
 8000970:	4313      	orrs	r3, r2
 8000972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000980:	2201      	movs	r2, #1
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	69ba      	ldr	r2, [r7, #24]
 800098c:	4013      	ands	r3, r2
 800098e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	091b      	lsrs	r3, r3, #4
 8000996:	f003 0201 	and.w	r2, r3, #1
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	2203      	movs	r2, #3
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	4013      	ands	r3, r2
 80009c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	689a      	ldr	r2, [r3, #8]
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	69ba      	ldr	r2, [r7, #24]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	f000 80ae 	beq.w	8000b46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4a5c      	ldr	r2, [pc, #368]	; (8000b60 <HAL_GPIO_Init+0x2fc>)
 80009f0:	4b5b      	ldr	r3, [pc, #364]	; (8000b60 <HAL_GPIO_Init+0x2fc>)
 80009f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b59      	ldr	r3, [pc, #356]	; (8000b60 <HAL_GPIO_Init+0x2fc>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a06:	4a57      	ldr	r2, [pc, #348]	; (8000b64 <HAL_GPIO_Init+0x300>)
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	089b      	lsrs	r3, r3, #2
 8000a0c:	3302      	adds	r3, #2
 8000a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	f003 0303 	and.w	r3, r3, #3
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	220f      	movs	r2, #15
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43db      	mvns	r3, r3
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	4013      	ands	r3, r2
 8000a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a4e      	ldr	r2, [pc, #312]	; (8000b68 <HAL_GPIO_Init+0x304>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d025      	beq.n	8000a7e <HAL_GPIO_Init+0x21a>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a4d      	ldr	r2, [pc, #308]	; (8000b6c <HAL_GPIO_Init+0x308>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d01f      	beq.n	8000a7a <HAL_GPIO_Init+0x216>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a4c      	ldr	r2, [pc, #304]	; (8000b70 <HAL_GPIO_Init+0x30c>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d019      	beq.n	8000a76 <HAL_GPIO_Init+0x212>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a4b      	ldr	r2, [pc, #300]	; (8000b74 <HAL_GPIO_Init+0x310>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d013      	beq.n	8000a72 <HAL_GPIO_Init+0x20e>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a4a      	ldr	r2, [pc, #296]	; (8000b78 <HAL_GPIO_Init+0x314>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d00d      	beq.n	8000a6e <HAL_GPIO_Init+0x20a>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a49      	ldr	r2, [pc, #292]	; (8000b7c <HAL_GPIO_Init+0x318>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d007      	beq.n	8000a6a <HAL_GPIO_Init+0x206>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a48      	ldr	r2, [pc, #288]	; (8000b80 <HAL_GPIO_Init+0x31c>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d101      	bne.n	8000a66 <HAL_GPIO_Init+0x202>
 8000a62:	2306      	movs	r3, #6
 8000a64:	e00c      	b.n	8000a80 <HAL_GPIO_Init+0x21c>
 8000a66:	2307      	movs	r3, #7
 8000a68:	e00a      	b.n	8000a80 <HAL_GPIO_Init+0x21c>
 8000a6a:	2305      	movs	r3, #5
 8000a6c:	e008      	b.n	8000a80 <HAL_GPIO_Init+0x21c>
 8000a6e:	2304      	movs	r3, #4
 8000a70:	e006      	b.n	8000a80 <HAL_GPIO_Init+0x21c>
 8000a72:	2303      	movs	r3, #3
 8000a74:	e004      	b.n	8000a80 <HAL_GPIO_Init+0x21c>
 8000a76:	2302      	movs	r3, #2
 8000a78:	e002      	b.n	8000a80 <HAL_GPIO_Init+0x21c>
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e000      	b.n	8000a80 <HAL_GPIO_Init+0x21c>
 8000a7e:	2300      	movs	r3, #0
 8000a80:	69fa      	ldr	r2, [r7, #28]
 8000a82:	f002 0203 	and.w	r2, r2, #3
 8000a86:	0092      	lsls	r2, r2, #2
 8000a88:	4093      	lsls	r3, r2
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a90:	4934      	ldr	r1, [pc, #208]	; (8000b64 <HAL_GPIO_Init+0x300>)
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	089b      	lsrs	r3, r3, #2
 8000a96:	3302      	adds	r3, #2
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a9e:	4b39      	ldr	r3, [pc, #228]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ac2:	4a30      	ldr	r2, [pc, #192]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ac8:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aec:	4a25      	ldr	r2, [pc, #148]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000af2:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	4013      	ands	r3, r2
 8000b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b16:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	43db      	mvns	r3, r3
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d003      	beq.n	8000b40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b40:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	2b0f      	cmp	r3, #15
 8000b50:	f67f ae96 	bls.w	8000880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b54:	bf00      	nop
 8000b56:	3724      	adds	r7, #36	; 0x24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40013800 	.word	0x40013800
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40020800 	.word	0x40020800
 8000b74:	40020c00 	.word	0x40020c00
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40021400 	.word	0x40021400
 8000b80:	40021800 	.word	0x40021800
 8000b84:	40013c00 	.word	0x40013c00

08000b88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	691a      	ldr	r2, [r3, #16]
 8000b98:	887b      	ldrh	r3, [r7, #2]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d002      	beq.n	8000ba6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	73fb      	strb	r3, [r7, #15]
 8000ba4:	e001      	b.n	8000baa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	807b      	strh	r3, [r7, #2]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bc8:	787b      	ldrb	r3, [r7, #1]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bce:	887a      	ldrh	r2, [r7, #2]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bd4:	e003      	b.n	8000bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	041a      	lsls	r2, r3, #16
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	619a      	str	r2, [r3, #24]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d101      	bne.n	8000c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e0ca      	b.n	8000d96 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c00:	4b67      	ldr	r3, [pc, #412]	; (8000da0 <HAL_RCC_ClockConfig+0x1b4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 020f 	and.w	r2, r3, #15
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d20c      	bcs.n	8000c28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c0e:	4b64      	ldr	r3, [pc, #400]	; (8000da0 <HAL_RCC_ClockConfig+0x1b4>)
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c16:	4b62      	ldr	r3, [pc, #392]	; (8000da0 <HAL_RCC_ClockConfig+0x1b4>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 020f 	and.w	r2, r3, #15
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d001      	beq.n	8000c28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	e0b6      	b.n	8000d96 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d020      	beq.n	8000c76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d005      	beq.n	8000c4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c40:	4a58      	ldr	r2, [pc, #352]	; (8000da4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c42:	4b58      	ldr	r3, [pc, #352]	; (8000da4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000c4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0308 	and.w	r3, r3, #8
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d005      	beq.n	8000c64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c58:	4a52      	ldr	r2, [pc, #328]	; (8000da4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c5a:	4b52      	ldr	r3, [pc, #328]	; (8000da4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000c62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c64:	494f      	ldr	r1, [pc, #316]	; (8000da4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c66:	4b4f      	ldr	r3, [pc, #316]	; (8000da4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d044      	beq.n	8000d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d107      	bne.n	8000c9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8a:	4b46      	ldr	r3, [pc, #280]	; (8000da4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d119      	bne.n	8000cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e07d      	b.n	8000d96 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d003      	beq.n	8000caa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	d107      	bne.n	8000cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000caa:	4b3e      	ldr	r3, [pc, #248]	; (8000da4 <HAL_RCC_ClockConfig+0x1b8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d109      	bne.n	8000cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e06d      	b.n	8000d96 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cba:	4b3a      	ldr	r3, [pc, #232]	; (8000da4 <HAL_RCC_ClockConfig+0x1b8>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e065      	b.n	8000d96 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cca:	4936      	ldr	r1, [pc, #216]	; (8000da4 <HAL_RCC_ClockConfig+0x1b8>)
 8000ccc:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <HAL_RCC_ClockConfig+0x1b8>)
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	f023 0203 	bic.w	r2, r3, #3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000cdc:	f7ff fc88 	bl	80005f0 <HAL_GetTick>
 8000ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ce2:	e00a      	b.n	8000cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ce4:	f7ff fc84 	bl	80005f0 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d901      	bls.n	8000cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e04d      	b.n	8000d96 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <HAL_RCC_ClockConfig+0x1b8>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	f003 020c 	and.w	r2, r3, #12
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d1eb      	bne.n	8000ce4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d0c:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <HAL_RCC_ClockConfig+0x1b4>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f003 020f 	and.w	r2, r3, #15
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d90c      	bls.n	8000d34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <HAL_RCC_ClockConfig+0x1b4>)
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d22:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <HAL_RCC_ClockConfig+0x1b4>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 020f 	and.w	r2, r3, #15
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d001      	beq.n	8000d34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e030      	b.n	8000d96 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 0304 	and.w	r3, r3, #4
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d008      	beq.n	8000d52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d40:	4918      	ldr	r1, [pc, #96]	; (8000da4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0308 	and.w	r3, r3, #8
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d009      	beq.n	8000d72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d5e:	4911      	ldr	r1, [pc, #68]	; (8000da4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d60:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	691b      	ldr	r3, [r3, #16]
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d72:	f000 f851 	bl	8000e18 <HAL_RCC_GetSysClockFreq>
 8000d76:	4601      	mov	r1, r0
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	091b      	lsrs	r3, r3, #4
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	4a09      	ldr	r2, [pc, #36]	; (8000da8 <HAL_RCC_ClockConfig+0x1bc>)
 8000d84:	5cd3      	ldrb	r3, [r2, r3]
 8000d86:	fa21 f303 	lsr.w	r3, r1, r3
 8000d8a:	4a08      	ldr	r2, [pc, #32]	; (8000dac <HAL_RCC_ClockConfig+0x1c0>)
 8000d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff fbea 	bl	8000568 <HAL_InitTick>

  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023c00 	.word	0x40023c00
 8000da4:	40023800 	.word	0x40023800
 8000da8:	08003d2c 	.word	0x08003d2c
 8000dac:	20000008 	.word	0x20000008

08000db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000008 	.word	0x20000008

08000dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000dcc:	f7ff fff0 	bl	8000db0 <HAL_RCC_GetHCLKFreq>
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	0a9b      	lsrs	r3, r3, #10
 8000dd8:	f003 0307 	and.w	r3, r3, #7
 8000ddc:	4a03      	ldr	r2, [pc, #12]	; (8000dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8000dde:	5cd3      	ldrb	r3, [r2, r3]
 8000de0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800
 8000dec:	08003d3c 	.word	0x08003d3c

08000df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000df4:	f7ff ffdc 	bl	8000db0 <HAL_RCC_GetHCLKFreq>
 8000df8:	4601      	mov	r1, r0
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	0b5b      	lsrs	r3, r3, #13
 8000e00:	f003 0307 	and.w	r3, r3, #7
 8000e04:	4a03      	ldr	r2, [pc, #12]	; (8000e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e06:	5cd3      	ldrb	r3, [r2, r3]
 8000e08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40023800 	.word	0x40023800
 8000e14:	08003d3c 	.word	0x08003d3c

08000e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e1c:	b0a1      	sub	sp, #132	; 0x84
 8000e1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000e20:	2300      	movs	r3, #0
 8000e22:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 8000e24:	2300      	movs	r3, #0
 8000e26:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e34:	4ba0      	ldr	r3, [pc, #640]	; (80010b8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f003 030c 	and.w	r3, r3, #12
 8000e3c:	2b0c      	cmp	r3, #12
 8000e3e:	f200 8193 	bhi.w	8001168 <HAL_RCC_GetSysClockFreq+0x350>
 8000e42:	a201      	add	r2, pc, #4	; (adr r2, 8000e48 <HAL_RCC_GetSysClockFreq+0x30>)
 8000e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e48:	08000e7d 	.word	0x08000e7d
 8000e4c:	08001169 	.word	0x08001169
 8000e50:	08001169 	.word	0x08001169
 8000e54:	08001169 	.word	0x08001169
 8000e58:	08000e83 	.word	0x08000e83
 8000e5c:	08001169 	.word	0x08001169
 8000e60:	08001169 	.word	0x08001169
 8000e64:	08001169 	.word	0x08001169
 8000e68:	08000e89 	.word	0x08000e89
 8000e6c:	08001169 	.word	0x08001169
 8000e70:	08001169 	.word	0x08001169
 8000e74:	08001169 	.word	0x08001169
 8000e78:	08001005 	.word	0x08001005
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e7c:	4b8f      	ldr	r3, [pc, #572]	; (80010bc <HAL_RCC_GetSysClockFreq+0x2a4>)
 8000e7e:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 8000e80:	e175      	b.n	800116e <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000e82:	4b8f      	ldr	r3, [pc, #572]	; (80010c0 <HAL_RCC_GetSysClockFreq+0x2a8>)
 8000e84:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8000e86:	e172      	b.n	800116e <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e88:	4b8b      	ldr	r3, [pc, #556]	; (80010b8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e90:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e92:	4b89      	ldr	r3, [pc, #548]	; (80010b8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d056      	beq.n	8000f4c <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e9e:	4b86      	ldr	r3, [pc, #536]	; (80010b8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	099b      	lsrs	r3, r3, #6
 8000ea4:	f04f 0400 	mov.w	r4, #0
 8000ea8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000eac:	f04f 0200 	mov.w	r2, #0
 8000eb0:	ea01 0103 	and.w	r1, r1, r3
 8000eb4:	ea02 0204 	and.w	r2, r2, r4
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4614      	mov	r4, r2
 8000ebc:	0160      	lsls	r0, r4, #5
 8000ebe:	6678      	str	r0, [r7, #100]	; 0x64
 8000ec0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000ec2:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8000ec6:	6678      	str	r0, [r7, #100]	; 0x64
 8000ec8:	015b      	lsls	r3, r3, #5
 8000eca:	663b      	str	r3, [r7, #96]	; 0x60
 8000ecc:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	eb64 0402 	sbc.w	r4, r4, r2
 8000ed6:	01a0      	lsls	r0, r4, #6
 8000ed8:	65f8      	str	r0, [r7, #92]	; 0x5c
 8000eda:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000edc:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 8000ee0:	65f8      	str	r0, [r7, #92]	; 0x5c
 8000ee2:	0198      	lsls	r0, r3, #6
 8000ee4:	65b8      	str	r0, [r7, #88]	; 0x58
 8000ee6:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8000eea:	1aed      	subs	r5, r5, r3
 8000eec:	eb66 0604 	sbc.w	r6, r6, r4
 8000ef0:	4633      	mov	r3, r6
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	657b      	str	r3, [r7, #84]	; 0x54
 8000ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ef8:	4628      	mov	r0, r5
 8000efa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000efe:	657b      	str	r3, [r7, #84]	; 0x54
 8000f00:	462b      	mov	r3, r5
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	653b      	str	r3, [r7, #80]	; 0x50
 8000f06:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8000f0a:	461d      	mov	r5, r3
 8000f0c:	4626      	mov	r6, r4
 8000f0e:	186b      	adds	r3, r5, r1
 8000f10:	eb46 0402 	adc.w	r4, r6, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	4621      	mov	r1, r4
 8000f18:	460b      	mov	r3, r1
 8000f1a:	025b      	lsls	r3, r3, #9
 8000f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f20:	4602      	mov	r2, r0
 8000f22:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 8000f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f28:	4603      	mov	r3, r0
 8000f2a:	025b      	lsls	r3, r3, #9
 8000f2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f2e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8000f32:	4618      	mov	r0, r3
 8000f34:	4621      	mov	r1, r4
 8000f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f38:	f04f 0400 	mov.w	r4, #0
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4623      	mov	r3, r4
 8000f40:	f7ff f968 	bl	8000214 <__aeabi_uldivmod>
 8000f44:	4603      	mov	r3, r0
 8000f46:	460c      	mov	r4, r1
 8000f48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f4a:	e04d      	b.n	8000fe8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f4c:	4b5a      	ldr	r3, [pc, #360]	; (80010b8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	099b      	lsrs	r3, r3, #6
 8000f52:	f04f 0400 	mov.w	r4, #0
 8000f56:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	ea01 0103 	and.w	r1, r1, r3
 8000f62:	ea02 0204 	and.w	r2, r2, r4
 8000f66:	460b      	mov	r3, r1
 8000f68:	4614      	mov	r4, r2
 8000f6a:	0160      	lsls	r0, r4, #5
 8000f6c:	6478      	str	r0, [r7, #68]	; 0x44
 8000f6e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000f70:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8000f74:	6478      	str	r0, [r7, #68]	; 0x44
 8000f76:	015b      	lsls	r3, r3, #5
 8000f78:	643b      	str	r3, [r7, #64]	; 0x40
 8000f7a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8000f7e:	1a5b      	subs	r3, r3, r1
 8000f80:	eb64 0402 	sbc.w	r4, r4, r2
 8000f84:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 8000f88:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 8000f8c:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 8000f90:	ebba 0a03 	subs.w	sl, sl, r3
 8000f94:	eb6b 0b04 	sbc.w	fp, fp, r4
 8000f98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fa0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fa6:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8000faa:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fac:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8000fb0:	eb1a 0a01 	adds.w	sl, sl, r1
 8000fb4:	eb4b 0b02 	adc.w	fp, fp, r2
 8000fb8:	ea4f 238b 	mov.w	r3, fp, lsl #10
 8000fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8000fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc0:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8000fc6:	ea4f 238a 	mov.w	r3, sl, lsl #10
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
 8000fcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8000fd0:	4650      	mov	r0, sl
 8000fd2:	4659      	mov	r1, fp
 8000fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fd6:	f04f 0400 	mov.w	r4, #0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4623      	mov	r3, r4
 8000fde:	f7ff f919 	bl	8000214 <__aeabi_uldivmod>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	460c      	mov	r4, r1
 8000fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000fe8:	4b33      	ldr	r3, [pc, #204]	; (80010b8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	0c1b      	lsrs	r3, r3, #16
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 8000ff8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000ffa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001000:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001002:	e0b4      	b.n	800116e <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001004:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800100c:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800100e:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d054      	beq.n	80010c4 <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800101a:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	099b      	lsrs	r3, r3, #6
 8001020:	f04f 0400 	mov.w	r4, #0
 8001024:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	ea01 0103 	and.w	r1, r1, r3
 8001030:	ea02 0204 	and.w	r2, r2, r4
 8001034:	460b      	mov	r3, r1
 8001036:	4614      	mov	r4, r2
 8001038:	0160      	lsls	r0, r4, #5
 800103a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800103c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800103e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001042:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001044:	015b      	lsls	r3, r3, #5
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
 8001048:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800104c:	1a5b      	subs	r3, r3, r1
 800104e:	eb64 0402 	sbc.w	r4, r4, r2
 8001052:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001056:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 800105a:	ea4f 1883 	mov.w	r8, r3, lsl #6
 800105e:	ebb8 0803 	subs.w	r8, r8, r3
 8001062:	eb69 0904 	sbc.w	r9, r9, r4
 8001066:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
 8001074:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001078:	623b      	str	r3, [r7, #32]
 800107a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800107e:	eb18 0801 	adds.w	r8, r8, r1
 8001082:	eb49 0902 	adc.w	r9, r9, r2
 8001086:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800108a:	61fb      	str	r3, [r7, #28]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001098:	61bb      	str	r3, [r7, #24]
 800109a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800109e:	4640      	mov	r0, r8
 80010a0:	4649      	mov	r1, r9
 80010a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010a4:	f04f 0400 	mov.w	r4, #0
 80010a8:	461a      	mov	r2, r3
 80010aa:	4623      	mov	r3, r4
 80010ac:	f7ff f8b2 	bl	8000214 <__aeabi_uldivmod>
 80010b0:	4603      	mov	r3, r0
 80010b2:	460c      	mov	r4, r1
 80010b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80010b6:	e04b      	b.n	8001150 <HAL_RCC_GetSysClockFreq+0x338>
 80010b8:	40023800 	.word	0x40023800
 80010bc:	00f42400 	.word	0x00f42400
 80010c0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010c4:	4b2d      	ldr	r3, [pc, #180]	; (800117c <HAL_RCC_GetSysClockFreq+0x364>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	099b      	lsrs	r3, r3, #6
 80010ca:	f04f 0400 	mov.w	r4, #0
 80010ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	ea01 0103 	and.w	r1, r1, r3
 80010da:	ea02 0204 	and.w	r2, r2, r4
 80010de:	460b      	mov	r3, r1
 80010e0:	4614      	mov	r4, r2
 80010e2:	0160      	lsls	r0, r4, #5
 80010e4:	6178      	str	r0, [r7, #20]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80010ec:	6178      	str	r0, [r7, #20]
 80010ee:	015b      	lsls	r3, r3, #5
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80010f6:	1a5b      	subs	r3, r3, r1
 80010f8:	eb64 0402 	sbc.w	r4, r4, r2
 80010fc:	01a6      	lsls	r6, r4, #6
 80010fe:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001102:	019d      	lsls	r5, r3, #6
 8001104:	1aed      	subs	r5, r5, r3
 8001106:	eb66 0604 	sbc.w	r6, r6, r4
 800110a:	00f3      	lsls	r3, r6, #3
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	00eb      	lsls	r3, r5, #3
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800111e:	186d      	adds	r5, r5, r1
 8001120:	eb46 0602 	adc.w	r6, r6, r2
 8001124:	02b3      	lsls	r3, r6, #10
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	02ab      	lsls	r3, r5, #10
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001138:	4628      	mov	r0, r5
 800113a:	4631      	mov	r1, r6
 800113c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800113e:	f04f 0400 	mov.w	r4, #0
 8001142:	461a      	mov	r2, r3
 8001144:	4623      	mov	r3, r4
 8001146:	f7ff f865 	bl	8000214 <__aeabi_uldivmod>
 800114a:	4603      	mov	r3, r0
 800114c:	460c      	mov	r4, r1
 800114e:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_RCC_GetSysClockFreq+0x364>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	0f1b      	lsrs	r3, r3, #28
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 800115c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800115e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001160:	fbb2 f3f3 	udiv	r3, r2, r3
 8001164:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001166:	e002      	b.n	800116e <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_RCC_GetSysClockFreq+0x368>)
 800116a:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800116c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800116e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 8001170:	4618      	mov	r0, r3
 8001172:	3784      	adds	r7, #132	; 0x84
 8001174:	46bd      	mov	sp, r7
 8001176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	00f42400 	.word	0x00f42400

08001184 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800118c:	2300      	movs	r3, #0
 800118e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 8083 	beq.w	80012a4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800119e:	4b95      	ldr	r3, [pc, #596]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	d019      	beq.n	80011de <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80011aa:	4b92      	ldr	r3, [pc, #584]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80011b2:	2b08      	cmp	r3, #8
 80011b4:	d106      	bne.n	80011c4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80011b6:	4b8f      	ldr	r3, [pc, #572]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011c2:	d00c      	beq.n	80011de <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011c4:	4b8b      	ldr	r3, [pc, #556]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80011cc:	2b0c      	cmp	r3, #12
 80011ce:	d112      	bne.n	80011f6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011d0:	4b88      	ldr	r3, [pc, #544]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011dc:	d10b      	bne.n	80011f6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011de:	4b85      	ldr	r3, [pc, #532]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d05b      	beq.n	80012a2 <HAL_RCC_OscConfig+0x11e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d157      	bne.n	80012a2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e216      	b.n	8001624 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011fe:	d106      	bne.n	800120e <HAL_RCC_OscConfig+0x8a>
 8001200:	4a7c      	ldr	r2, [pc, #496]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001202:	4b7c      	ldr	r3, [pc, #496]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	e01d      	b.n	800124a <HAL_RCC_OscConfig+0xc6>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001216:	d10c      	bne.n	8001232 <HAL_RCC_OscConfig+0xae>
 8001218:	4a76      	ldr	r2, [pc, #472]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 800121a:	4b76      	ldr	r3, [pc, #472]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4a73      	ldr	r2, [pc, #460]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001226:	4b73      	ldr	r3, [pc, #460]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	e00b      	b.n	800124a <HAL_RCC_OscConfig+0xc6>
 8001232:	4a70      	ldr	r2, [pc, #448]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001234:	4b6f      	ldr	r3, [pc, #444]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	4a6d      	ldr	r2, [pc, #436]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001240:	4b6c      	ldr	r3, [pc, #432]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001248:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d013      	beq.n	800127a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001252:	f7ff f9cd 	bl	80005f0 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800125a:	f7ff f9c9 	bl	80005f0 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b64      	cmp	r3, #100	; 0x64
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e1db      	b.n	8001624 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126c:	4b61      	ldr	r3, [pc, #388]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0f0      	beq.n	800125a <HAL_RCC_OscConfig+0xd6>
 8001278:	e014      	b.n	80012a4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127a:	f7ff f9b9 	bl	80005f0 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001282:	f7ff f9b5 	bl	80005f0 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b64      	cmp	r3, #100	; 0x64
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e1c7      	b.n	8001624 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001294:	4b57      	ldr	r3, [pc, #348]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f0      	bne.n	8001282 <HAL_RCC_OscConfig+0xfe>
 80012a0:	e000      	b.n	80012a4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d06f      	beq.n	8001390 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80012b0:	4b50      	ldr	r3, [pc, #320]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d017      	beq.n	80012ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80012bc:	4b4d      	ldr	r3, [pc, #308]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d105      	bne.n	80012d4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80012c8:	4b4a      	ldr	r3, [pc, #296]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00b      	beq.n	80012ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012d4:	4b47      	ldr	r3, [pc, #284]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80012dc:	2b0c      	cmp	r3, #12
 80012de:	d11c      	bne.n	800131a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012e0:	4b44      	ldr	r3, [pc, #272]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d116      	bne.n	800131a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ec:	4b41      	ldr	r3, [pc, #260]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d005      	beq.n	8001304 <HAL_RCC_OscConfig+0x180>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d001      	beq.n	8001304 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e18f      	b.n	8001624 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001304:	493b      	ldr	r1, [pc, #236]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001306:	4b3b      	ldr	r3, [pc, #236]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4313      	orrs	r3, r2
 8001316:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001318:	e03a      	b.n	8001390 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d020      	beq.n	8001364 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001322:	4b35      	ldr	r3, [pc, #212]	; (80013f8 <HAL_RCC_OscConfig+0x274>)
 8001324:	2201      	movs	r2, #1
 8001326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001328:	f7ff f962 	bl	80005f0 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001330:	f7ff f95e 	bl	80005f0 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e170      	b.n	8001624 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001342:	4b2c      	ldr	r3, [pc, #176]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f0      	beq.n	8001330 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134e:	4929      	ldr	r1, [pc, #164]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001350:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	4313      	orrs	r3, r2
 8001360:	600b      	str	r3, [r1, #0]
 8001362:	e015      	b.n	8001390 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001364:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <HAL_RCC_OscConfig+0x274>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136a:	f7ff f941 	bl	80005f0 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001372:	f7ff f93d 	bl	80005f0 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e14f      	b.n	8001624 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1f0      	bne.n	8001372 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	2b00      	cmp	r3, #0
 800139a:	d037      	beq.n	800140c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d016      	beq.n	80013d2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_RCC_OscConfig+0x278>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013aa:	f7ff f921 	bl	80005f0 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b2:	f7ff f91d 	bl	80005f0 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e12f      	b.n	8001624 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_RCC_OscConfig+0x270>)
 80013c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x22e>
 80013d0:	e01c      	b.n	800140c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_RCC_OscConfig+0x278>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d8:	f7ff f90a 	bl	80005f0 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013de:	e00f      	b.n	8001400 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e0:	f7ff f906 	bl	80005f0 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d908      	bls.n	8001400 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e118      	b.n	8001624 <HAL_RCC_OscConfig+0x4a0>
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	42470000 	.word	0x42470000
 80013fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001400:	4b8a      	ldr	r3, [pc, #552]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 8001402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1e9      	bne.n	80013e0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 8097 	beq.w	8001548 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800141e:	4b83      	ldr	r3, [pc, #524]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10f      	bne.n	800144a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4a7f      	ldr	r2, [pc, #508]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 8001430:	4b7e      	ldr	r3, [pc, #504]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b7c      	ldr	r3, [pc, #496]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001446:	2301      	movs	r3, #1
 8001448:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144a:	4b79      	ldr	r3, [pc, #484]	; (8001630 <HAL_RCC_OscConfig+0x4ac>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001452:	2b00      	cmp	r3, #0
 8001454:	d118      	bne.n	8001488 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001456:	4a76      	ldr	r2, [pc, #472]	; (8001630 <HAL_RCC_OscConfig+0x4ac>)
 8001458:	4b75      	ldr	r3, [pc, #468]	; (8001630 <HAL_RCC_OscConfig+0x4ac>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001462:	f7ff f8c5 	bl	80005f0 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800146a:	f7ff f8c1 	bl	80005f0 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e0d3      	b.n	8001624 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147c:	4b6c      	ldr	r3, [pc, #432]	; (8001630 <HAL_RCC_OscConfig+0x4ac>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f0      	beq.n	800146a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d106      	bne.n	800149e <HAL_RCC_OscConfig+0x31a>
 8001490:	4a66      	ldr	r2, [pc, #408]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 8001492:	4b66      	ldr	r3, [pc, #408]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 8001494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6713      	str	r3, [r2, #112]	; 0x70
 800149c:	e01c      	b.n	80014d8 <HAL_RCC_OscConfig+0x354>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2b05      	cmp	r3, #5
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x33c>
 80014a6:	4a61      	ldr	r2, [pc, #388]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 80014a8:	4b60      	ldr	r3, [pc, #384]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 80014aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	6713      	str	r3, [r2, #112]	; 0x70
 80014b2:	4a5e      	ldr	r2, [pc, #376]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 80014b4:	4b5d      	ldr	r3, [pc, #372]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 80014b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6713      	str	r3, [r2, #112]	; 0x70
 80014be:	e00b      	b.n	80014d8 <HAL_RCC_OscConfig+0x354>
 80014c0:	4a5a      	ldr	r2, [pc, #360]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 80014c2:	4b5a      	ldr	r3, [pc, #360]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 80014c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c6:	f023 0301 	bic.w	r3, r3, #1
 80014ca:	6713      	str	r3, [r2, #112]	; 0x70
 80014cc:	4a57      	ldr	r2, [pc, #348]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 80014ce:	4b57      	ldr	r3, [pc, #348]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	f023 0304 	bic.w	r3, r3, #4
 80014d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d015      	beq.n	800150c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e0:	f7ff f886 	bl	80005f0 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e6:	e00a      	b.n	80014fe <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e8:	f7ff f882 	bl	80005f0 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e092      	b.n	8001624 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fe:	4b4b      	ldr	r3, [pc, #300]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 8001500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0ee      	beq.n	80014e8 <HAL_RCC_OscConfig+0x364>
 800150a:	e014      	b.n	8001536 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150c:	f7ff f870 	bl	80005f0 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001512:	e00a      	b.n	800152a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001514:	f7ff f86c 	bl	80005f0 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e07c      	b.n	8001624 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152a:	4b40      	ldr	r3, [pc, #256]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1ee      	bne.n	8001514 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001536:	7dfb      	ldrb	r3, [r7, #23]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d105      	bne.n	8001548 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800153c:	4a3b      	ldr	r2, [pc, #236]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 800153e:	4b3b      	ldr	r3, [pc, #236]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001546:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d068      	beq.n	8001622 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001550:	4b36      	ldr	r3, [pc, #216]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 030c 	and.w	r3, r3, #12
 8001558:	2b08      	cmp	r3, #8
 800155a:	d060      	beq.n	800161e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	2b02      	cmp	r3, #2
 8001562:	d145      	bne.n	80015f0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001564:	4b33      	ldr	r3, [pc, #204]	; (8001634 <HAL_RCC_OscConfig+0x4b0>)
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156a:	f7ff f841 	bl	80005f0 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001572:	f7ff f83d 	bl	80005f0 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e04f      	b.n	8001624 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001584:	4b29      	ldr	r3, [pc, #164]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f0      	bne.n	8001572 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001590:	4926      	ldr	r1, [pc, #152]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69da      	ldr	r2, [r3, #28]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	019b      	lsls	r3, r3, #6
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	3b01      	subs	r3, #1
 80015ac:	041b      	lsls	r3, r3, #16
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b4:	061b      	lsls	r3, r3, #24
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015bc:	071b      	lsls	r3, r3, #28
 80015be:	4313      	orrs	r3, r2
 80015c0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <HAL_RCC_OscConfig+0x4b0>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c8:	f7ff f812 	bl	80005f0 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d0:	f7ff f80e 	bl	80005f0 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e020      	b.n	8001624 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x44c>
 80015ee:	e018      	b.n	8001622 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <HAL_RCC_OscConfig+0x4b0>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f6:	f7fe fffb 	bl	80005f0 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fe:	f7fe fff7 	bl	80005f0 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e009      	b.n	8001624 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_RCC_OscConfig+0x4a8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1f0      	bne.n	80015fe <HAL_RCC_OscConfig+0x47a>
 800161c:	e001      	b.n	8001622 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40023800 	.word	0x40023800
 8001630:	40007000 	.word	0x40007000
 8001634:	42470060 	.word	0x42470060

08001638 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e01d      	b.n	8001686 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d106      	bne.n	8001664 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f002 f9fc 	bl	8003a5c <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2202      	movs	r2, #2
 8001668:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3304      	adds	r3, #4
 8001674:	4619      	mov	r1, r3
 8001676:	4610      	mov	r0, r2
 8001678:	f000 fbd4 	bl	8001e24 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e01d      	b.n	80016dc <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d106      	bne.n	80016ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f002 f985 	bl	80039c4 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2202      	movs	r2, #2
 80016be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3304      	adds	r3, #4
 80016ca:	4619      	mov	r1, r3
 80016cc:	4610      	mov	r0, r2
 80016ce:	f000 fba9 	bl	8001e24 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}  
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2201      	movs	r2, #1
 80016f4:	6839      	ldr	r1, [r7, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fcb6 	bl	8002068 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a10      	ldr	r2, [pc, #64]	; (8001744 <HAL_TIM_PWM_Start+0x60>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d004      	beq.n	8001710 <HAL_TIM_PWM_Start+0x2c>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <HAL_TIM_PWM_Start+0x64>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d101      	bne.n	8001714 <HAL_TIM_PWM_Start+0x30>
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <HAL_TIM_PWM_Start+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d007      	beq.n	800172a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001724:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001728:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	f042 0201 	orr.w	r2, r2, #1
 8001738:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
} 
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40010000 	.word	0x40010000
 8001748:	40010400 	.word	0x40010400

0800174c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2200      	movs	r2, #0
 800175c:	6839      	ldr	r1, [r7, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f000 fc82 	bl	8002068 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a22      	ldr	r2, [pc, #136]	; (80017f4 <HAL_TIM_PWM_Stop+0xa8>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d004      	beq.n	8001778 <HAL_TIM_PWM_Stop+0x2c>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a21      	ldr	r2, [pc, #132]	; (80017f8 <HAL_TIM_PWM_Stop+0xac>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d101      	bne.n	800177c <HAL_TIM_PWM_Stop+0x30>
 8001778:	2301      	movs	r3, #1
 800177a:	e000      	b.n	800177e <HAL_TIM_PWM_Stop+0x32>
 800177c:	2300      	movs	r3, #0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d017      	beq.n	80017b2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6a1a      	ldr	r2, [r3, #32]
 8001788:	f241 1311 	movw	r3, #4369	; 0x1111
 800178c:	4013      	ands	r3, r2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10f      	bne.n	80017b2 <HAL_TIM_PWM_Stop+0x66>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6a1a      	ldr	r2, [r3, #32]
 8001798:	f240 4344 	movw	r3, #1092	; 0x444
 800179c:	4013      	ands	r3, r2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d107      	bne.n	80017b2 <HAL_TIM_PWM_Stop+0x66>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017b0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6a1a      	ldr	r2, [r3, #32]
 80017b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80017bc:	4013      	ands	r3, r2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10f      	bne.n	80017e2 <HAL_TIM_PWM_Stop+0x96>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6a1a      	ldr	r2, [r3, #32]
 80017c8:	f240 4344 	movw	r3, #1092	; 0x444
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d107      	bne.n	80017e2 <HAL_TIM_PWM_Stop+0x96>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	f022 0201 	bic.w	r2, r2, #1
 80017e0:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
} 
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40010000 	.word	0x40010000
 80017f8:	40010400 	.word	0x40010400

080017fc <HAL_TIM_Encoder_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e081      	b.n	8001920 <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d106      	bne.n	8001836 <HAL_TIM_Encoder_Init+0x3a>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f002 f80f 	bl	8003854 <HAL_TIM_Encoder_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2202      	movs	r2, #2
 800183a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	6892      	ldr	r2, [r2, #8]
 8001848:	f022 0207 	bic.w	r2, r2, #7
 800184c:	609a      	str	r2, [r3, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3304      	adds	r3, #4
 8001856:	4619      	mov	r1, r3
 8001858:	4610      	mov	r0, r2
 800185a:	f000 fae3 	bl	8001e24 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	4313      	orrs	r3, r2
 800187e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001886:	f023 0303 	bic.w	r3, r3, #3
 800188a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	021b      	lsls	r3, r3, #8
 8001896:	4313      	orrs	r3, r2
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80018a4:	f023 030c 	bic.w	r3, r3, #12
 80018a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80018b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	021b      	lsls	r3, r3, #8
 80018c0:	4313      	orrs	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	011a      	lsls	r2, r3, #4
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	031b      	lsls	r3, r3, #12
 80018d4:	4313      	orrs	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80018e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80018ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	011b      	lsls	r3, r3, #4
 80018f6:	4313      	orrs	r3, r2
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	621a      	str	r2, [r3, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d002      	beq.n	800193e <HAL_TIM_Encoder_Start+0x16>
 8001938:	2b04      	cmp	r3, #4
 800193a:	d008      	beq.n	800194e <HAL_TIM_Encoder_Start+0x26>
 800193c:	e00f      	b.n	800195e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2201      	movs	r2, #1
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f000 fb8e 	bl	8002068 <TIM_CCxChannelCmd>
      break; 
 800194c:	e016      	b.n	800197c <HAL_TIM_Encoder_Start+0x54>
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2201      	movs	r2, #1
 8001954:	2104      	movs	r1, #4
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fb86 	bl	8002068 <TIM_CCxChannelCmd>
      break;
 800195c:	e00e      	b.n	800197c <HAL_TIM_Encoder_Start+0x54>
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2201      	movs	r2, #1
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f000 fb7e 	bl	8002068 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2201      	movs	r2, #1
 8001972:	2104      	movs	r1, #4
 8001974:	4618      	mov	r0, r3
 8001976:	f000 fb77 	bl	8002068 <TIM_CCxChannelCmd>
     break; 
 800197a:	bf00      	nop
    }
  }  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    
   /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */ 
  switch (Channel)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <HAL_TIM_Encoder_Stop+0x16>
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d008      	beq.n	80019bc <HAL_TIM_Encoder_Stop+0x26>
 80019aa:	e00f      	b.n	80019cc <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 fb57 	bl	8002068 <TIM_CCxChannelCmd>
      break; 
 80019ba:	e016      	b.n	80019ea <HAL_TIM_Encoder_Stop+0x54>
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2200      	movs	r2, #0
 80019c2:	2104      	movs	r1, #4
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 fb4f 	bl	8002068 <TIM_CCxChannelCmd>
      break;
 80019ca:	e00e      	b.n	80019ea <HAL_TIM_Encoder_Stop+0x54>
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2200      	movs	r2, #0
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 fb47 	bl	8002068 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2200      	movs	r2, #0
 80019e0:	2104      	movs	r1, #4
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 fb40 	bl	8002068 <TIM_CCxChannelCmd>
     break; 
 80019e8:	bf00      	nop
    }
  }  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6a1a      	ldr	r2, [r3, #32]
 80019f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10f      	bne.n	8001a1a <HAL_TIM_Encoder_Stop+0x84>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6a1a      	ldr	r2, [r3, #32]
 8001a00:	f240 4344 	movw	r3, #1092	; 0x444
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d107      	bne.n	8001a1a <HAL_TIM_Encoder_Stop+0x84>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	f022 0201 	bic.w	r2, r2, #1
 8001a18:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d122      	bne.n	8001a80 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d11b      	bne.n	8001a80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f06f 0202 	mvn.w	r2, #2
 8001a50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f9be 	bl	8001de8 <HAL_TIM_IC_CaptureCallback>
 8001a6c:	e005      	b.n	8001a7a <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f9b0 	bl	8001dd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f9c1 	bl	8001dfc <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d122      	bne.n	8001ad4 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d11b      	bne.n	8001ad4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f06f 0204 	mvn.w	r2, #4
 8001aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f994 	bl	8001de8 <HAL_TIM_IC_CaptureCallback>
 8001ac0:	e005      	b.n	8001ace <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f986 	bl	8001dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f997 	bl	8001dfc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b08      	cmp	r3, #8
 8001ae0:	d122      	bne.n	8001b28 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d11b      	bne.n	8001b28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f06f 0208 	mvn.w	r2, #8
 8001af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2204      	movs	r2, #4
 8001afe:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f96a 	bl	8001de8 <HAL_TIM_IC_CaptureCallback>
 8001b14:	e005      	b.n	8001b22 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f95c 	bl	8001dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f96d 	bl	8001dfc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	2b10      	cmp	r3, #16
 8001b34:	d122      	bne.n	8001b7c <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	f003 0310 	and.w	r3, r3, #16
 8001b40:	2b10      	cmp	r3, #16
 8001b42:	d11b      	bne.n	8001b7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f06f 0210 	mvn.w	r2, #16
 8001b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2208      	movs	r2, #8
 8001b52:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f940 	bl	8001de8 <HAL_TIM_IC_CaptureCallback>
 8001b68:	e005      	b.n	8001b76 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f932 	bl	8001dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 f943 	bl	8001dfc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d10e      	bne.n	8001ba8 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d107      	bne.n	8001ba8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f06f 0201 	mvn.w	r2, #1
 8001ba0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f90c 	bl	8001dc0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb2:	2b80      	cmp	r3, #128	; 0x80
 8001bb4:	d10e      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc0:	2b80      	cmp	r3, #128	; 0x80
 8001bc2:	d107      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bcc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 fc09 	bl	80023e6 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bde:	2b40      	cmp	r3, #64	; 0x40
 8001be0:	d10e      	bne.n	8001c00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bec:	2b40      	cmp	r3, #64	; 0x40
 8001bee:	d107      	bne.n	8001c00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bf8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f908 	bl	8001e10 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	2b20      	cmp	r3, #32
 8001c0c:	d10e      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0320 	and.w	r3, r3, #32
 8001c18:	2b20      	cmp	r3, #32
 8001c1a:	d107      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0220 	mvn.w	r2, #32
 8001c24:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 fbd3 	bl	80023d2 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e0b4      	b.n	8001db8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2202      	movs	r2, #2
 8001c5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b0c      	cmp	r3, #12
 8001c62:	f200 809f 	bhi.w	8001da4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001c66:	a201      	add	r2, pc, #4	; (adr r2, 8001c6c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6c:	08001ca1 	.word	0x08001ca1
 8001c70:	08001da5 	.word	0x08001da5
 8001c74:	08001da5 	.word	0x08001da5
 8001c78:	08001da5 	.word	0x08001da5
 8001c7c:	08001ce1 	.word	0x08001ce1
 8001c80:	08001da5 	.word	0x08001da5
 8001c84:	08001da5 	.word	0x08001da5
 8001c88:	08001da5 	.word	0x08001da5
 8001c8c:	08001d23 	.word	0x08001d23
 8001c90:	08001da5 	.word	0x08001da5
 8001c94:	08001da5 	.word	0x08001da5
 8001c98:	08001da5 	.word	0x08001da5
 8001c9c:	08001d63 	.word	0x08001d63
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 fa02 	bl	80020b0 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	6992      	ldr	r2, [r2, #24]
 8001cb6:	f042 0208 	orr.w	r2, r2, #8
 8001cba:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	6992      	ldr	r2, [r2, #24]
 8001cc6:	f022 0204 	bic.w	r2, r2, #4
 8001cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	6991      	ldr	r1, [r2, #24]
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	6912      	ldr	r2, [r2, #16]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	619a      	str	r2, [r3, #24]
    }
    break;
 8001cde:	e062      	b.n	8001da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f946 	bl	8001f78 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	6992      	ldr	r2, [r2, #24]
 8001cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cfa:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	6992      	ldr	r2, [r2, #24]
 8001d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	6991      	ldr	r1, [r2, #24]
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	6912      	ldr	r2, [r2, #16]
 8001d1a:	0212      	lsls	r2, r2, #8
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	619a      	str	r2, [r3, #24]
    }
    break;
 8001d20:	e041      	b.n	8001da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68b9      	ldr	r1, [r7, #8]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 fa35 	bl	8002198 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	69d2      	ldr	r2, [r2, #28]
 8001d38:	f042 0208 	orr.w	r2, r2, #8
 8001d3c:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	6812      	ldr	r2, [r2, #0]
 8001d46:	69d2      	ldr	r2, [r2, #28]
 8001d48:	f022 0204 	bic.w	r2, r2, #4
 8001d4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	69d1      	ldr	r1, [r2, #28]
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	6912      	ldr	r2, [r2, #16]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	61da      	str	r2, [r3, #28]
    }
    break;
 8001d60:	e021      	b.n	8001da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68b9      	ldr	r1, [r7, #8]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 fa8d 	bl	8002288 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	69d2      	ldr	r2, [r2, #28]
 8001d78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d7c:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	69d2      	ldr	r2, [r2, #28]
 8001d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	69d1      	ldr	r1, [r2, #28]
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	6912      	ldr	r2, [r2, #16]
 8001d9c:	0212      	lsls	r2, r2, #8
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	61da      	str	r2, [r3, #28]
    }
    break;
 8001da2:	e000      	b.n	8001da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 8001da4:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a44      	ldr	r2, [pc, #272]	; (8001f4c <TIM_Base_SetConfig+0x128>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d013      	beq.n	8001e68 <TIM_Base_SetConfig+0x44>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e46:	d00f      	beq.n	8001e68 <TIM_Base_SetConfig+0x44>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a41      	ldr	r2, [pc, #260]	; (8001f50 <TIM_Base_SetConfig+0x12c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d00b      	beq.n	8001e68 <TIM_Base_SetConfig+0x44>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a40      	ldr	r2, [pc, #256]	; (8001f54 <TIM_Base_SetConfig+0x130>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d007      	beq.n	8001e68 <TIM_Base_SetConfig+0x44>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a3f      	ldr	r2, [pc, #252]	; (8001f58 <TIM_Base_SetConfig+0x134>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d003      	beq.n	8001e68 <TIM_Base_SetConfig+0x44>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a3e      	ldr	r2, [pc, #248]	; (8001f5c <TIM_Base_SetConfig+0x138>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d101      	bne.n	8001e6c <TIM_Base_SetConfig+0x48>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <TIM_Base_SetConfig+0x4a>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d008      	beq.n	8001e84 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a31      	ldr	r2, [pc, #196]	; (8001f4c <TIM_Base_SetConfig+0x128>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d02b      	beq.n	8001ee4 <TIM_Base_SetConfig+0xc0>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e92:	d027      	beq.n	8001ee4 <TIM_Base_SetConfig+0xc0>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a2e      	ldr	r2, [pc, #184]	; (8001f50 <TIM_Base_SetConfig+0x12c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d023      	beq.n	8001ee4 <TIM_Base_SetConfig+0xc0>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a2d      	ldr	r2, [pc, #180]	; (8001f54 <TIM_Base_SetConfig+0x130>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d01f      	beq.n	8001ee4 <TIM_Base_SetConfig+0xc0>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a2c      	ldr	r2, [pc, #176]	; (8001f58 <TIM_Base_SetConfig+0x134>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d01b      	beq.n	8001ee4 <TIM_Base_SetConfig+0xc0>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a2b      	ldr	r2, [pc, #172]	; (8001f5c <TIM_Base_SetConfig+0x138>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d017      	beq.n	8001ee4 <TIM_Base_SetConfig+0xc0>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a2a      	ldr	r2, [pc, #168]	; (8001f60 <TIM_Base_SetConfig+0x13c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d013      	beq.n	8001ee4 <TIM_Base_SetConfig+0xc0>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a29      	ldr	r2, [pc, #164]	; (8001f64 <TIM_Base_SetConfig+0x140>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00f      	beq.n	8001ee4 <TIM_Base_SetConfig+0xc0>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a28      	ldr	r2, [pc, #160]	; (8001f68 <TIM_Base_SetConfig+0x144>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00b      	beq.n	8001ee4 <TIM_Base_SetConfig+0xc0>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a27      	ldr	r2, [pc, #156]	; (8001f6c <TIM_Base_SetConfig+0x148>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d007      	beq.n	8001ee4 <TIM_Base_SetConfig+0xc0>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a26      	ldr	r2, [pc, #152]	; (8001f70 <TIM_Base_SetConfig+0x14c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d003      	beq.n	8001ee4 <TIM_Base_SetConfig+0xc0>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a25      	ldr	r2, [pc, #148]	; (8001f74 <TIM_Base_SetConfig+0x150>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d101      	bne.n	8001ee8 <TIM_Base_SetConfig+0xc4>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <TIM_Base_SetConfig+0xc6>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d008      	beq.n	8001f00 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a0c      	ldr	r2, [pc, #48]	; (8001f4c <TIM_Base_SetConfig+0x128>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d003      	beq.n	8001f26 <TIM_Base_SetConfig+0x102>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a0e      	ldr	r2, [pc, #56]	; (8001f5c <TIM_Base_SetConfig+0x138>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d101      	bne.n	8001f2a <TIM_Base_SetConfig+0x106>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <TIM_Base_SetConfig+0x108>
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	615a      	str	r2, [r3, #20]
}
 8001f3e:	bf00      	nop
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40010000 	.word	0x40010000
 8001f50:	40000400 	.word	0x40000400
 8001f54:	40000800 	.word	0x40000800
 8001f58:	40000c00 	.word	0x40000c00
 8001f5c:	40010400 	.word	0x40010400
 8001f60:	40014000 	.word	0x40014000
 8001f64:	40014400 	.word	0x40014400
 8001f68:	40014800 	.word	0x40014800
 8001f6c:	40001800 	.word	0x40001800
 8001f70:	40001c00 	.word	0x40001c00
 8001f74:	40002000 	.word	0x40002000

08001f78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	f023 0210 	bic.w	r2, r3, #16
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fba:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f023 0320 	bic.w	r3, r3, #32
 8001fce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a20      	ldr	r2, [pc, #128]	; (8002060 <TIM_OC2_SetConfig+0xe8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d003      	beq.n	8001fec <TIM_OC2_SetConfig+0x74>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a1f      	ldr	r2, [pc, #124]	; (8002064 <TIM_OC2_SetConfig+0xec>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d101      	bne.n	8001ff0 <TIM_OC2_SetConfig+0x78>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <TIM_OC2_SetConfig+0x7a>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d021      	beq.n	800203a <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	4313      	orrs	r3, r2
 8002008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002010:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4313      	orrs	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4313      	orrs	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	621a      	str	r2, [r3, #32]
}
 8002054:	bf00      	nop
 8002056:	371c      	adds	r7, #28
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	40010000 	.word	0x40010000
 8002064:	40010400 	.word	0x40010400

08002068 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002068:	b480      	push	{r7}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002078:	2201      	movs	r2, #1
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6a1a      	ldr	r2, [r3, #32]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	43db      	mvns	r3, r3
 800208a:	401a      	ands	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a1a      	ldr	r2, [r3, #32]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	431a      	orrs	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	621a      	str	r2, [r3, #32]
}
 80020a2:	bf00      	nop
 80020a4:	371c      	adds	r7, #28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	f023 0201 	bic.w	r2, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f023 0303 	bic.w	r3, r3, #3
 80020f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f023 0302 	bic.w	r3, r3, #2
 8002104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4313      	orrs	r3, r2
 800210e:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a1f      	ldr	r2, [pc, #124]	; (8002190 <TIM_OC1_SetConfig+0xe0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d003      	beq.n	8002120 <TIM_OC1_SetConfig+0x70>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a1e      	ldr	r2, [pc, #120]	; (8002194 <TIM_OC1_SetConfig+0xe4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d101      	bne.n	8002124 <TIM_OC1_SetConfig+0x74>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <TIM_OC1_SetConfig+0x76>
 8002124:	2300      	movs	r3, #0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d01e      	beq.n	8002168 <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f023 0308 	bic.w	r3, r3, #8
 8002130:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	4313      	orrs	r3, r2
 800213a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f023 0304 	bic.w	r3, r3, #4
 8002142:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800214a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002152:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	621a      	str	r2, [r3, #32]
} 
 8002182:	bf00      	nop
 8002184:	371c      	adds	r7, #28
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40010000 	.word	0x40010000
 8002194:	40010400 	.word	0x40010400

08002198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002198:	b480      	push	{r7}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f023 0303 	bic.w	r3, r3, #3
 80021da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a20      	ldr	r2, [pc, #128]	; (8002280 <TIM_OC3_SetConfig+0xe8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d003      	beq.n	800220a <TIM_OC3_SetConfig+0x72>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a1f      	ldr	r2, [pc, #124]	; (8002284 <TIM_OC3_SetConfig+0xec>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d101      	bne.n	800220e <TIM_OC3_SetConfig+0x76>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <TIM_OC3_SetConfig+0x78>
 800220e:	2300      	movs	r3, #0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d021      	beq.n	8002258 <TIM_OC3_SetConfig+0xc0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800221a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800222e:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002236:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800223e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	621a      	str	r2, [r3, #32]
}
 8002272:	bf00      	nop
 8002274:	371c      	adds	r7, #28
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40010000 	.word	0x40010000
 8002284:	40010400 	.word	0x40010400

08002288 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022c2:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ca:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022de:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	031b      	lsls	r3, r3, #12
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a14      	ldr	r2, [pc, #80]	; (8002340 <TIM_OC4_SetConfig+0xb8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d003      	beq.n	80022fc <TIM_OC4_SetConfig+0x74>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a13      	ldr	r2, [pc, #76]	; (8002344 <TIM_OC4_SetConfig+0xbc>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d101      	bne.n	8002300 <TIM_OC4_SetConfig+0x78>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <TIM_OC4_SetConfig+0x7a>
 8002300:	2300      	movs	r3, #0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800230c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	019b      	lsls	r3, r3, #6
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	4313      	orrs	r3, r2
 8002318:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	621a      	str	r2, [r3, #32]
}
 8002334:	bf00      	nop
 8002336:	371c      	adds	r7, #28
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40010000 	.word	0x40010000
 8002344:	40010400 	.word	0x40010400

08002348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800235c:	2302      	movs	r3, #2
 800235e:	e032      	b.n	80023c6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	6852      	ldr	r2, [r2, #4]
 800237a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800237e:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	6851      	ldr	r1, [r2, #4]
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	6892      	ldr	r2, [r2, #8]
 800239c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023a0:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	6891      	ldr	r1, [r2, #8]
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	6852      	ldr	r2, [r2, #4]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
} 
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e03f      	b.n	800248c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d106      	bne.n	8002426 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f001 fbd7 	bl	8003bd4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2224      	movs	r2, #36	; 0x24
 800242a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	68d2      	ldr	r2, [r2, #12]
 8002438:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800243c:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f90a 	bl	8002658 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	6912      	ldr	r2, [r2, #16]
 800244e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002452:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	6952      	ldr	r2, [r2, #20]
 800245e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002462:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	68d2      	ldr	r2, [r2, #12]
 800246e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002472:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2220      	movs	r2, #32
 800247e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	4613      	mov	r3, r2
 80024a2:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b20      	cmp	r3, #32
 80024b2:	f040 8082 	bne.w	80025ba <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d002      	beq.n	80024c2 <HAL_UART_Transmit+0x2e>
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e07a      	b.n	80025bc <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_UART_Transmit+0x40>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e073      	b.n	80025bc <HAL_UART_Transmit+0x128>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2221      	movs	r2, #33	; 0x21
 80024e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80024ea:	f7fe f881 	bl	80005f0 <HAL_GetTick>
 80024ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	88fa      	ldrh	r2, [r7, #6]
 80024f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	88fa      	ldrh	r2, [r7, #6]
 80024fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80024fc:	e041      	b.n	8002582 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002502:	b29b      	uxth	r3, r3
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002514:	d121      	bne.n	800255a <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2200      	movs	r2, #0
 800251e:	2180      	movs	r1, #128	; 0x80
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f84f 	bl	80025c4 <UART_WaitOnFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e045      	b.n	80025bc <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	8812      	ldrh	r2, [r2, #0]
 800253c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002540:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d103      	bne.n	8002552 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	3302      	adds	r3, #2
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	e017      	b.n	8002582 <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	3301      	adds	r3, #1
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	e013      	b.n	8002582 <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2200      	movs	r2, #0
 8002562:	2180      	movs	r1, #128	; 0x80
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f82d 	bl	80025c4 <UART_WaitOnFlagUntilTimeout>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e023      	b.n	80025bc <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	1c59      	adds	r1, r3, #1
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1b8      	bne.n	80024fe <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2200      	movs	r2, #0
 8002594:	2140      	movs	r1, #64	; 0x40
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f814 	bl	80025c4 <UART_WaitOnFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e00a      	b.n	80025bc <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	e000      	b.n	80025bc <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 80025ba:	2302      	movs	r3, #2
  }
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	4613      	mov	r3, r2
 80025d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80025d4:	e02c      	b.n	8002630 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025dc:	d028      	beq.n	8002630 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d007      	beq.n	80025f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80025e4:	f7fe f804 	bl	80005f0 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	1ad2      	subs	r2, r2, r3
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d91d      	bls.n	8002630 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	68d2      	ldr	r2, [r2, #12]
 80025fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002602:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	6952      	ldr	r2, [r2, #20]
 800260e:	f022 0201 	bic.w	r2, r2, #1
 8002612:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e00f      	b.n	8002650 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	401a      	ands	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	429a      	cmp	r2, r3
 800263e:	bf0c      	ite	eq
 8002640:	2301      	moveq	r3, #1
 8002642:	2300      	movne	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	429a      	cmp	r2, r3
 800264c:	d0c3      	beq.n	80025d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002672:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	4313      	orrs	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002694:	f023 030c 	bic.w	r3, r3, #12
 8002698:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026cc:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e8:	f040 80e4 	bne.w	80028b4 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4aab      	ldr	r2, [pc, #684]	; (80029a0 <UART_SetConfig+0x348>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d004      	beq.n	8002700 <UART_SetConfig+0xa8>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4aaa      	ldr	r2, [pc, #680]	; (80029a4 <UART_SetConfig+0x34c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d16c      	bne.n	80027da <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681c      	ldr	r4, [r3, #0]
 8002704:	f7fe fb74 	bl	8000df0 <HAL_RCC_GetPCLK2Freq>
 8002708:	4602      	mov	r2, r0
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	009a      	lsls	r2, r3, #2
 8002712:	441a      	add	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	fbb2 f3f3 	udiv	r3, r2, r3
 800271e:	4aa2      	ldr	r2, [pc, #648]	; (80029a8 <UART_SetConfig+0x350>)
 8002720:	fba2 2303 	umull	r2, r3, r2, r3
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	011d      	lsls	r5, r3, #4
 8002728:	f7fe fb62 	bl	8000df0 <HAL_RCC_GetPCLK2Freq>
 800272c:	4602      	mov	r2, r0
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	009a      	lsls	r2, r3, #2
 8002736:	441a      	add	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002742:	f7fe fb55 	bl	8000df0 <HAL_RCC_GetPCLK2Freq>
 8002746:	4602      	mov	r2, r0
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	009a      	lsls	r2, r3, #2
 8002750:	441a      	add	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fbb2 f3f3 	udiv	r3, r2, r3
 800275c:	4a92      	ldr	r2, [pc, #584]	; (80029a8 <UART_SetConfig+0x350>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	2264      	movs	r2, #100	; 0x64
 8002766:	fb02 f303 	mul.w	r3, r2, r3
 800276a:	1af3      	subs	r3, r6, r3
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	3332      	adds	r3, #50	; 0x32
 8002770:	4a8d      	ldr	r2, [pc, #564]	; (80029a8 <UART_SetConfig+0x350>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800277e:	441d      	add	r5, r3
 8002780:	f7fe fb36 	bl	8000df0 <HAL_RCC_GetPCLK2Freq>
 8002784:	4602      	mov	r2, r0
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	009a      	lsls	r2, r3, #2
 800278e:	441a      	add	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fbb2 f6f3 	udiv	r6, r2, r3
 800279a:	f7fe fb29 	bl	8000df0 <HAL_RCC_GetPCLK2Freq>
 800279e:	4602      	mov	r2, r0
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	009a      	lsls	r2, r3, #2
 80027a8:	441a      	add	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b4:	4a7c      	ldr	r2, [pc, #496]	; (80029a8 <UART_SetConfig+0x350>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	2264      	movs	r2, #100	; 0x64
 80027be:	fb02 f303 	mul.w	r3, r2, r3
 80027c2:	1af3      	subs	r3, r6, r3
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	3332      	adds	r3, #50	; 0x32
 80027c8:	4a77      	ldr	r2, [pc, #476]	; (80029a8 <UART_SetConfig+0x350>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	442b      	add	r3, r5
 80027d6:	60a3      	str	r3, [r4, #8]
 80027d8:	e154      	b.n	8002a84 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681c      	ldr	r4, [r3, #0]
 80027de:	f7fe faf3 	bl	8000dc8 <HAL_RCC_GetPCLK1Freq>
 80027e2:	4602      	mov	r2, r0
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	009a      	lsls	r2, r3, #2
 80027ec:	441a      	add	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f8:	4a6b      	ldr	r2, [pc, #428]	; (80029a8 <UART_SetConfig+0x350>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	011d      	lsls	r5, r3, #4
 8002802:	f7fe fae1 	bl	8000dc8 <HAL_RCC_GetPCLK1Freq>
 8002806:	4602      	mov	r2, r0
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	009a      	lsls	r2, r3, #2
 8002810:	441a      	add	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fbb2 f6f3 	udiv	r6, r2, r3
 800281c:	f7fe fad4 	bl	8000dc8 <HAL_RCC_GetPCLK1Freq>
 8002820:	4602      	mov	r2, r0
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	009a      	lsls	r2, r3, #2
 800282a:	441a      	add	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	fbb2 f3f3 	udiv	r3, r2, r3
 8002836:	4a5c      	ldr	r2, [pc, #368]	; (80029a8 <UART_SetConfig+0x350>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	2264      	movs	r2, #100	; 0x64
 8002840:	fb02 f303 	mul.w	r3, r2, r3
 8002844:	1af3      	subs	r3, r6, r3
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	3332      	adds	r3, #50	; 0x32
 800284a:	4a57      	ldr	r2, [pc, #348]	; (80029a8 <UART_SetConfig+0x350>)
 800284c:	fba2 2303 	umull	r2, r3, r2, r3
 8002850:	095b      	lsrs	r3, r3, #5
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002858:	441d      	add	r5, r3
 800285a:	f7fe fab5 	bl	8000dc8 <HAL_RCC_GetPCLK1Freq>
 800285e:	4602      	mov	r2, r0
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	009a      	lsls	r2, r3, #2
 8002868:	441a      	add	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fbb2 f6f3 	udiv	r6, r2, r3
 8002874:	f7fe faa8 	bl	8000dc8 <HAL_RCC_GetPCLK1Freq>
 8002878:	4602      	mov	r2, r0
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	009a      	lsls	r2, r3, #2
 8002882:	441a      	add	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	fbb2 f3f3 	udiv	r3, r2, r3
 800288e:	4a46      	ldr	r2, [pc, #280]	; (80029a8 <UART_SetConfig+0x350>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	2264      	movs	r2, #100	; 0x64
 8002898:	fb02 f303 	mul.w	r3, r2, r3
 800289c:	1af3      	subs	r3, r6, r3
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	3332      	adds	r3, #50	; 0x32
 80028a2:	4a41      	ldr	r2, [pc, #260]	; (80029a8 <UART_SetConfig+0x350>)
 80028a4:	fba2 2303 	umull	r2, r3, r2, r3
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	442b      	add	r3, r5
 80028b0:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80028b2:	e0e7      	b.n	8002a84 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a39      	ldr	r2, [pc, #228]	; (80029a0 <UART_SetConfig+0x348>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d004      	beq.n	80028c8 <UART_SetConfig+0x270>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a38      	ldr	r2, [pc, #224]	; (80029a4 <UART_SetConfig+0x34c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d171      	bne.n	80029ac <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681c      	ldr	r4, [r3, #0]
 80028cc:	f7fe fa90 	bl	8000df0 <HAL_RCC_GetPCLK2Freq>
 80028d0:	4602      	mov	r2, r0
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	009a      	lsls	r2, r3, #2
 80028da:	441a      	add	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e6:	4a30      	ldr	r2, [pc, #192]	; (80029a8 <UART_SetConfig+0x350>)
 80028e8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ec:	095b      	lsrs	r3, r3, #5
 80028ee:	011d      	lsls	r5, r3, #4
 80028f0:	f7fe fa7e 	bl	8000df0 <HAL_RCC_GetPCLK2Freq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	009a      	lsls	r2, r3, #2
 80028fe:	441a      	add	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	fbb2 f6f3 	udiv	r6, r2, r3
 800290a:	f7fe fa71 	bl	8000df0 <HAL_RCC_GetPCLK2Freq>
 800290e:	4602      	mov	r2, r0
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	009a      	lsls	r2, r3, #2
 8002918:	441a      	add	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	fbb2 f3f3 	udiv	r3, r2, r3
 8002924:	4a20      	ldr	r2, [pc, #128]	; (80029a8 <UART_SetConfig+0x350>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2264      	movs	r2, #100	; 0x64
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	1af3      	subs	r3, r6, r3
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	3332      	adds	r3, #50	; 0x32
 8002938:	4a1b      	ldr	r2, [pc, #108]	; (80029a8 <UART_SetConfig+0x350>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002944:	441d      	add	r5, r3
 8002946:	f7fe fa53 	bl	8000df0 <HAL_RCC_GetPCLK2Freq>
 800294a:	4602      	mov	r2, r0
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	009a      	lsls	r2, r3, #2
 8002954:	441a      	add	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	fbb2 f6f3 	udiv	r6, r2, r3
 8002960:	f7fe fa46 	bl	8000df0 <HAL_RCC_GetPCLK2Freq>
 8002964:	4602      	mov	r2, r0
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	009a      	lsls	r2, r3, #2
 800296e:	441a      	add	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	fbb2 f3f3 	udiv	r3, r2, r3
 800297a:	4a0b      	ldr	r2, [pc, #44]	; (80029a8 <UART_SetConfig+0x350>)
 800297c:	fba2 2303 	umull	r2, r3, r2, r3
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	2264      	movs	r2, #100	; 0x64
 8002984:	fb02 f303 	mul.w	r3, r2, r3
 8002988:	1af3      	subs	r3, r6, r3
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	3332      	adds	r3, #50	; 0x32
 800298e:	4a06      	ldr	r2, [pc, #24]	; (80029a8 <UART_SetConfig+0x350>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	442b      	add	r3, r5
 800299c:	60a3      	str	r3, [r4, #8]
 800299e:	e071      	b.n	8002a84 <UART_SetConfig+0x42c>
 80029a0:	40011000 	.word	0x40011000
 80029a4:	40011400 	.word	0x40011400
 80029a8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681c      	ldr	r4, [r3, #0]
 80029b0:	f7fe fa0a 	bl	8000dc8 <HAL_RCC_GetPCLK1Freq>
 80029b4:	4602      	mov	r2, r0
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	009a      	lsls	r2, r3, #2
 80029be:	441a      	add	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	4a30      	ldr	r2, [pc, #192]	; (8002a8c <UART_SetConfig+0x434>)
 80029cc:	fba2 2303 	umull	r2, r3, r2, r3
 80029d0:	095b      	lsrs	r3, r3, #5
 80029d2:	011d      	lsls	r5, r3, #4
 80029d4:	f7fe f9f8 	bl	8000dc8 <HAL_RCC_GetPCLK1Freq>
 80029d8:	4602      	mov	r2, r0
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	009a      	lsls	r2, r3, #2
 80029e2:	441a      	add	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80029ee:	f7fe f9eb 	bl	8000dc8 <HAL_RCC_GetPCLK1Freq>
 80029f2:	4602      	mov	r2, r0
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	009a      	lsls	r2, r3, #2
 80029fc:	441a      	add	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a08:	4a20      	ldr	r2, [pc, #128]	; (8002a8c <UART_SetConfig+0x434>)
 8002a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	2264      	movs	r2, #100	; 0x64
 8002a12:	fb02 f303 	mul.w	r3, r2, r3
 8002a16:	1af3      	subs	r3, r6, r3
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	3332      	adds	r3, #50	; 0x32
 8002a1c:	4a1b      	ldr	r2, [pc, #108]	; (8002a8c <UART_SetConfig+0x434>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	095b      	lsrs	r3, r3, #5
 8002a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a28:	441d      	add	r5, r3
 8002a2a:	f7fe f9cd 	bl	8000dc8 <HAL_RCC_GetPCLK1Freq>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	009a      	lsls	r2, r3, #2
 8002a38:	441a      	add	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	fbb2 f6f3 	udiv	r6, r2, r3
 8002a44:	f7fe f9c0 	bl	8000dc8 <HAL_RCC_GetPCLK1Freq>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	009a      	lsls	r2, r3, #2
 8002a52:	441a      	add	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5e:	4a0b      	ldr	r2, [pc, #44]	; (8002a8c <UART_SetConfig+0x434>)
 8002a60:	fba2 2303 	umull	r2, r3, r2, r3
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	2264      	movs	r2, #100	; 0x64
 8002a68:	fb02 f303 	mul.w	r3, r2, r3
 8002a6c:	1af3      	subs	r3, r6, r3
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	3332      	adds	r3, #50	; 0x32
 8002a72:	4a06      	ldr	r2, [pc, #24]	; (8002a8c <UART_SetConfig+0x434>)
 8002a74:	fba2 2303 	umull	r2, r3, r2, r3
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	442b      	add	r3, r5
 8002a80:	60a3      	str	r3, [r4, #8]
}
 8002a82:	e7ff      	b.n	8002a84 <UART_SetConfig+0x42c>
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a8c:	51eb851f 	.word	0x51eb851f

08002a90 <app_run>:
-   Returns:
-     void 
-   Description:
-    	Our main loop for the application code.
-----------------------------------------------------------------------*/
void app_run(void) {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b092      	sub	sp, #72	; 0x48
 8002a94:	af00      	add	r7, sp, #0
	char encoder_data[64];
	motors_init();
 8002a96:	f000 f839 	bl	8002b0c <motors_init>
	float pwm_val = .5;
 8002a9a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002a9e:	647b      	str	r3, [r7, #68]	; 0x44
	direction_t change_dir = FORWARD;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	set_mtr_pwm(MTR1, pwm_val);
 8002aa6:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f000 f8c6 	bl	8002c3c <set_mtr_pwm>
	set_mtr_dir(MTR1, change_dir);
 8002ab0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f000 f8a6 	bl	8002c08 <set_mtr_dir>

	pwm_on_off(MTR_ALL, MTR_ON);
 8002abc:	2101      	movs	r1, #1
 8002abe:	2004      	movs	r0, #4
 8002ac0:	f000 f95a 	bl	8002d78 <pwm_on_off>
	encoder_on_off(MTR_ALL, MTR_ON);
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	2004      	movs	r0, #4
 8002ac8:	f000 f97b 	bl	8002dc2 <encoder_on_off>



	while (1) {
		//float speed = get_mtr_velocity(MTR1);
		HAL_UART_Transmit(&huart2, (uint8_t*)encoder_data, strlen(encoder_data), 0xFFFF);
 8002acc:	463b      	mov	r3, r7
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fd fb98 	bl	8000204 <strlen>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	4639      	mov	r1, r7
 8002ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ade:	4807      	ldr	r0, [pc, #28]	; (8002afc <app_run+0x6c>)
 8002ae0:	f7ff fcd8 	bl	8002494 <HAL_UART_Transmit>
		set_mtr_dir(MTR1, change_dir);
 8002ae4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002ae8:	4619      	mov	r1, r3
 8002aea:	2000      	movs	r0, #0
 8002aec:	f000 f88c 	bl	8002c08 <set_mtr_dir>
		set_mtr_pwm(MTR1, pwm_val);
 8002af0:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8002af4:	2000      	movs	r0, #0
 8002af6:	f000 f8a1 	bl	8002c3c <set_mtr_pwm>
		HAL_UART_Transmit(&huart2, (uint8_t*)encoder_data, strlen(encoder_data), 0xFFFF);
 8002afa:	e7e7      	b.n	8002acc <app_run+0x3c>
 8002afc:	20000290 	.word	0x20000290

08002b00 <HAL_SYSTICK_Callback>:
}

/*-----------------------------------------------------------------------
- Private Functions
-----------------------------------------------------------------------*/
void HAL_SYSTICK_Callback(void) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
	// Called every 1 ms, use this as time base for updating motor velocity
	mtr_1ms_timeout();
 8002b04:	f000 f982 	bl	8002e0c <mtr_1ms_timeout>
}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <motors_init>:
-     void
-   Description:
-    	Initializes all motor structs with their respective pwm timer,
-			encoder timer, and direction pin.
-----------------------------------------------------------------------*/
void motors_init(void) {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
	memset(&motor_1, 0, sizeof(motor_t));
 8002b10:	2220      	movs	r2, #32
 8002b12:	2100      	movs	r1, #0
 8002b14:	482e      	ldr	r0, [pc, #184]	; (8002bd0 <motors_init+0xc4>)
 8002b16:	f001 f8dd 	bl	8003cd4 <memset>
	motor_1.dir_ctrl.gpio_port = MTR1_DIR_GPIO_Port;
 8002b1a:	4b2d      	ldr	r3, [pc, #180]	; (8002bd0 <motors_init+0xc4>)
 8002b1c:	4a2d      	ldr	r2, [pc, #180]	; (8002bd4 <motors_init+0xc8>)
 8002b1e:	601a      	str	r2, [r3, #0]
	motor_1.dir_ctrl.gpio_pin  = MTR1_DIR_Pin;
 8002b20:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <motors_init+0xc4>)
 8002b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b26:	809a      	strh	r2, [r3, #4]
	motor_1.position.hencoder = &htim4;
 8002b28:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <motors_init+0xc4>)
 8002b2a:	4a2b      	ldr	r2, [pc, #172]	; (8002bd8 <motors_init+0xcc>)
 8002b2c:	611a      	str	r2, [r3, #16]
	motor_1.position.channel = TIM_CHANNEL_1;
 8002b2e:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <motors_init+0xc4>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	61da      	str	r2, [r3, #28]
	motor_1.pwm.hpwm = &htim10;
 8002b34:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <motors_init+0xc4>)
 8002b36:	4a29      	ldr	r2, [pc, #164]	; (8002bdc <motors_init+0xd0>)
 8002b38:	609a      	str	r2, [r3, #8]
	motor_1.pwm.channel = TIM_CHANNEL_1;
 8002b3a:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <motors_init+0xc4>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	60da      	str	r2, [r3, #12]

	memset(&motor_2, 0, sizeof(motor_2));
 8002b40:	2220      	movs	r2, #32
 8002b42:	2100      	movs	r1, #0
 8002b44:	4826      	ldr	r0, [pc, #152]	; (8002be0 <motors_init+0xd4>)
 8002b46:	f001 f8c5 	bl	8003cd4 <memset>
	motor_2.dir_ctrl.gpio_port = MTR2_DIR_GPIO_Port;
 8002b4a:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <motors_init+0xd4>)
 8002b4c:	4a25      	ldr	r2, [pc, #148]	; (8002be4 <motors_init+0xd8>)
 8002b4e:	601a      	str	r2, [r3, #0]
	motor_2.dir_ctrl.gpio_pin  = MTR2_DIR_Pin;
 8002b50:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <motors_init+0xd4>)
 8002b52:	2220      	movs	r2, #32
 8002b54:	809a      	strh	r2, [r3, #4]
	motor_2.position.hencoder = &htim3;
 8002b56:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <motors_init+0xd4>)
 8002b58:	4a23      	ldr	r2, [pc, #140]	; (8002be8 <motors_init+0xdc>)
 8002b5a:	611a      	str	r2, [r3, #16]
	motor_2.position.channel = TIM_CHANNEL_2;
 8002b5c:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <motors_init+0xd4>)
 8002b5e:	2204      	movs	r2, #4
 8002b60:	61da      	str	r2, [r3, #28]
	motor_2.pwm.hpwm = &htim5;
 8002b62:	4b1f      	ldr	r3, [pc, #124]	; (8002be0 <motors_init+0xd4>)
 8002b64:	4a21      	ldr	r2, [pc, #132]	; (8002bec <motors_init+0xe0>)
 8002b66:	609a      	str	r2, [r3, #8]
	motor_2.pwm.channel = TIM_CHANNEL_2;
 8002b68:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <motors_init+0xd4>)
 8002b6a:	2204      	movs	r2, #4
 8002b6c:	60da      	str	r2, [r3, #12]

	memset(&motor_3, 0, sizeof(motor_t));
 8002b6e:	2220      	movs	r2, #32
 8002b70:	2100      	movs	r1, #0
 8002b72:	481f      	ldr	r0, [pc, #124]	; (8002bf0 <motors_init+0xe4>)
 8002b74:	f001 f8ae 	bl	8003cd4 <memset>
	motor_3.dir_ctrl.gpio_port = MTR2_DIR_GPIO_Port;
 8002b78:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <motors_init+0xe4>)
 8002b7a:	4a1a      	ldr	r2, [pc, #104]	; (8002be4 <motors_init+0xd8>)
 8002b7c:	601a      	str	r2, [r3, #0]
	motor_3.dir_ctrl.gpio_pin  = MTR2_DIR_Pin;
 8002b7e:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <motors_init+0xe4>)
 8002b80:	2220      	movs	r2, #32
 8002b82:	809a      	strh	r2, [r3, #4]
	motor_3.position.hencoder = &htim8;
 8002b84:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <motors_init+0xe4>)
 8002b86:	4a1b      	ldr	r2, [pc, #108]	; (8002bf4 <motors_init+0xe8>)
 8002b88:	611a      	str	r2, [r3, #16]
	motor_3.position.channel = TIM_CHANNEL_2;
 8002b8a:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <motors_init+0xe4>)
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	61da      	str	r2, [r3, #28]
	motor_3.pwm.hpwm = &htim2;
 8002b90:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <motors_init+0xe4>)
 8002b92:	4a19      	ldr	r2, [pc, #100]	; (8002bf8 <motors_init+0xec>)
 8002b94:	609a      	str	r2, [r3, #8]
	motor_3.pwm.channel = TIM_CHANNEL_4;
 8002b96:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <motors_init+0xe4>)
 8002b98:	220c      	movs	r2, #12
 8002b9a:	60da      	str	r2, [r3, #12]

	memset(&motor_4, 0, sizeof(motor_t));
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4816      	ldr	r0, [pc, #88]	; (8002bfc <motors_init+0xf0>)
 8002ba2:	f001 f897 	bl	8003cd4 <memset>
	motor_4.dir_ctrl.gpio_port = MTR2_DIR_GPIO_Port;
 8002ba6:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <motors_init+0xf0>)
 8002ba8:	4a0e      	ldr	r2, [pc, #56]	; (8002be4 <motors_init+0xd8>)
 8002baa:	601a      	str	r2, [r3, #0]
	motor_4.dir_ctrl.gpio_pin  = MTR2_DIR_Pin;
 8002bac:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <motors_init+0xf0>)
 8002bae:	2220      	movs	r2, #32
 8002bb0:	809a      	strh	r2, [r3, #4]
	motor_4.position.hencoder = &htim1;
 8002bb2:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <motors_init+0xf0>)
 8002bb4:	4a12      	ldr	r2, [pc, #72]	; (8002c00 <motors_init+0xf4>)
 8002bb6:	611a      	str	r2, [r3, #16]
	motor_4.position.channel = TIM_CHANNEL_2;
 8002bb8:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <motors_init+0xf0>)
 8002bba:	2204      	movs	r2, #4
 8002bbc:	61da      	str	r2, [r3, #28]
	motor_4.pwm.hpwm = &htim12;
 8002bbe:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <motors_init+0xf0>)
 8002bc0:	4a10      	ldr	r2, [pc, #64]	; (8002c04 <motors_init+0xf8>)
 8002bc2:	609a      	str	r2, [r3, #8]
	motor_4.pwm.channel = TIM_CHANNEL_2;
 8002bc4:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <motors_init+0xf0>)
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	60da      	str	r2, [r3, #12]
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000028 	.word	0x20000028
 8002bd4:	40020400 	.word	0x40020400
 8002bd8:	200000ec 	.word	0x200000ec
 8002bdc:	20000128 	.word	0x20000128
 8002be0:	20000048 	.word	0x20000048
 8002be4:	40020000 	.word	0x40020000
 8002be8:	200001a0 	.word	0x200001a0
 8002bec:	20000164 	.word	0x20000164
 8002bf0:	20000068 	.word	0x20000068
 8002bf4:	200000b0 	.word	0x200000b0
 8002bf8:	20000218 	.word	0x20000218
 8002bfc:	20000088 	.word	0x20000088
 8002c00:	200001dc 	.word	0x200001dc
 8002c04:	20000254 	.word	0x20000254

08002c08 <set_mtr_dir>:
-   Returns:
-     void
-   Description:
-    	Set the motor to go forward or backwards
-----------------------------------------------------------------------*/
void set_mtr_dir(mtr_id_t mtr_id, direction_t dir) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	460a      	mov	r2, r1
 8002c12:	71fb      	strb	r3, [r7, #7]
 8002c14:	4613      	mov	r3, r2
 8002c16:	71bb      	strb	r3, [r7, #6]
	motor_t * motor = get_mtr(mtr_id);
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f918 	bl	8002e50 <get_mtr>
 8002c20:	60f8      	str	r0, [r7, #12]
	HAL_GPIO_WritePin(motor->dir_ctrl.gpio_port, motor->dir_ctrl.gpio_pin, dir);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	889b      	ldrh	r3, [r3, #4]
 8002c2a:	79ba      	ldrb	r2, [r7, #6]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	f7fd ffc3 	bl	8000bb8 <HAL_GPIO_WritePin>
}
 8002c32:	bf00      	nop
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <set_mtr_pwm>:
-   Description:
-    	Set the timers CCR register to a percentage of its ARR register.
-			Timer count 0 to CCR specifies PWM high, CCR to ARR specifies PWM
-			low.
-----------------------------------------------------------------------*/
void set_mtr_pwm(mtr_id_t mtr_id, float pwm) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	ed87 0a00 	vstr	s0, [r7]
 8002c48:	71fb      	strb	r3, [r7, #7]
	motor_t * motor = get_mtr(mtr_id);
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 f8ff 	bl	8002e50 <get_mtr>
 8002c52:	60f8      	str	r0, [r7, #12]

	if (pwm < 0) {
 8002c54:	edd7 7a00 	vldr	s15, [r7]
 8002c58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c60:	d503      	bpl.n	8002c6a <set_mtr_pwm+0x2e>
		pwm = 0;
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	e00b      	b.n	8002c82 <set_mtr_pwm+0x46>
	}
	else if (pwm > 1.0) {
 8002c6a:	edd7 7a00 	vldr	s15, [r7]
 8002c6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7a:	dd02      	ble.n	8002c82 <set_mtr_pwm+0x46>
		pwm = 1;
 8002c7c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c80:	603b      	str	r3, [r7, #0]
	}

	switch (motor->pwm.channel) {
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	d870      	bhi.n	8002d6c <set_mtr_pwm+0x130>
 8002c8a:	a201      	add	r2, pc, #4	; (adr r2, 8002c90 <set_mtr_pwm+0x54>)
 8002c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c90:	08002cc5 	.word	0x08002cc5
 8002c94:	08002d6d 	.word	0x08002d6d
 8002c98:	08002d6d 	.word	0x08002d6d
 8002c9c:	08002d6d 	.word	0x08002d6d
 8002ca0:	08002cef 	.word	0x08002cef
 8002ca4:	08002d6d 	.word	0x08002d6d
 8002ca8:	08002d6d 	.word	0x08002d6d
 8002cac:	08002d6d 	.word	0x08002d6d
 8002cb0:	08002d19 	.word	0x08002d19
 8002cb4:	08002d6d 	.word	0x08002d6d
 8002cb8:	08002d6d 	.word	0x08002d6d
 8002cbc:	08002d6d 	.word	0x08002d6d
 8002cc0:	08002d43 	.word	0x08002d43
	case TIM_CHANNEL_1: {
		motor->pwm.hpwm->Instance->CCR1 = motor->pwm.hpwm->Instance->ARR * pwm;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	6892      	ldr	r2, [r2, #8]
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cd2:	ee07 2a90 	vmov	s15, r2
 8002cd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cda:	edd7 7a00 	vldr	s15, [r7]
 8002cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ce6:	ee17 2a90 	vmov	r2, s15
 8002cea:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8002cec:	e03f      	b.n	8002d6e <set_mtr_pwm+0x132>
	}
	case TIM_CHANNEL_2: {
		motor->pwm.hpwm->Instance->CCR2 = motor->pwm.hpwm->Instance->ARR * pwm;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	6892      	ldr	r2, [r2, #8]
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cfc:	ee07 2a90 	vmov	s15, r2
 8002d00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d04:	edd7 7a00 	vldr	s15, [r7]
 8002d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d10:	ee17 2a90 	vmov	r2, s15
 8002d14:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8002d16:	e02a      	b.n	8002d6e <set_mtr_pwm+0x132>
	}
	case TIM_CHANNEL_3: {
		motor->pwm.hpwm->Instance->CCR3 = motor->pwm.hpwm->Instance->ARR * pwm;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	6892      	ldr	r2, [r2, #8]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d26:	ee07 2a90 	vmov	s15, r2
 8002d2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d2e:	edd7 7a00 	vldr	s15, [r7]
 8002d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d3a:	ee17 2a90 	vmov	r2, s15
 8002d3e:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8002d40:	e015      	b.n	8002d6e <set_mtr_pwm+0x132>
	}
	case TIM_CHANNEL_4: {
		motor->pwm.hpwm->Instance->CCR4 = motor->pwm.hpwm->Instance->ARR * pwm;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	6892      	ldr	r2, [r2, #8]
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d50:	ee07 2a90 	vmov	s15, r2
 8002d54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d58:	edd7 7a00 	vldr	s15, [r7]
 8002d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d64:	ee17 2a90 	vmov	r2, s15
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002d6a:	e000      	b.n	8002d6e <set_mtr_pwm+0x132>
	}
	default:
		break;
 8002d6c:	bf00      	nop
	}
}
 8002d6e:	bf00      	nop
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop

08002d78 <pwm_on_off>:
-   Returns:
-     void
-   Description:
-    	Turns the pwm timer on/off.
-----------------------------------------------------------------------*/
void pwm_on_off(mtr_id_t mtr_id, mtr_status_t mtr_status) {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	460a      	mov	r2, r1
 8002d82:	71fb      	strb	r3, [r7, #7]
 8002d84:	4613      	mov	r3, r2
 8002d86:	71bb      	strb	r3, [r7, #6]
	if (mtr_id == MTR_ALL) {
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d10f      	bne.n	8002dae <pwm_on_off+0x36>
		for (uint8_t i = 0; i < MTR_ALL; i++) {
 8002d8e:	2300      	movs	r3, #0
 8002d90:	73fb      	strb	r3, [r7, #15]
 8002d92:	e008      	b.n	8002da6 <pwm_on_off+0x2e>
			pwm_on_off_helper(MTR1 + i, mtr_status);
 8002d94:	79ba      	ldrb	r2, [r7, #6]
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 f8fc 	bl	8002f98 <pwm_on_off_helper>
		for (uint8_t i = 0; i < MTR_ALL; i++) {
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	3301      	adds	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d9f3      	bls.n	8002d94 <pwm_on_off+0x1c>
		}
	}
	else {
		pwm_on_off_helper(mtr_id, mtr_status);
	}
}
 8002dac:	e005      	b.n	8002dba <pwm_on_off+0x42>
		pwm_on_off_helper(mtr_id, mtr_status);
 8002dae:	79ba      	ldrb	r2, [r7, #6]
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	4611      	mov	r1, r2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 f8ef 	bl	8002f98 <pwm_on_off_helper>
}
 8002dba:	bf00      	nop
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <encoder_on_off>:
-   Returns:
-     void
-   Description:
-    	Turns the encoder timer on/off.
-----------------------------------------------------------------------*/
void encoder_on_off(mtr_id_t mtr_id, mtr_status_t mtr_status) {
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	4603      	mov	r3, r0
 8002dca:	460a      	mov	r2, r1
 8002dcc:	71fb      	strb	r3, [r7, #7]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	71bb      	strb	r3, [r7, #6]
	if (mtr_id == MTR_ALL) {
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d10f      	bne.n	8002df8 <encoder_on_off+0x36>
		for (uint8_t i = 0; i < MTR_ALL; i++) {
 8002dd8:	2300      	movs	r3, #0
 8002dda:	73fb      	strb	r3, [r7, #15]
 8002ddc:	e008      	b.n	8002df0 <encoder_on_off+0x2e>
			encoder_on_off_helper(MTR1 + i, mtr_status);
 8002dde:	79ba      	ldrb	r2, [r7, #6]
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	4611      	mov	r1, r2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 f8ff 	bl	8002fe8 <encoder_on_off_helper>
		for (uint8_t i = 0; i < MTR_ALL; i++) {
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	3301      	adds	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d9f3      	bls.n	8002dde <encoder_on_off+0x1c>
		}
	}
	else {
		encoder_on_off_helper(mtr_id, mtr_status);
	}
}
 8002df6:	e005      	b.n	8002e04 <encoder_on_off+0x42>
		encoder_on_off_helper(mtr_id, mtr_status);
 8002df8:	79ba      	ldrb	r2, [r7, #6]
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 f8f2 	bl	8002fe8 <encoder_on_off_helper>
}
 8002e04:	bf00      	nop
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <mtr_1ms_timeout>:
-   Description:
-    	This function gets called every 1 ms by the SysTick timer. Once
-			MTR_VELOCITY_TIMESCALE time has passed, we will update the velocity
-			of each of the motors.
-----------------------------------------------------------------------*/
void mtr_1ms_timeout(void) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
	static uint16_t time_passed = 0;

	if (time_passed++ == MTR_VELOCITY_TIMESCALE) {
 8002e12:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <mtr_1ms_timeout+0x40>)
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	b291      	uxth	r1, r2
 8002e1a:	4a0c      	ldr	r2, [pc, #48]	; (8002e4c <mtr_1ms_timeout+0x40>)
 8002e1c:	8011      	strh	r1, [r2, #0]
 8002e1e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e22:	d10f      	bne.n	8002e44 <mtr_1ms_timeout+0x38>
		for (uint8_t i = 0; i < MTR_ALL; i++) {
 8002e24:	2300      	movs	r3, #0
 8002e26:	71fb      	strb	r3, [r7, #7]
 8002e28:	e006      	b.n	8002e38 <mtr_1ms_timeout+0x2c>
			update_mtr_velocity(i);
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 f831 	bl	8002e94 <update_mtr_velocity>
		for (uint8_t i = 0; i < MTR_ALL; i++) {
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	3301      	adds	r3, #1
 8002e36:	71fb      	strb	r3, [r7, #7]
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d9f5      	bls.n	8002e2a <mtr_1ms_timeout+0x1e>
		}
		time_passed = 0;
 8002e3e:	4b03      	ldr	r3, [pc, #12]	; (8002e4c <mtr_1ms_timeout+0x40>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	801a      	strh	r2, [r3, #0]
	}
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	200000a8 	.word	0x200000a8

08002e50 <get_mtr>:
-   Returns:
-     motor_t *: Pointer to motor struct.
-   Description:
-    	Get the pointer to a motor struct
-----------------------------------------------------------------------*/
static motor_t * get_mtr(mtr_id_t mtr_id) {
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	71fb      	strb	r3, [r7, #7]
	switch (mtr_id) {
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d005      	beq.n	8002e6c <get_mtr+0x1c>
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d005      	beq.n	8002e70 <get_mtr+0x20>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d105      	bne.n	8002e74 <get_mtr+0x24>
	case MTR1:
		return &motor_1;
 8002e68:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <get_mtr+0x34>)
 8002e6a:	e004      	b.n	8002e76 <get_mtr+0x26>
	case MTR2:
		return &motor_2;
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <get_mtr+0x38>)
 8002e6e:	e002      	b.n	8002e76 <get_mtr+0x26>
	case MTR3:
		return &motor_3;
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <get_mtr+0x3c>)
 8002e72:	e000      	b.n	8002e76 <get_mtr+0x26>
	case MTR4:
	default:
		return &motor_4;
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <get_mtr+0x40>)
	}
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	20000028 	.word	0x20000028
 8002e88:	20000048 	.word	0x20000048
 8002e8c:	20000068 	.word	0x20000068
 8002e90:	20000088 	.word	0x20000088

08002e94 <update_mtr_velocity>:
-     void
-   Description:
-    	Updates the velocity of the motor based off of current and previous
-			encoder counts and the circumference of our wheels.
-----------------------------------------------------------------------*/
static void update_mtr_velocity(mtr_id_t mtr_id) {
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
	motor_t * motor = get_mtr(mtr_id);
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ffd5 	bl	8002e50 <get_mtr>
 8002ea6:	61b8      	str	r0, [r7, #24]
	int16_t change_in_encoder;
	uint32_t current_count = motor->position.hencoder->Instance->CNT;
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	617b      	str	r3, [r7, #20]
	uint32_t prev_count = motor->position.prev_encoder_cnt;
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	613b      	str	r3, [r7, #16]
	// Stop encoder before reading so it doesn't change during calculations
	encoder_on_off(mtr_id, MTR_OFF);
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	2100      	movs	r1, #0
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff80 	bl	8002dc2 <encoder_on_off>

	// Need to account for possible roll over, check if direction is reverse
	if (HAL_GPIO_ReadPin(motor->dir_ctrl.gpio_port, motor->dir_ctrl.gpio_pin) == GPIO_PIN_RESET) {
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	889b      	ldrh	r3, [r3, #4]
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4610      	mov	r0, r2
 8002ece:	f7fd fe5b 	bl	8000b88 <HAL_GPIO_ReadPin>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d116      	bne.n	8002f06 <update_mtr_velocity+0x72>
		// Check if we rolled over if CNT is greater than prev_encoder_cnt when going reverse
		if (current_count > prev_count) {
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d90a      	bls.n	8002ef6 <update_mtr_velocity+0x62>
			change_in_encoder = prev_count + ENCODER_TICKS_PER_REV - current_count;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	83fb      	strh	r3, [r7, #30]
 8002ef4:	e021      	b.n	8002f3a <update_mtr_velocity+0xa6>
		}
		else {
			change_in_encoder = current_count - prev_count;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	83fb      	strh	r3, [r7, #30]
 8002f04:	e019      	b.n	8002f3a <update_mtr_velocity+0xa6>

	}
	// Direction is forward
	else {
		// Check if we rolled over if CNT is less than our prev_encoder_cnt when going forward
		if (motor->position.hencoder->Instance->CNT < motor->position.prev_encoder_cnt) {
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d20a      	bcs.n	8002f2c <update_mtr_velocity+0x98>
			change_in_encoder = current_count + ENCODER_TICKS_PER_REV - prev_count;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	83fb      	strh	r3, [r7, #30]
 8002f2a:	e006      	b.n	8002f3a <update_mtr_velocity+0xa6>
		}
		else {
			change_in_encoder = current_count - prev_count;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	83fb      	strh	r3, [r7, #30]
		}
	}
	motor->position.prev_encoder_cnt = current_count;
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	615a      	str	r2, [r3, #20]

	encoder_on_off(mtr_id, MTR_ON);
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	2101      	movs	r1, #1
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff3c 	bl	8002dc2 <encoder_on_off>
	float percent_circum_moved =  change_in_encoder / (ENCODER_TICKS_PER_REV - 1);
 8002f4a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002f4e:	4a0f      	ldr	r2, [pc, #60]	; (8002f8c <update_mtr_velocity+0xf8>)
 8002f50:	fb82 1203 	smull	r1, r2, r2, r3
 8002f54:	441a      	add	r2, r3
 8002f56:	1252      	asrs	r2, r2, #9
 8002f58:	17db      	asrs	r3, r3, #31
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	b21b      	sxth	r3, r3
 8002f5e:	ee07 3a90 	vmov	s15, r3
 8002f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f66:	edc7 7a03 	vstr	s15, [r7, #12]
	motor->position.velocity = (percent_circum_moved * WHEEL_CIRCUMFERENCE) / MTR_VELOCITY_TIMESCALE;
 8002f6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f6e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002f90 <update_mtr_velocity+0xfc>
 8002f72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f76:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002f94 <update_mtr_velocity+0x100>
 8002f7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8002f84:	bf00      	nop
 8002f86:	3720      	adds	r7, #32
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	80200803 	.word	0x80200803
 8002f90:	3dcccccd 	.word	0x3dcccccd
 8002f94:	43fa0000 	.word	0x43fa0000

08002f98 <pwm_on_off_helper>:

/** See pwm_on_off, helper function to write cleaner code **/
static void pwm_on_off_helper(mtr_id_t mtr_id, mtr_status_t mtr_status) {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	460a      	mov	r2, r1
 8002fa2:	71fb      	strb	r3, [r7, #7]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	71bb      	strb	r3, [r7, #6]
	motor_t * mtr = get_mtr(mtr_id);
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff ff50 	bl	8002e50 <get_mtr>
 8002fb0:	60f8      	str	r0, [r7, #12]
	if (mtr_status == MTR_OFF) {
 8002fb2:	79bb      	ldrb	r3, [r7, #6]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d108      	bne.n	8002fca <pwm_on_off_helper+0x32>
		HAL_TIM_PWM_Stop(mtr->pwm.hpwm, mtr->pwm.channel);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	f7fe fbc2 	bl	800174c <HAL_TIM_PWM_Stop>
	}
	else if (mtr_status == MTR_ON) {
		HAL_TIM_PWM_Start(mtr->pwm.hpwm, mtr->pwm.channel);
	}
}
 8002fc8:	e00a      	b.n	8002fe0 <pwm_on_off_helper+0x48>
	else if (mtr_status == MTR_ON) {
 8002fca:	79bb      	ldrb	r3, [r7, #6]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d107      	bne.n	8002fe0 <pwm_on_off_helper+0x48>
		HAL_TIM_PWM_Start(mtr->pwm.hpwm, mtr->pwm.channel);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	f7fe fb82 	bl	80016e4 <HAL_TIM_PWM_Start>
}
 8002fe0:	bf00      	nop
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <encoder_on_off_helper>:

/** See encoder_on_off, helper function to write cleaner code **/
static void encoder_on_off_helper(mtr_id_t mtr_id, mtr_status_t mtr_status) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	460a      	mov	r2, r1
 8002ff2:	71fb      	strb	r3, [r7, #7]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	71bb      	strb	r3, [r7, #6]
	motor_t * mtr = get_mtr(mtr_id);
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff ff28 	bl	8002e50 <get_mtr>
 8003000:	60f8      	str	r0, [r7, #12]
	if (mtr_status == MTR_OFF) {
 8003002:	79bb      	ldrb	r3, [r7, #6]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d108      	bne.n	800301a <encoder_on_off_helper+0x32>
		HAL_TIM_Encoder_Stop(mtr->position.hencoder, mtr->position.channel);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	4619      	mov	r1, r3
 8003012:	4610      	mov	r0, r2
 8003014:	f7fe fcbf 	bl	8001996 <HAL_TIM_Encoder_Stop>
	}
	else if (mtr_status == MTR_ON) {
		HAL_TIM_Encoder_Start(mtr->position.hencoder, mtr->position.channel);
	}
}
 8003018:	e00a      	b.n	8003030 <encoder_on_off_helper+0x48>
	else if (mtr_status == MTR_ON) {
 800301a:	79bb      	ldrb	r3, [r7, #6]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d107      	bne.n	8003030 <encoder_on_off_helper+0x48>
		HAL_TIM_Encoder_Start(mtr->position.hencoder, mtr->position.channel);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f7fe fc7c 	bl	8001928 <HAL_TIM_Encoder_Start>
}
 8003030:	bf00      	nop
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08a      	sub	sp, #40	; 0x28
 800303c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	4a3b      	ldr	r2, [pc, #236]	; (8003130 <MX_GPIO_Init+0xf8>)
 8003044:	4b3a      	ldr	r3, [pc, #232]	; (8003130 <MX_GPIO_Init+0xf8>)
 8003046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800304c:	6313      	str	r3, [r2, #48]	; 0x30
 800304e:	4b38      	ldr	r3, [pc, #224]	; (8003130 <MX_GPIO_Init+0xf8>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	4a34      	ldr	r2, [pc, #208]	; (8003130 <MX_GPIO_Init+0xf8>)
 8003060:	4b33      	ldr	r3, [pc, #204]	; (8003130 <MX_GPIO_Init+0xf8>)
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6313      	str	r3, [r2, #48]	; 0x30
 800306a:	4b31      	ldr	r3, [pc, #196]	; (8003130 <MX_GPIO_Init+0xf8>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	4a2d      	ldr	r2, [pc, #180]	; (8003130 <MX_GPIO_Init+0xf8>)
 800307c:	4b2c      	ldr	r3, [pc, #176]	; (8003130 <MX_GPIO_Init+0xf8>)
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	f043 0302 	orr.w	r3, r3, #2
 8003084:	6313      	str	r3, [r2, #48]	; 0x30
 8003086:	4b2a      	ldr	r3, [pc, #168]	; (8003130 <MX_GPIO_Init+0xf8>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	60bb      	str	r3, [r7, #8]
 8003090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	607b      	str	r3, [r7, #4]
 8003096:	4a26      	ldr	r2, [pc, #152]	; (8003130 <MX_GPIO_Init+0xf8>)
 8003098:	4b25      	ldr	r3, [pc, #148]	; (8003130 <MX_GPIO_Init+0xf8>)
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	6313      	str	r3, [r2, #48]	; 0x30
 80030a2:	4b23      	ldr	r3, [pc, #140]	; (8003130 <MX_GPIO_Init+0xf8>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	607b      	str	r3, [r7, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MTR2_DIR_GPIO_Port, MTR2_DIR_Pin, GPIO_PIN_RESET);
 80030ae:	2200      	movs	r2, #0
 80030b0:	2120      	movs	r1, #32
 80030b2:	4820      	ldr	r0, [pc, #128]	; (8003134 <MX_GPIO_Init+0xfc>)
 80030b4:	f7fd fd80 	bl	8000bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MTR3_DIR_Pin|MTR1_DIR_Pin, GPIO_PIN_RESET);
 80030b8:	2200      	movs	r2, #0
 80030ba:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 80030be:	481e      	ldr	r0, [pc, #120]	; (8003138 <MX_GPIO_Init+0x100>)
 80030c0:	f7fd fd7a 	bl	8000bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MTR4_DIR_GPIO_Port, MTR4_DIR_Pin, GPIO_PIN_RESET);
 80030c4:	2200      	movs	r2, #0
 80030c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030ca:	481c      	ldr	r0, [pc, #112]	; (800313c <MX_GPIO_Init+0x104>)
 80030cc:	f7fd fd74 	bl	8000bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MTR2_DIR_Pin;
 80030d0:	2320      	movs	r3, #32
 80030d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d4:	2301      	movs	r3, #1
 80030d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030dc:	2300      	movs	r3, #0
 80030de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MTR2_DIR_GPIO_Port, &GPIO_InitStruct);
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	4619      	mov	r1, r3
 80030e6:	4813      	ldr	r0, [pc, #76]	; (8003134 <MX_GPIO_Init+0xfc>)
 80030e8:	f7fd fbbc 	bl	8000864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MTR3_DIR_Pin|MTR1_DIR_Pin;
 80030ec:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80030f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030f2:	2301      	movs	r3, #1
 80030f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fa:	2300      	movs	r3, #0
 80030fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030fe:	f107 0314 	add.w	r3, r7, #20
 8003102:	4619      	mov	r1, r3
 8003104:	480c      	ldr	r0, [pc, #48]	; (8003138 <MX_GPIO_Init+0x100>)
 8003106:	f7fd fbad 	bl	8000864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MTR4_DIR_Pin;
 800310a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800310e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003110:	2301      	movs	r3, #1
 8003112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003118:	2300      	movs	r3, #0
 800311a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MTR4_DIR_GPIO_Port, &GPIO_InitStruct);
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	4619      	mov	r1, r3
 8003122:	4806      	ldr	r0, [pc, #24]	; (800313c <MX_GPIO_Init+0x104>)
 8003124:	f7fd fb9e 	bl	8000864 <HAL_GPIO_Init>

}
 8003128:	bf00      	nop
 800312a:	3728      	adds	r7, #40	; 0x28
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40023800 	.word	0x40023800
 8003134:	40020000 	.word	0x40020000
 8003138:	40020400 	.word	0x40020400
 800313c:	40020800 	.word	0x40020800

08003140 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003144:	f7fd f9ee 	bl	8000524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003148:	f000 f818 	bl	800317c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800314c:	f7ff ff74 	bl	8003038 <MX_GPIO_Init>
  MX_TIM1_Init();
 8003150:	f000 f918 	bl	8003384 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003154:	f000 f9b6 	bl	80034c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003158:	f000 fa00 	bl	800355c <MX_TIM4_Init>
  MX_TIM8_Init();
 800315c:	f000 fa9a 	bl	8003694 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8003160:	f000 fd0a 	bl	8003b78 <MX_USART2_UART_Init>
//  MX_CAN1_Init();
  MX_TIM2_Init();
 8003164:	f000 f95e 	bl	8003424 <MX_TIM2_Init>
  MX_TIM5_Init();
 8003168:	f000 fa44 	bl	80035f4 <MX_TIM5_Init>
  MX_TIM10_Init();
 800316c:	f000 fae2 	bl	8003734 <MX_TIM10_Init>
  MX_TIM12_Init();
 8003170:	f000 fb2e 	bl	80037d0 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  /** Don't want to write code in this mess, run in application.c **/
  app_run();
 8003174:	f7ff fc8c 	bl	8002a90 <app_run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003178:	e7fe      	b.n	8003178 <main+0x38>
	...

0800317c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b094      	sub	sp, #80	; 0x50
 8003180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	607b      	str	r3, [r7, #4]
 8003186:	4a36      	ldr	r2, [pc, #216]	; (8003260 <SystemClock_Config+0xe4>)
 8003188:	4b35      	ldr	r3, [pc, #212]	; (8003260 <SystemClock_Config+0xe4>)
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003190:	6413      	str	r3, [r2, #64]	; 0x40
 8003192:	4b33      	ldr	r3, [pc, #204]	; (8003260 <SystemClock_Config+0xe4>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319a:	607b      	str	r3, [r7, #4]
 800319c:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800319e:	2300      	movs	r3, #0
 80031a0:	603b      	str	r3, [r7, #0]
 80031a2:	4a30      	ldr	r2, [pc, #192]	; (8003264 <SystemClock_Config+0xe8>)
 80031a4:	4b2f      	ldr	r3, [pc, #188]	; (8003264 <SystemClock_Config+0xe8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80031ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	4b2c      	ldr	r3, [pc, #176]	; (8003264 <SystemClock_Config+0xe8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031be:	2302      	movs	r3, #2
 80031c0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031c2:	2301      	movs	r3, #1
 80031c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80031c6:	2310      	movs	r3, #16
 80031c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031ca:	2302      	movs	r3, #2
 80031cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80031ce:	2300      	movs	r3, #0
 80031d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80031d2:	2310      	movs	r3, #16
 80031d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80031d6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80031da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80031dc:	2304      	movs	r3, #4
 80031de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80031e0:	2302      	movs	r3, #2
 80031e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80031e4:	2302      	movs	r3, #2
 80031e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031e8:	f107 031c 	add.w	r3, r7, #28
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fd ffc9 	bl	8001184 <HAL_RCC_OscConfig>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <SystemClock_Config+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 80031f8:	21a0      	movs	r1, #160	; 0xa0
 80031fa:	481b      	ldr	r0, [pc, #108]	; (8003268 <SystemClock_Config+0xec>)
 80031fc:	f000 f838 	bl	8003270 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003200:	230f      	movs	r3, #15
 8003202:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003204:	2302      	movs	r3, #2
 8003206:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003208:	2300      	movs	r3, #0
 800320a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800320c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003210:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003216:	f107 0308 	add.w	r3, r7, #8
 800321a:	2102      	movs	r1, #2
 800321c:	4618      	mov	r0, r3
 800321e:	f7fd fce5 	bl	8000bec <HAL_RCC_ClockConfig>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <SystemClock_Config+0xb4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003228:	21ae      	movs	r1, #174	; 0xae
 800322a:	480f      	ldr	r0, [pc, #60]	; (8003268 <SystemClock_Config+0xec>)
 800322c:	f000 f820 	bl	8003270 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003230:	f7fd fdbe 	bl	8000db0 <HAL_RCC_GetHCLKFreq>
 8003234:	4602      	mov	r2, r0
 8003236:	4b0d      	ldr	r3, [pc, #52]	; (800326c <SystemClock_Config+0xf0>)
 8003238:	fba3 2302 	umull	r2, r3, r3, r2
 800323c:	099b      	lsrs	r3, r3, #6
 800323e:	4618      	mov	r0, r3
 8003240:	f7fd fae1 	bl	8000806 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003244:	2004      	movs	r0, #4
 8003246:	f7fd faeb 	bl	8000820 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800324a:	2200      	movs	r2, #0
 800324c:	2100      	movs	r1, #0
 800324e:	f04f 30ff 	mov.w	r0, #4294967295
 8003252:	f7fd faae 	bl	80007b2 <HAL_NVIC_SetPriority>
}
 8003256:	bf00      	nop
 8003258:	3750      	adds	r7, #80	; 0x50
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40023800 	.word	0x40023800
 8003264:	40007000 	.word	0x40007000
 8003268:	08003cfc 	.word	0x08003cfc
 800326c:	10624dd3 	.word	0x10624dd3

08003270 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800327a:	e7fe      	b.n	800327a <_Error_Handler+0xa>

0800327c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003280:	2007      	movs	r0, #7
 8003282:	f7fd fa8b 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003286:	2200      	movs	r2, #0
 8003288:	2100      	movs	r1, #0
 800328a:	f06f 000b 	mvn.w	r0, #11
 800328e:	f7fd fa90 	bl	80007b2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003292:	2200      	movs	r2, #0
 8003294:	2100      	movs	r1, #0
 8003296:	f06f 000a 	mvn.w	r0, #10
 800329a:	f7fd fa8a 	bl	80007b2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800329e:	2200      	movs	r2, #0
 80032a0:	2100      	movs	r1, #0
 80032a2:	f06f 0009 	mvn.w	r0, #9
 80032a6:	f7fd fa84 	bl	80007b2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80032aa:	2200      	movs	r2, #0
 80032ac:	2100      	movs	r1, #0
 80032ae:	f06f 0004 	mvn.w	r0, #4
 80032b2:	f7fd fa7e 	bl	80007b2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80032b6:	2200      	movs	r2, #0
 80032b8:	2100      	movs	r1, #0
 80032ba:	f06f 0003 	mvn.w	r0, #3
 80032be:	f7fd fa78 	bl	80007b2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80032c2:	2200      	movs	r2, #0
 80032c4:	2100      	movs	r1, #0
 80032c6:	f06f 0001 	mvn.w	r0, #1
 80032ca:	f7fd fa72 	bl	80007b2 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80032ce:	2200      	movs	r2, #0
 80032d0:	2100      	movs	r1, #0
 80032d2:	f04f 30ff 	mov.w	r0, #4294967295
 80032d6:	f7fd fa6c 	bl	80007b2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}

080032de <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032e2:	f7fd f971 	bl	80005c8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80032e6:	f7fd fab7 	bl	8000858 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <TIM8_UP_TIM13_IRQHandler>:

/**
* @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
*/
void TIM8_UP_TIM13_IRQHandler(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80032f4:	4802      	ldr	r0, [pc, #8]	; (8003300 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80032f6:	f7fe fb95 	bl	8001a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80032fa:	bf00      	nop
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	200000b0 	.word	0x200000b0

08003304 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
* @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
*/
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003308:	4802      	ldr	r0, [pc, #8]	; (8003314 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800330a:	f7fe fb8b 	bl	8001a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	200000b0 	.word	0x200000b0

08003318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800331c:	4a16      	ldr	r2, [pc, #88]	; (8003378 <SystemInit+0x60>)
 800331e:	4b16      	ldr	r3, [pc, #88]	; (8003378 <SystemInit+0x60>)
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800332c:	4a13      	ldr	r2, [pc, #76]	; (800337c <SystemInit+0x64>)
 800332e:	4b13      	ldr	r3, [pc, #76]	; (800337c <SystemInit+0x64>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003338:	4b10      	ldr	r3, [pc, #64]	; (800337c <SystemInit+0x64>)
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800333e:	4a0f      	ldr	r2, [pc, #60]	; (800337c <SystemInit+0x64>)
 8003340:	4b0e      	ldr	r3, [pc, #56]	; (800337c <SystemInit+0x64>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800334e:	4b0b      	ldr	r3, [pc, #44]	; (800337c <SystemInit+0x64>)
 8003350:	4a0b      	ldr	r2, [pc, #44]	; (8003380 <SystemInit+0x68>)
 8003352:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003354:	4a09      	ldr	r2, [pc, #36]	; (800337c <SystemInit+0x64>)
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <SystemInit+0x64>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800335e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <SystemInit+0x64>)
 8003362:	2200      	movs	r2, #0
 8003364:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003366:	4b04      	ldr	r3, [pc, #16]	; (8003378 <SystemInit+0x60>)
 8003368:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800336c:	609a      	str	r2, [r3, #8]
#endif
}
 800336e:	bf00      	nop
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	e000ed00 	.word	0xe000ed00
 800337c:	40023800 	.word	0x40023800
 8003380:	24003010 	.word	0x24003010

08003384 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08c      	sub	sp, #48	; 0x30
 8003388:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
 800338a:	4b23      	ldr	r3, [pc, #140]	; (8003418 <MX_TIM1_Init+0x94>)
 800338c:	4a23      	ldr	r2, [pc, #140]	; (800341c <MX_TIM1_Init+0x98>)
 800338e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003390:	4b21      	ldr	r3, [pc, #132]	; (8003418 <MX_TIM1_Init+0x94>)
 8003392:	2200      	movs	r2, #0
 8003394:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003396:	4b20      	ldr	r3, [pc, #128]	; (8003418 <MX_TIM1_Init+0x94>)
 8003398:	2200      	movs	r2, #0
 800339a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 800339c:	4b1e      	ldr	r3, [pc, #120]	; (8003418 <MX_TIM1_Init+0x94>)
 800339e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80033a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033a4:	4b1c      	ldr	r3, [pc, #112]	; (8003418 <MX_TIM1_Init+0x94>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80033aa:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <MX_TIM1_Init+0x94>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80033b0:	2301      	movs	r3, #1
 80033b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80033b4:	2300      	movs	r3, #0
 80033b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80033b8:	2301      	movs	r3, #1
 80033ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80033bc:	2300      	movs	r3, #0
 80033be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80033c4:	2300      	movs	r3, #0
 80033c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80033c8:	2301      	movs	r3, #1
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80033cc:	2300      	movs	r3, #0
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80033d4:	f107 030c 	add.w	r3, r7, #12
 80033d8:	4619      	mov	r1, r3
 80033da:	480f      	ldr	r0, [pc, #60]	; (8003418 <MX_TIM1_Init+0x94>)
 80033dc:	f7fe fa0e 	bl	80017fc <HAL_TIM_Encoder_Init>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <MX_TIM1_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80033e6:	2151      	movs	r1, #81	; 0x51
 80033e8:	480d      	ldr	r0, [pc, #52]	; (8003420 <MX_TIM1_Init+0x9c>)
 80033ea:	f7ff ff41 	bl	8003270 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033ee:	2300      	movs	r3, #0
 80033f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033f6:	1d3b      	adds	r3, r7, #4
 80033f8:	4619      	mov	r1, r3
 80033fa:	4807      	ldr	r0, [pc, #28]	; (8003418 <MX_TIM1_Init+0x94>)
 80033fc:	f7fe ffa4 	bl	8002348 <HAL_TIMEx_MasterConfigSynchronization>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <MX_TIM1_Init+0x8a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003406:	2158      	movs	r1, #88	; 0x58
 8003408:	4805      	ldr	r0, [pc, #20]	; (8003420 <MX_TIM1_Init+0x9c>)
 800340a:	f7ff ff31 	bl	8003270 <_Error_Handler>
  }

}
 800340e:	bf00      	nop
 8003410:	3730      	adds	r7, #48	; 0x30
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	200001dc 	.word	0x200001dc
 800341c:	40010000 	.word	0x40010000
 8003420:	08003d0c 	.word	0x08003d0c

08003424 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	; 0x28
 8003428:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 800342a:	4b24      	ldr	r3, [pc, #144]	; (80034bc <MX_TIM2_Init+0x98>)
 800342c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003430:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003432:	4b22      	ldr	r3, [pc, #136]	; (80034bc <MX_TIM2_Init+0x98>)
 8003434:	2200      	movs	r2, #0
 8003436:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003438:	4b20      	ldr	r3, [pc, #128]	; (80034bc <MX_TIM2_Init+0x98>)
 800343a:	2200      	movs	r2, #0
 800343c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8399;
 800343e:	4b1f      	ldr	r3, [pc, #124]	; (80034bc <MX_TIM2_Init+0x98>)
 8003440:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003444:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003446:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <MX_TIM2_Init+0x98>)
 8003448:	2200      	movs	r2, #0
 800344a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800344c:	481b      	ldr	r0, [pc, #108]	; (80034bc <MX_TIM2_Init+0x98>)
 800344e:	f7fe f91e 	bl	800168e <HAL_TIM_PWM_Init>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <MX_TIM2_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003458:	2169      	movs	r1, #105	; 0x69
 800345a:	4819      	ldr	r0, [pc, #100]	; (80034c0 <MX_TIM2_Init+0x9c>)
 800345c:	f7ff ff08 	bl	8003270 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003460:	2300      	movs	r3, #0
 8003462:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003464:	2300      	movs	r3, #0
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003468:	f107 0320 	add.w	r3, r7, #32
 800346c:	4619      	mov	r1, r3
 800346e:	4813      	ldr	r0, [pc, #76]	; (80034bc <MX_TIM2_Init+0x98>)
 8003470:	f7fe ff6a 	bl	8002348 <HAL_TIMEx_MasterConfigSynchronization>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <MX_TIM2_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800347a:	2170      	movs	r1, #112	; 0x70
 800347c:	4810      	ldr	r0, [pc, #64]	; (80034c0 <MX_TIM2_Init+0x9c>)
 800347e:	f7ff fef7 	bl	8003270 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003482:	2360      	movs	r3, #96	; 0x60
 8003484:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003492:	1d3b      	adds	r3, r7, #4
 8003494:	220c      	movs	r2, #12
 8003496:	4619      	mov	r1, r3
 8003498:	4808      	ldr	r0, [pc, #32]	; (80034bc <MX_TIM2_Init+0x98>)
 800349a:	f7fe fbcb 	bl	8001c34 <HAL_TIM_PWM_ConfigChannel>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <MX_TIM2_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 80034a4:	2179      	movs	r1, #121	; 0x79
 80034a6:	4806      	ldr	r0, [pc, #24]	; (80034c0 <MX_TIM2_Init+0x9c>)
 80034a8:	f7ff fee2 	bl	8003270 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 80034ac:	4803      	ldr	r0, [pc, #12]	; (80034bc <MX_TIM2_Init+0x98>)
 80034ae:	f000 faf7 	bl	8003aa0 <HAL_TIM_MspPostInit>

}
 80034b2:	bf00      	nop
 80034b4:	3728      	adds	r7, #40	; 0x28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000218 	.word	0x20000218
 80034c0:	08003d0c 	.word	0x08003d0c

080034c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08c      	sub	sp, #48	; 0x30
 80034c8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 80034ca:	4b21      	ldr	r3, [pc, #132]	; (8003550 <MX_TIM3_Init+0x8c>)
 80034cc:	4a21      	ldr	r2, [pc, #132]	; (8003554 <MX_TIM3_Init+0x90>)
 80034ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80034d0:	4b1f      	ldr	r3, [pc, #124]	; (8003550 <MX_TIM3_Init+0x8c>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034d6:	4b1e      	ldr	r3, [pc, #120]	; (8003550 <MX_TIM3_Init+0x8c>)
 80034d8:	2200      	movs	r2, #0
 80034da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1023;
 80034dc:	4b1c      	ldr	r3, [pc, #112]	; (8003550 <MX_TIM3_Init+0x8c>)
 80034de:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80034e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034e4:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <MX_TIM3_Init+0x8c>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	611a      	str	r2, [r3, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80034ea:	2301      	movs	r3, #1
 80034ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80034f2:	2301      	movs	r3, #1
 80034f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80034fe:	2300      	movs	r3, #0
 8003500:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003502:	2301      	movs	r3, #1
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003506:	2300      	movs	r3, #0
 8003508:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800350e:	f107 030c 	add.w	r3, r7, #12
 8003512:	4619      	mov	r1, r3
 8003514:	480e      	ldr	r0, [pc, #56]	; (8003550 <MX_TIM3_Init+0x8c>)
 8003516:	f7fe f971 	bl	80017fc <HAL_TIM_Encoder_Init>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <MX_TIM3_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003520:	2195      	movs	r1, #149	; 0x95
 8003522:	480d      	ldr	r0, [pc, #52]	; (8003558 <MX_TIM3_Init+0x94>)
 8003524:	f7ff fea4 	bl	8003270 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003528:	2300      	movs	r3, #0
 800352a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800352c:	2300      	movs	r3, #0
 800352e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003530:	1d3b      	adds	r3, r7, #4
 8003532:	4619      	mov	r1, r3
 8003534:	4806      	ldr	r0, [pc, #24]	; (8003550 <MX_TIM3_Init+0x8c>)
 8003536:	f7fe ff07 	bl	8002348 <HAL_TIMEx_MasterConfigSynchronization>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <MX_TIM3_Init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003540:	219c      	movs	r1, #156	; 0x9c
 8003542:	4805      	ldr	r0, [pc, #20]	; (8003558 <MX_TIM3_Init+0x94>)
 8003544:	f7ff fe94 	bl	8003270 <_Error_Handler>
  }

}
 8003548:	bf00      	nop
 800354a:	3730      	adds	r7, #48	; 0x30
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	200001a0 	.word	0x200001a0
 8003554:	40000400 	.word	0x40000400
 8003558:	08003d0c 	.word	0x08003d0c

0800355c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08c      	sub	sp, #48	; 0x30
 8003560:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 8003562:	4b21      	ldr	r3, [pc, #132]	; (80035e8 <MX_TIM4_Init+0x8c>)
 8003564:	4a21      	ldr	r2, [pc, #132]	; (80035ec <MX_TIM4_Init+0x90>)
 8003566:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003568:	4b1f      	ldr	r3, [pc, #124]	; (80035e8 <MX_TIM4_Init+0x8c>)
 800356a:	2200      	movs	r2, #0
 800356c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800356e:	4b1e      	ldr	r3, [pc, #120]	; (80035e8 <MX_TIM4_Init+0x8c>)
 8003570:	2200      	movs	r2, #0
 8003572:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1023;
 8003574:	4b1c      	ldr	r3, [pc, #112]	; (80035e8 <MX_TIM4_Init+0x8c>)
 8003576:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800357a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800357c:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <MX_TIM4_Init+0x8c>)
 800357e:	2200      	movs	r2, #0
 8003580:	611a      	str	r2, [r3, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003582:	2301      	movs	r3, #1
 8003584:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800358a:	2301      	movs	r3, #1
 800358c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800358e:	2300      	movs	r3, #0
 8003590:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003592:	2300      	movs	r3, #0
 8003594:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003596:	2300      	movs	r3, #0
 8003598:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800359a:	2301      	movs	r3, #1
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800359e:	2300      	movs	r3, #0
 80035a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80035a6:	f107 030c 	add.w	r3, r7, #12
 80035aa:	4619      	mov	r1, r3
 80035ac:	480e      	ldr	r0, [pc, #56]	; (80035e8 <MX_TIM4_Init+0x8c>)
 80035ae:	f7fe f925 	bl	80017fc <HAL_TIM_Encoder_Init>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <MX_TIM4_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 80035b8:	21b6      	movs	r1, #182	; 0xb6
 80035ba:	480d      	ldr	r0, [pc, #52]	; (80035f0 <MX_TIM4_Init+0x94>)
 80035bc:	f7ff fe58 	bl	8003270 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035c0:	2300      	movs	r3, #0
 80035c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80035c8:	1d3b      	adds	r3, r7, #4
 80035ca:	4619      	mov	r1, r3
 80035cc:	4806      	ldr	r0, [pc, #24]	; (80035e8 <MX_TIM4_Init+0x8c>)
 80035ce:	f7fe febb 	bl	8002348 <HAL_TIMEx_MasterConfigSynchronization>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <MX_TIM4_Init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 80035d8:	21bd      	movs	r1, #189	; 0xbd
 80035da:	4805      	ldr	r0, [pc, #20]	; (80035f0 <MX_TIM4_Init+0x94>)
 80035dc:	f7ff fe48 	bl	8003270 <_Error_Handler>
  }

}
 80035e0:	bf00      	nop
 80035e2:	3730      	adds	r7, #48	; 0x30
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	200000ec 	.word	0x200000ec
 80035ec:	40000800 	.word	0x40000800
 80035f0:	08003d0c 	.word	0x08003d0c

080035f4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08a      	sub	sp, #40	; 0x28
 80035f8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim5.Instance = TIM5;
 80035fa:	4b23      	ldr	r3, [pc, #140]	; (8003688 <MX_TIM5_Init+0x94>)
 80035fc:	4a23      	ldr	r2, [pc, #140]	; (800368c <MX_TIM5_Init+0x98>)
 80035fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003600:	4b21      	ldr	r3, [pc, #132]	; (8003688 <MX_TIM5_Init+0x94>)
 8003602:	2200      	movs	r2, #0
 8003604:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003606:	4b20      	ldr	r3, [pc, #128]	; (8003688 <MX_TIM5_Init+0x94>)
 8003608:	2200      	movs	r2, #0
 800360a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 8399;
 800360c:	4b1e      	ldr	r3, [pc, #120]	; (8003688 <MX_TIM5_Init+0x94>)
 800360e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003612:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003614:	4b1c      	ldr	r3, [pc, #112]	; (8003688 <MX_TIM5_Init+0x94>)
 8003616:	2200      	movs	r2, #0
 8003618:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800361a:	481b      	ldr	r0, [pc, #108]	; (8003688 <MX_TIM5_Init+0x94>)
 800361c:	f7fe f837 	bl	800168e <HAL_TIM_PWM_Init>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <MX_TIM5_Init+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003626:	21ce      	movs	r1, #206	; 0xce
 8003628:	4819      	ldr	r0, [pc, #100]	; (8003690 <MX_TIM5_Init+0x9c>)
 800362a:	f7ff fe21 	bl	8003270 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800362e:	2300      	movs	r3, #0
 8003630:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003632:	2300      	movs	r3, #0
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003636:	f107 0320 	add.w	r3, r7, #32
 800363a:	4619      	mov	r1, r3
 800363c:	4812      	ldr	r0, [pc, #72]	; (8003688 <MX_TIM5_Init+0x94>)
 800363e:	f7fe fe83 	bl	8002348 <HAL_TIMEx_MasterConfigSynchronization>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <MX_TIM5_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003648:	21d5      	movs	r1, #213	; 0xd5
 800364a:	4811      	ldr	r0, [pc, #68]	; (8003690 <MX_TIM5_Init+0x9c>)
 800364c:	f7ff fe10 	bl	8003270 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003650:	2360      	movs	r3, #96	; 0x60
 8003652:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003660:	1d3b      	adds	r3, r7, #4
 8003662:	2204      	movs	r2, #4
 8003664:	4619      	mov	r1, r3
 8003666:	4808      	ldr	r0, [pc, #32]	; (8003688 <MX_TIM5_Init+0x94>)
 8003668:	f7fe fae4 	bl	8001c34 <HAL_TIM_PWM_ConfigChannel>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <MX_TIM5_Init+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003672:	21de      	movs	r1, #222	; 0xde
 8003674:	4806      	ldr	r0, [pc, #24]	; (8003690 <MX_TIM5_Init+0x9c>)
 8003676:	f7ff fdfb 	bl	8003270 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim5);
 800367a:	4803      	ldr	r0, [pc, #12]	; (8003688 <MX_TIM5_Init+0x94>)
 800367c:	f000 fa10 	bl	8003aa0 <HAL_TIM_MspPostInit>

}
 8003680:	bf00      	nop
 8003682:	3728      	adds	r7, #40	; 0x28
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	20000164 	.word	0x20000164
 800368c:	40000c00 	.word	0x40000c00
 8003690:	08003d0c 	.word	0x08003d0c

08003694 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08c      	sub	sp, #48	; 0x30
 8003698:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim8.Instance = TIM8;
 800369a:	4b23      	ldr	r3, [pc, #140]	; (8003728 <MX_TIM8_Init+0x94>)
 800369c:	4a23      	ldr	r2, [pc, #140]	; (800372c <MX_TIM8_Init+0x98>)
 800369e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80036a0:	4b21      	ldr	r3, [pc, #132]	; (8003728 <MX_TIM8_Init+0x94>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036a6:	4b20      	ldr	r3, [pc, #128]	; (8003728 <MX_TIM8_Init+0x94>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1023;
 80036ac:	4b1e      	ldr	r3, [pc, #120]	; (8003728 <MX_TIM8_Init+0x94>)
 80036ae:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80036b2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036b4:	4b1c      	ldr	r3, [pc, #112]	; (8003728 <MX_TIM8_Init+0x94>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80036ba:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <MX_TIM8_Init+0x94>)
 80036bc:	2200      	movs	r2, #0
 80036be:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80036c0:	2301      	movs	r3, #1
 80036c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80036c4:	2300      	movs	r3, #0
 80036c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80036c8:	2301      	movs	r3, #1
 80036ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80036d0:	2300      	movs	r3, #0
 80036d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80036d4:	2300      	movs	r3, #0
 80036d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80036d8:	2301      	movs	r3, #1
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80036dc:	2300      	movs	r3, #0
 80036de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80036e4:	f107 030c 	add.w	r3, r7, #12
 80036e8:	4619      	mov	r1, r3
 80036ea:	480f      	ldr	r0, [pc, #60]	; (8003728 <MX_TIM8_Init+0x94>)
 80036ec:	f7fe f886 	bl	80017fc <HAL_TIM_Encoder_Init>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <MX_TIM8_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80036f6:	21fb      	movs	r1, #251	; 0xfb
 80036f8:	480d      	ldr	r0, [pc, #52]	; (8003730 <MX_TIM8_Init+0x9c>)
 80036fa:	f7ff fdb9 	bl	8003270 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003702:	2300      	movs	r3, #0
 8003704:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003706:	1d3b      	adds	r3, r7, #4
 8003708:	4619      	mov	r1, r3
 800370a:	4807      	ldr	r0, [pc, #28]	; (8003728 <MX_TIM8_Init+0x94>)
 800370c:	f7fe fe1c 	bl	8002348 <HAL_TIMEx_MasterConfigSynchronization>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d004      	beq.n	8003720 <MX_TIM8_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003716:	f44f 7181 	mov.w	r1, #258	; 0x102
 800371a:	4805      	ldr	r0, [pc, #20]	; (8003730 <MX_TIM8_Init+0x9c>)
 800371c:	f7ff fda8 	bl	8003270 <_Error_Handler>
  }

}
 8003720:	bf00      	nop
 8003722:	3730      	adds	r7, #48	; 0x30
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	200000b0 	.word	0x200000b0
 800372c:	40010400 	.word	0x40010400
 8003730:	08003d0c 	.word	0x08003d0c

08003734 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC;

  htim10.Instance = TIM10;
 800373a:	4b22      	ldr	r3, [pc, #136]	; (80037c4 <MX_TIM10_Init+0x90>)
 800373c:	4a22      	ldr	r2, [pc, #136]	; (80037c8 <MX_TIM10_Init+0x94>)
 800373e:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8003740:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <MX_TIM10_Init+0x90>)
 8003742:	2200      	movs	r2, #0
 8003744:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003746:	4b1f      	ldr	r3, [pc, #124]	; (80037c4 <MX_TIM10_Init+0x90>)
 8003748:	2200      	movs	r2, #0
 800374a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8399;
 800374c:	4b1d      	ldr	r3, [pc, #116]	; (80037c4 <MX_TIM10_Init+0x90>)
 800374e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003752:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003754:	4b1b      	ldr	r3, [pc, #108]	; (80037c4 <MX_TIM10_Init+0x90>)
 8003756:	2200      	movs	r2, #0
 8003758:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800375a:	481a      	ldr	r0, [pc, #104]	; (80037c4 <MX_TIM10_Init+0x90>)
 800375c:	f7fd ff6c 	bl	8001638 <HAL_TIM_Base_Init>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d004      	beq.n	8003770 <MX_TIM10_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003766:	f44f 7189 	mov.w	r1, #274	; 0x112
 800376a:	4818      	ldr	r0, [pc, #96]	; (80037cc <MX_TIM10_Init+0x98>)
 800376c:	f7ff fd80 	bl	8003270 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8003770:	4814      	ldr	r0, [pc, #80]	; (80037c4 <MX_TIM10_Init+0x90>)
 8003772:	f7fd ff8c 	bl	800168e <HAL_TIM_PWM_Init>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d004      	beq.n	8003786 <MX_TIM10_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 800377c:	f240 1117 	movw	r1, #279	; 0x117
 8003780:	4812      	ldr	r0, [pc, #72]	; (80037cc <MX_TIM10_Init+0x98>)
 8003782:	f7ff fd75 	bl	8003270 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003786:	2360      	movs	r3, #96	; 0x60
 8003788:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3999;
 800378a:	f640 739f 	movw	r3, #3999	; 0xf9f
 800378e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003798:	1d3b      	adds	r3, r7, #4
 800379a:	2200      	movs	r2, #0
 800379c:	4619      	mov	r1, r3
 800379e:	4809      	ldr	r0, [pc, #36]	; (80037c4 <MX_TIM10_Init+0x90>)
 80037a0:	f7fe fa48 	bl	8001c34 <HAL_TIM_PWM_ConfigChannel>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d004      	beq.n	80037b4 <MX_TIM10_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 80037aa:	f44f 7190 	mov.w	r1, #288	; 0x120
 80037ae:	4807      	ldr	r0, [pc, #28]	; (80037cc <MX_TIM10_Init+0x98>)
 80037b0:	f7ff fd5e 	bl	8003270 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim10);
 80037b4:	4803      	ldr	r0, [pc, #12]	; (80037c4 <MX_TIM10_Init+0x90>)
 80037b6:	f000 f973 	bl	8003aa0 <HAL_TIM_MspPostInit>

}
 80037ba:	bf00      	nop
 80037bc:	3720      	adds	r7, #32
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000128 	.word	0x20000128
 80037c8:	40014400 	.word	0x40014400
 80037cc:	08003d0c 	.word	0x08003d0c

080037d0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC;

  htim12.Instance = TIM12;
 80037d6:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <MX_TIM12_Init+0x78>)
 80037d8:	4a1c      	ldr	r2, [pc, #112]	; (800384c <MX_TIM12_Init+0x7c>)
 80037da:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80037dc:	4b1a      	ldr	r3, [pc, #104]	; (8003848 <MX_TIM12_Init+0x78>)
 80037de:	2200      	movs	r2, #0
 80037e0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037e2:	4b19      	ldr	r3, [pc, #100]	; (8003848 <MX_TIM12_Init+0x78>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 8399;
 80037e8:	4b17      	ldr	r3, [pc, #92]	; (8003848 <MX_TIM12_Init+0x78>)
 80037ea:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80037ee:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037f0:	4b15      	ldr	r3, [pc, #84]	; (8003848 <MX_TIM12_Init+0x78>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80037f6:	4814      	ldr	r0, [pc, #80]	; (8003848 <MX_TIM12_Init+0x78>)
 80037f8:	f7fd ff49 	bl	800168e <HAL_TIM_PWM_Init>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d004      	beq.n	800380c <MX_TIM12_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003802:	f44f 7199 	mov.w	r1, #306	; 0x132
 8003806:	4812      	ldr	r0, [pc, #72]	; (8003850 <MX_TIM12_Init+0x80>)
 8003808:	f7ff fd32 	bl	8003270 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800380c:	2360      	movs	r3, #96	; 0x60
 800380e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800381c:	1d3b      	adds	r3, r7, #4
 800381e:	2204      	movs	r2, #4
 8003820:	4619      	mov	r1, r3
 8003822:	4809      	ldr	r0, [pc, #36]	; (8003848 <MX_TIM12_Init+0x78>)
 8003824:	f7fe fa06 	bl	8001c34 <HAL_TIM_PWM_ConfigChannel>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d004      	beq.n	8003838 <MX_TIM12_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 800382e:	f240 113b 	movw	r1, #315	; 0x13b
 8003832:	4807      	ldr	r0, [pc, #28]	; (8003850 <MX_TIM12_Init+0x80>)
 8003834:	f7ff fd1c 	bl	8003270 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim12);
 8003838:	4803      	ldr	r0, [pc, #12]	; (8003848 <MX_TIM12_Init+0x78>)
 800383a:	f000 f931 	bl	8003aa0 <HAL_TIM_MspPostInit>

}
 800383e:	bf00      	nop
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000254 	.word	0x20000254
 800384c:	40001800 	.word	0x40001800
 8003850:	08003d0c 	.word	0x08003d0c

08003854 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b08c      	sub	sp, #48	; 0x30
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_encoderHandle->Instance==TIM1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a50      	ldr	r2, [pc, #320]	; (80039a4 <HAL_TIM_Encoder_MspInit+0x150>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d11f      	bne.n	80038a6 <HAL_TIM_Encoder_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	61bb      	str	r3, [r7, #24]
 800386a:	4a4f      	ldr	r2, [pc, #316]	; (80039a8 <HAL_TIM_Encoder_MspInit+0x154>)
 800386c:	4b4e      	ldr	r3, [pc, #312]	; (80039a8 <HAL_TIM_Encoder_MspInit+0x154>)
 800386e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	6453      	str	r3, [r2, #68]	; 0x44
 8003876:	4b4c      	ldr	r3, [pc, #304]	; (80039a8 <HAL_TIM_Encoder_MspInit+0x154>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	69bb      	ldr	r3, [r7, #24]
  
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = MTR4_A_Pin|MTR4_B_Pin;
 8003882:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003888:	2302      	movs	r3, #2
 800388a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388c:	2300      	movs	r3, #0
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003890:	2300      	movs	r3, #0
 8003892:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003894:	2301      	movs	r3, #1
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003898:	f107 031c 	add.w	r3, r7, #28
 800389c:	4619      	mov	r1, r3
 800389e:	4843      	ldr	r0, [pc, #268]	; (80039ac <HAL_TIM_Encoder_MspInit+0x158>)
 80038a0:	f7fc ffe0 	bl	8000864 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80038a4:	e07a      	b.n	800399c <HAL_TIM_Encoder_MspInit+0x148>
  else if(tim_encoderHandle->Instance==TIM3)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a41      	ldr	r2, [pc, #260]	; (80039b0 <HAL_TIM_Encoder_MspInit+0x15c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d11e      	bne.n	80038ee <HAL_TIM_Encoder_MspInit+0x9a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	4a3c      	ldr	r2, [pc, #240]	; (80039a8 <HAL_TIM_Encoder_MspInit+0x154>)
 80038b6:	4b3c      	ldr	r3, [pc, #240]	; (80039a8 <HAL_TIM_Encoder_MspInit+0x154>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f043 0302 	orr.w	r3, r3, #2
 80038be:	6413      	str	r3, [r2, #64]	; 0x40
 80038c0:	4b39      	ldr	r3, [pc, #228]	; (80039a8 <HAL_TIM_Encoder_MspInit+0x154>)
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MTR2_A_Pin|MTR2_B_Pin;
 80038cc:	23c0      	movs	r3, #192	; 0xc0
 80038ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d0:	2302      	movs	r3, #2
 80038d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d8:	2300      	movs	r3, #0
 80038da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038dc:	2302      	movs	r3, #2
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e0:	f107 031c 	add.w	r3, r7, #28
 80038e4:	4619      	mov	r1, r3
 80038e6:	4831      	ldr	r0, [pc, #196]	; (80039ac <HAL_TIM_Encoder_MspInit+0x158>)
 80038e8:	f7fc ffbc 	bl	8000864 <HAL_GPIO_Init>
}
 80038ec:	e056      	b.n	800399c <HAL_TIM_Encoder_MspInit+0x148>
  else if(tim_encoderHandle->Instance==TIM4)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a30      	ldr	r2, [pc, #192]	; (80039b4 <HAL_TIM_Encoder_MspInit+0x160>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d11e      	bne.n	8003936 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80038f8:	2300      	movs	r3, #0
 80038fa:	613b      	str	r3, [r7, #16]
 80038fc:	4a2a      	ldr	r2, [pc, #168]	; (80039a8 <HAL_TIM_Encoder_MspInit+0x154>)
 80038fe:	4b2a      	ldr	r3, [pc, #168]	; (80039a8 <HAL_TIM_Encoder_MspInit+0x154>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f043 0304 	orr.w	r3, r3, #4
 8003906:	6413      	str	r3, [r2, #64]	; 0x40
 8003908:	4b27      	ldr	r3, [pc, #156]	; (80039a8 <HAL_TIM_Encoder_MspInit+0x154>)
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MTR1_B_Pin|MTR1_A_Pin;
 8003914:	23c0      	movs	r3, #192	; 0xc0
 8003916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003918:	2302      	movs	r3, #2
 800391a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391c:	2300      	movs	r3, #0
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003920:	2300      	movs	r3, #0
 8003922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003924:	2302      	movs	r3, #2
 8003926:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003928:	f107 031c 	add.w	r3, r7, #28
 800392c:	4619      	mov	r1, r3
 800392e:	4822      	ldr	r0, [pc, #136]	; (80039b8 <HAL_TIM_Encoder_MspInit+0x164>)
 8003930:	f7fc ff98 	bl	8000864 <HAL_GPIO_Init>
}
 8003934:	e032      	b.n	800399c <HAL_TIM_Encoder_MspInit+0x148>
  else if(tim_encoderHandle->Instance==TIM8)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a20      	ldr	r2, [pc, #128]	; (80039bc <HAL_TIM_Encoder_MspInit+0x168>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d12d      	bne.n	800399c <HAL_TIM_Encoder_MspInit+0x148>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <HAL_TIM_Encoder_MspInit+0x154>)
 8003946:	4b18      	ldr	r3, [pc, #96]	; (80039a8 <HAL_TIM_Encoder_MspInit+0x154>)
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	f043 0302 	orr.w	r3, r3, #2
 800394e:	6453      	str	r3, [r2, #68]	; 0x44
 8003950:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <HAL_TIM_Encoder_MspInit+0x154>)
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MTR3_A_Pin|MTR3_B_Pin;
 800395c:	23c0      	movs	r3, #192	; 0xc0
 800395e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003960:	2302      	movs	r3, #2
 8003962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003964:	2300      	movs	r3, #0
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003968:	2300      	movs	r3, #0
 800396a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800396c:	2303      	movs	r3, #3
 800396e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003970:	f107 031c 	add.w	r3, r7, #28
 8003974:	4619      	mov	r1, r3
 8003976:	4812      	ldr	r0, [pc, #72]	; (80039c0 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003978:	f7fc ff74 	bl	8000864 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800397c:	2200      	movs	r2, #0
 800397e:	2100      	movs	r1, #0
 8003980:	202c      	movs	r0, #44	; 0x2c
 8003982:	f7fc ff16 	bl	80007b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003986:	202c      	movs	r0, #44	; 0x2c
 8003988:	f7fc ff2f 	bl	80007ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800398c:	2200      	movs	r2, #0
 800398e:	2100      	movs	r1, #0
 8003990:	202d      	movs	r0, #45	; 0x2d
 8003992:	f7fc ff0e 	bl	80007b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003996:	202d      	movs	r0, #45	; 0x2d
 8003998:	f7fc ff27 	bl	80007ea <HAL_NVIC_EnableIRQ>
}
 800399c:	bf00      	nop
 800399e:	3730      	adds	r7, #48	; 0x30
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40010000 	.word	0x40010000
 80039a8:	40023800 	.word	0x40023800
 80039ac:	40020000 	.word	0x40020000
 80039b0:	40000400 	.word	0x40000400
 80039b4:	40000800 	.word	0x40000800
 80039b8:	40020400 	.word	0x40020400
 80039bc:	40010400 	.word	0x40010400
 80039c0:	40020800 	.word	0x40020800

080039c4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d4:	d10e      	bne.n	80039f4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	4a1d      	ldr	r2, [pc, #116]	; (8003a50 <HAL_TIM_PWM_MspInit+0x8c>)
 80039dc:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <HAL_TIM_PWM_MspInit+0x8c>)
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	6413      	str	r3, [r2, #64]	; 0x40
 80039e6:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <HAL_TIM_PWM_MspInit+0x8c>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80039f2:	e026      	b.n	8003a42 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM5)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a16      	ldr	r2, [pc, #88]	; (8003a54 <HAL_TIM_PWM_MspInit+0x90>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d10e      	bne.n	8003a1c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	4a13      	ldr	r2, [pc, #76]	; (8003a50 <HAL_TIM_PWM_MspInit+0x8c>)
 8003a04:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <HAL_TIM_PWM_MspInit+0x8c>)
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	f043 0308 	orr.w	r3, r3, #8
 8003a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0e:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <HAL_TIM_PWM_MspInit+0x8c>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	613b      	str	r3, [r7, #16]
 8003a18:	693b      	ldr	r3, [r7, #16]
}
 8003a1a:	e012      	b.n	8003a42 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM12)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a0d      	ldr	r2, [pc, #52]	; (8003a58 <HAL_TIM_PWM_MspInit+0x94>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d10d      	bne.n	8003a42 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	4a09      	ldr	r2, [pc, #36]	; (8003a50 <HAL_TIM_PWM_MspInit+0x8c>)
 8003a2c:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <HAL_TIM_PWM_MspInit+0x8c>)
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a34:	6413      	str	r3, [r2, #64]	; 0x40
 8003a36:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <HAL_TIM_PWM_MspInit+0x8c>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
}
 8003a42:	bf00      	nop
 8003a44:	371c      	adds	r7, #28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40023800 	.word	0x40023800
 8003a54:	40000c00 	.word	0x40000c00
 8003a58:	40001800 	.word	0x40001800

08003a5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a0b      	ldr	r2, [pc, #44]	; (8003a98 <HAL_TIM_Base_MspInit+0x3c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d10d      	bne.n	8003a8a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	4a0a      	ldr	r2, [pc, #40]	; (8003a9c <HAL_TIM_Base_MspInit+0x40>)
 8003a74:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <HAL_TIM_Base_MspInit+0x40>)
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a7e:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <HAL_TIM_Base_MspInit+0x40>)
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8003a8a:	bf00      	nop
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40014400 	.word	0x40014400
 8003a9c:	40023800 	.word	0x40023800

08003aa0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM2)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab0:	d110      	bne.n	8003ad4 <HAL_TIM_MspPostInit+0x34>

  /* USER CODE END TIM2_MspPostInit 0 */
    /**TIM2 GPIO Configuration    
    PB2     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = MTR3_PWM_Pin;
 8003ab2:	2304      	movs	r3, #4
 8003ab4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MTR3_PWM_GPIO_Port, &GPIO_InitStruct);
 8003ac6:	f107 030c 	add.w	r3, r7, #12
 8003aca:	4619      	mov	r1, r3
 8003acc:	4825      	ldr	r0, [pc, #148]	; (8003b64 <HAL_TIM_MspPostInit+0xc4>)
 8003ace:	f7fc fec9 	bl	8000864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003ad2:	e042      	b.n	8003b5a <HAL_TIM_MspPostInit+0xba>
  else if(timHandle->Instance==TIM5)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a23      	ldr	r2, [pc, #140]	; (8003b68 <HAL_TIM_MspPostInit+0xc8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d110      	bne.n	8003b00 <HAL_TIM_MspPostInit+0x60>
    GPIO_InitStruct.Pin = MTR2_PWM_Pin;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003aee:	2302      	movs	r3, #2
 8003af0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MTR2_PWM_GPIO_Port, &GPIO_InitStruct);
 8003af2:	f107 030c 	add.w	r3, r7, #12
 8003af6:	4619      	mov	r1, r3
 8003af8:	481c      	ldr	r0, [pc, #112]	; (8003b6c <HAL_TIM_MspPostInit+0xcc>)
 8003afa:	f7fc feb3 	bl	8000864 <HAL_GPIO_Init>
}
 8003afe:	e02c      	b.n	8003b5a <HAL_TIM_MspPostInit+0xba>
  else if(timHandle->Instance==TIM10)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1a      	ldr	r2, [pc, #104]	; (8003b70 <HAL_TIM_MspPostInit+0xd0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d111      	bne.n	8003b2e <HAL_TIM_MspPostInit+0x8e>
    GPIO_InitStruct.Pin = MTR1_PWM_Pin;
 8003b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b10:	2302      	movs	r3, #2
 8003b12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MTR1_PWM_GPIO_Port, &GPIO_InitStruct);
 8003b20:	f107 030c 	add.w	r3, r7, #12
 8003b24:	4619      	mov	r1, r3
 8003b26:	480f      	ldr	r0, [pc, #60]	; (8003b64 <HAL_TIM_MspPostInit+0xc4>)
 8003b28:	f7fc fe9c 	bl	8000864 <HAL_GPIO_Init>
}
 8003b2c:	e015      	b.n	8003b5a <HAL_TIM_MspPostInit+0xba>
  else if(timHandle->Instance==TIM12)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a10      	ldr	r2, [pc, #64]	; (8003b74 <HAL_TIM_MspPostInit+0xd4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d110      	bne.n	8003b5a <HAL_TIM_MspPostInit+0xba>
    GPIO_InitStruct.Pin = MTR4_PWM_Pin;
 8003b38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3e:	2302      	movs	r3, #2
 8003b40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003b4a:	2309      	movs	r3, #9
 8003b4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MTR4_PWM_GPIO_Port, &GPIO_InitStruct);
 8003b4e:	f107 030c 	add.w	r3, r7, #12
 8003b52:	4619      	mov	r1, r3
 8003b54:	4803      	ldr	r0, [pc, #12]	; (8003b64 <HAL_TIM_MspPostInit+0xc4>)
 8003b56:	f7fc fe85 	bl	8000864 <HAL_GPIO_Init>
}
 8003b5a:	bf00      	nop
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40020400 	.word	0x40020400
 8003b68:	40000c00 	.word	0x40000c00
 8003b6c:	40020000 	.word	0x40020000
 8003b70:	40014400 	.word	0x40014400
 8003b74:	40001800 	.word	0x40001800

08003b78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003b7c:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <MX_USART2_UART_Init+0x50>)
 8003b7e:	4a13      	ldr	r2, [pc, #76]	; (8003bcc <MX_USART2_UART_Init+0x54>)
 8003b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b82:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <MX_USART2_UART_Init+0x50>)
 8003b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b8a:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <MX_USART2_UART_Init+0x50>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b90:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <MX_USART2_UART_Init+0x50>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b96:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <MX_USART2_UART_Init+0x50>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <MX_USART2_UART_Init+0x50>)
 8003b9e:	220c      	movs	r2, #12
 8003ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ba2:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <MX_USART2_UART_Init+0x50>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ba8:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <MX_USART2_UART_Init+0x50>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003bae:	4806      	ldr	r0, [pc, #24]	; (8003bc8 <MX_USART2_UART_Init+0x50>)
 8003bb0:	f7fe fc23 	bl	80023fa <HAL_UART_Init>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <MX_USART2_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003bba:	2142      	movs	r1, #66	; 0x42
 8003bbc:	4804      	ldr	r0, [pc, #16]	; (8003bd0 <MX_USART2_UART_Init+0x58>)
 8003bbe:	f7ff fb57 	bl	8003270 <_Error_Handler>
  }

}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000290 	.word	0x20000290
 8003bcc:	40004400 	.word	0x40004400
 8003bd0:	08003d1c 	.word	0x08003d1c

08003bd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b088      	sub	sp, #32
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a12      	ldr	r2, [pc, #72]	; (8003c2c <HAL_UART_MspInit+0x58>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d11d      	bne.n	8003c22 <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	4a11      	ldr	r2, [pc, #68]	; (8003c30 <HAL_UART_MspInit+0x5c>)
 8003bec:	4b10      	ldr	r3, [pc, #64]	; (8003c30 <HAL_UART_MspInit+0x5c>)
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf6:	4b0e      	ldr	r3, [pc, #56]	; (8003c30 <HAL_UART_MspInit+0x5c>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003c02:	230c      	movs	r3, #12
 8003c04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c06:	2302      	movs	r3, #2
 8003c08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c12:	2307      	movs	r3, #7
 8003c14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c16:	f107 030c 	add.w	r3, r7, #12
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4805      	ldr	r0, [pc, #20]	; (8003c34 <HAL_UART_MspInit+0x60>)
 8003c1e:	f7fc fe21 	bl	8000864 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003c22:	bf00      	nop
 8003c24:	3720      	adds	r7, #32
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40004400 	.word	0x40004400
 8003c30:	40023800 	.word	0x40023800
 8003c34:	40020000 	.word	0x40020000

08003c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c3e:	e003      	b.n	8003c48 <LoopCopyDataInit>

08003c40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c46:	3104      	adds	r1, #4

08003c48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c48:	480b      	ldr	r0, [pc, #44]	; (8003c78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003c4a:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c50:	d3f6      	bcc.n	8003c40 <CopyDataInit>
  ldr  r2, =_sbss
 8003c52:	4a0b      	ldr	r2, [pc, #44]	; (8003c80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c54:	e002      	b.n	8003c5c <LoopFillZerobss>

08003c56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c58:	f842 3b04 	str.w	r3, [r2], #4

08003c5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c5c:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c60:	d3f9      	bcc.n	8003c56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c62:	f7ff fb59 	bl	8003318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c66:	f000 f811 	bl	8003c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c6a:	f7ff fa69 	bl	8003140 <main>
  bx  lr    
 8003c6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003c74:	08003d54 	.word	0x08003d54
  ldr  r0, =_sdata
 8003c78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c7c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003c80:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003c84:	200002d0 	.word	0x200002d0

08003c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c88:	e7fe      	b.n	8003c88 <ADC_IRQHandler>
	...

08003c8c <__libc_init_array>:
 8003c8c:	b570      	push	{r4, r5, r6, lr}
 8003c8e:	4e0d      	ldr	r6, [pc, #52]	; (8003cc4 <__libc_init_array+0x38>)
 8003c90:	4c0d      	ldr	r4, [pc, #52]	; (8003cc8 <__libc_init_array+0x3c>)
 8003c92:	1ba4      	subs	r4, r4, r6
 8003c94:	10a4      	asrs	r4, r4, #2
 8003c96:	2500      	movs	r5, #0
 8003c98:	42a5      	cmp	r5, r4
 8003c9a:	d109      	bne.n	8003cb0 <__libc_init_array+0x24>
 8003c9c:	4e0b      	ldr	r6, [pc, #44]	; (8003ccc <__libc_init_array+0x40>)
 8003c9e:	4c0c      	ldr	r4, [pc, #48]	; (8003cd0 <__libc_init_array+0x44>)
 8003ca0:	f000 f820 	bl	8003ce4 <_init>
 8003ca4:	1ba4      	subs	r4, r4, r6
 8003ca6:	10a4      	asrs	r4, r4, #2
 8003ca8:	2500      	movs	r5, #0
 8003caa:	42a5      	cmp	r5, r4
 8003cac:	d105      	bne.n	8003cba <__libc_init_array+0x2e>
 8003cae:	bd70      	pop	{r4, r5, r6, pc}
 8003cb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cb4:	4798      	blx	r3
 8003cb6:	3501      	adds	r5, #1
 8003cb8:	e7ee      	b.n	8003c98 <__libc_init_array+0xc>
 8003cba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cbe:	4798      	blx	r3
 8003cc0:	3501      	adds	r5, #1
 8003cc2:	e7f2      	b.n	8003caa <__libc_init_array+0x1e>
 8003cc4:	08003d4c 	.word	0x08003d4c
 8003cc8:	08003d4c 	.word	0x08003d4c
 8003ccc:	08003d4c 	.word	0x08003d4c
 8003cd0:	08003d50 	.word	0x08003d50

08003cd4 <memset>:
 8003cd4:	4402      	add	r2, r0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d100      	bne.n	8003cde <memset+0xa>
 8003cdc:	4770      	bx	lr
 8003cde:	f803 1b01 	strb.w	r1, [r3], #1
 8003ce2:	e7f9      	b.n	8003cd8 <memset+0x4>

08003ce4 <_init>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	bf00      	nop
 8003ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cea:	bc08      	pop	{r3}
 8003cec:	469e      	mov	lr, r3
 8003cee:	4770      	bx	lr

08003cf0 <_fini>:
 8003cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf2:	bf00      	nop
 8003cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf6:	bc08      	pop	{r3}
 8003cf8:	469e      	mov	lr, r3
 8003cfa:	4770      	bx	lr
