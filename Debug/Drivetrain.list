
Drivetrain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a90  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003c54  08003c54  00013c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003c9c  08003c9c  00013c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003ca4  08003ca4  00013ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003ca8  08003ca8  00013ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08003cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002c4  2000000c  08003cb8  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002d0  08003cb8  000202d0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001524d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002708  00000000  00000000  00035289  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c18  00000000  00000000  00037998  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b00  00000000  00000000  000385b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000060ba  00000000  00000000  000390b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003efd  00000000  00000000  0003f16a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00043067  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003150  00000000  00000000  000430e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003c3c 	.word	0x08003c3c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003c3c 	.word	0x08003c3c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b97a 	b.w	8000520 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	468c      	mov	ip, r1
 800024a:	460d      	mov	r5, r1
 800024c:	4604      	mov	r4, r0
 800024e:	9e08      	ldr	r6, [sp, #32]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d151      	bne.n	80002f8 <__udivmoddi4+0xb4>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d96d      	bls.n	8000336 <__udivmoddi4+0xf2>
 800025a:	fab2 fe82 	clz	lr, r2
 800025e:	f1be 0f00 	cmp.w	lr, #0
 8000262:	d00b      	beq.n	800027c <__udivmoddi4+0x38>
 8000264:	f1ce 0c20 	rsb	ip, lr, #32
 8000268:	fa01 f50e 	lsl.w	r5, r1, lr
 800026c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000270:	fa02 f70e 	lsl.w	r7, r2, lr
 8000274:	ea4c 0c05 	orr.w	ip, ip, r5
 8000278:	fa00 f40e 	lsl.w	r4, r0, lr
 800027c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000280:	0c25      	lsrs	r5, r4, #16
 8000282:	fbbc f8fa 	udiv	r8, ip, sl
 8000286:	fa1f f987 	uxth.w	r9, r7
 800028a:	fb0a cc18 	mls	ip, sl, r8, ip
 800028e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000292:	fb08 f309 	mul.w	r3, r8, r9
 8000296:	42ab      	cmp	r3, r5
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x6c>
 800029a:	19ed      	adds	r5, r5, r7
 800029c:	f108 32ff 	add.w	r2, r8, #4294967295
 80002a0:	f080 8123 	bcs.w	80004ea <__udivmoddi4+0x2a6>
 80002a4:	42ab      	cmp	r3, r5
 80002a6:	f240 8120 	bls.w	80004ea <__udivmoddi4+0x2a6>
 80002aa:	f1a8 0802 	sub.w	r8, r8, #2
 80002ae:	443d      	add	r5, r7
 80002b0:	1aed      	subs	r5, r5, r3
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002b8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002c0:	fb00 f909 	mul.w	r9, r0, r9
 80002c4:	45a1      	cmp	r9, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x98>
 80002c8:	19e4      	adds	r4, r4, r7
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 810a 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80002d2:	45a1      	cmp	r9, r4
 80002d4:	f240 8107 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	eba4 0409 	sub.w	r4, r4, r9
 80002e0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002e4:	2100      	movs	r1, #0
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d061      	beq.n	80003ae <__udivmoddi4+0x16a>
 80002ea:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ee:	2300      	movs	r3, #0
 80002f0:	6034      	str	r4, [r6, #0]
 80002f2:	6073      	str	r3, [r6, #4]
 80002f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0xc8>
 80002fc:	2e00      	cmp	r6, #0
 80002fe:	d054      	beq.n	80003aa <__udivmoddi4+0x166>
 8000300:	2100      	movs	r1, #0
 8000302:	e886 0021 	stmia.w	r6, {r0, r5}
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	f040 808e 	bne.w	8000432 <__udivmoddi4+0x1ee>
 8000316:	42ab      	cmp	r3, r5
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xdc>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2d0>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb65 0503 	sbc.w	r5, r5, r3
 8000326:	2001      	movs	r0, #1
 8000328:	46ac      	mov	ip, r5
 800032a:	2e00      	cmp	r6, #0
 800032c:	d03f      	beq.n	80003ae <__udivmoddi4+0x16a>
 800032e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	b912      	cbnz	r2, 800033e <__udivmoddi4+0xfa>
 8000338:	2701      	movs	r7, #1
 800033a:	fbb7 f7f2 	udiv	r7, r7, r2
 800033e:	fab7 fe87 	clz	lr, r7
 8000342:	f1be 0f00 	cmp.w	lr, #0
 8000346:	d134      	bne.n	80003b2 <__udivmoddi4+0x16e>
 8000348:	1beb      	subs	r3, r5, r7
 800034a:	0c3a      	lsrs	r2, r7, #16
 800034c:	fa1f fc87 	uxth.w	ip, r7
 8000350:	2101      	movs	r1, #1
 8000352:	fbb3 f8f2 	udiv	r8, r3, r2
 8000356:	0c25      	lsrs	r5, r4, #16
 8000358:	fb02 3318 	mls	r3, r2, r8, r3
 800035c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000360:	fb0c f308 	mul.w	r3, ip, r8
 8000364:	42ab      	cmp	r3, r5
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x134>
 8000368:	19ed      	adds	r5, r5, r7
 800036a:	f108 30ff 	add.w	r0, r8, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x132>
 8000370:	42ab      	cmp	r3, r5
 8000372:	f200 80d1 	bhi.w	8000518 <__udivmoddi4+0x2d4>
 8000376:	4680      	mov	r8, r0
 8000378:	1aed      	subs	r5, r5, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000380:	fb02 5510 	mls	r5, r2, r0, r5
 8000384:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000388:	fb0c fc00 	mul.w	ip, ip, r0
 800038c:	45a4      	cmp	ip, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x15c>
 8000390:	19e4      	adds	r4, r4, r7
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x15a>
 8000398:	45a4      	cmp	ip, r4
 800039a:	f200 80b8 	bhi.w	800050e <__udivmoddi4+0x2ca>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a8:	e79d      	b.n	80002e6 <__udivmoddi4+0xa2>
 80003aa:	4631      	mov	r1, r6
 80003ac:	4630      	mov	r0, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	f1ce 0420 	rsb	r4, lr, #32
 80003b6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003ba:	fa07 f70e 	lsl.w	r7, r7, lr
 80003be:	fa20 f804 	lsr.w	r8, r0, r4
 80003c2:	0c3a      	lsrs	r2, r7, #16
 80003c4:	fa25 f404 	lsr.w	r4, r5, r4
 80003c8:	ea48 0803 	orr.w	r8, r8, r3
 80003cc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003d0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003d4:	fb02 4411 	mls	r4, r2, r1, r4
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003e0:	fb01 f30c 	mul.w	r3, r1, ip
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x1bc>
 80003ec:	19ed      	adds	r5, r5, r7
 80003ee:	f101 30ff 	add.w	r0, r1, #4294967295
 80003f2:	f080 808a 	bcs.w	800050a <__udivmoddi4+0x2c6>
 80003f6:	42ab      	cmp	r3, r5
 80003f8:	f240 8087 	bls.w	800050a <__udivmoddi4+0x2c6>
 80003fc:	3902      	subs	r1, #2
 80003fe:	443d      	add	r5, r7
 8000400:	1aeb      	subs	r3, r5, r3
 8000402:	fa1f f588 	uxth.w	r5, r8
 8000406:	fbb3 f0f2 	udiv	r0, r3, r2
 800040a:	fb02 3310 	mls	r3, r2, r0, r3
 800040e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000412:	fb00 f30c 	mul.w	r3, r0, ip
 8000416:	42ab      	cmp	r3, r5
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x1e6>
 800041a:	19ed      	adds	r5, r5, r7
 800041c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000420:	d26f      	bcs.n	8000502 <__udivmoddi4+0x2be>
 8000422:	42ab      	cmp	r3, r5
 8000424:	d96d      	bls.n	8000502 <__udivmoddi4+0x2be>
 8000426:	3802      	subs	r0, #2
 8000428:	443d      	add	r5, r7
 800042a:	1aeb      	subs	r3, r5, r3
 800042c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000430:	e78f      	b.n	8000352 <__udivmoddi4+0x10e>
 8000432:	f1c1 0720 	rsb	r7, r1, #32
 8000436:	fa22 f807 	lsr.w	r8, r2, r7
 800043a:	408b      	lsls	r3, r1
 800043c:	fa05 f401 	lsl.w	r4, r5, r1
 8000440:	ea48 0303 	orr.w	r3, r8, r3
 8000444:	fa20 fe07 	lsr.w	lr, r0, r7
 8000448:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800044c:	40fd      	lsrs	r5, r7
 800044e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000452:	fbb5 f9fc 	udiv	r9, r5, ip
 8000456:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800045a:	fb0c 5519 	mls	r5, ip, r9, r5
 800045e:	fa1f f883 	uxth.w	r8, r3
 8000462:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000466:	fb09 f408 	mul.w	r4, r9, r8
 800046a:	42ac      	cmp	r4, r5
 800046c:	fa02 f201 	lsl.w	r2, r2, r1
 8000470:	fa00 fa01 	lsl.w	sl, r0, r1
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x244>
 8000476:	18ed      	adds	r5, r5, r3
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d243      	bcs.n	8000506 <__udivmoddi4+0x2c2>
 800047e:	42ac      	cmp	r4, r5
 8000480:	d941      	bls.n	8000506 <__udivmoddi4+0x2c2>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	441d      	add	r5, r3
 8000488:	1b2d      	subs	r5, r5, r4
 800048a:	fa1f fe8e 	uxth.w	lr, lr
 800048e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000492:	fb0c 5510 	mls	r5, ip, r0, r5
 8000496:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45a0      	cmp	r8, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x26e>
 80004a2:	18e4      	adds	r4, r4, r3
 80004a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80004a8:	d229      	bcs.n	80004fe <__udivmoddi4+0x2ba>
 80004aa:	45a0      	cmp	r8, r4
 80004ac:	d927      	bls.n	80004fe <__udivmoddi4+0x2ba>
 80004ae:	3802      	subs	r0, #2
 80004b0:	441c      	add	r4, r3
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba4 0408 	sub.w	r4, r4, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454c      	cmp	r4, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	464d      	mov	r5, r9
 80004c4:	d315      	bcc.n	80004f2 <__udivmoddi4+0x2ae>
 80004c6:	d012      	beq.n	80004ee <__udivmoddi4+0x2aa>
 80004c8:	b156      	cbz	r6, 80004e0 <__udivmoddi4+0x29c>
 80004ca:	ebba 030e 	subs.w	r3, sl, lr
 80004ce:	eb64 0405 	sbc.w	r4, r4, r5
 80004d2:	fa04 f707 	lsl.w	r7, r4, r7
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431f      	orrs	r7, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	6037      	str	r7, [r6, #0]
 80004de:	6074      	str	r4, [r6, #4]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6f8      	b.n	80002dc <__udivmoddi4+0x98>
 80004ea:	4690      	mov	r8, r2
 80004ec:	e6e0      	b.n	80002b0 <__udivmoddi4+0x6c>
 80004ee:	45c2      	cmp	sl, r8
 80004f0:	d2ea      	bcs.n	80004c8 <__udivmoddi4+0x284>
 80004f2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f6:	eb69 0503 	sbc.w	r5, r9, r3
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7e4      	b.n	80004c8 <__udivmoddi4+0x284>
 80004fe:	4628      	mov	r0, r5
 8000500:	e7d7      	b.n	80004b2 <__udivmoddi4+0x26e>
 8000502:	4640      	mov	r0, r8
 8000504:	e791      	b.n	800042a <__udivmoddi4+0x1e6>
 8000506:	4681      	mov	r9, r0
 8000508:	e7be      	b.n	8000488 <__udivmoddi4+0x244>
 800050a:	4601      	mov	r1, r0
 800050c:	e778      	b.n	8000400 <__udivmoddi4+0x1bc>
 800050e:	3802      	subs	r0, #2
 8000510:	443c      	add	r4, r7
 8000512:	e745      	b.n	80003a0 <__udivmoddi4+0x15c>
 8000514:	4608      	mov	r0, r1
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xe6>
 8000518:	f1a8 0802 	sub.w	r8, r8, #2
 800051c:	443d      	add	r5, r7
 800051e:	e72b      	b.n	8000378 <__udivmoddi4+0x134>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000528:	4a0e      	ldr	r2, [pc, #56]	; (8000564 <HAL_Init+0x40>)
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <HAL_Init+0x40>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000532:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000534:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <HAL_Init+0x40>)
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <HAL_Init+0x40>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800053e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000540:	4a08      	ldr	r2, [pc, #32]	; (8000564 <HAL_Init+0x40>)
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <HAL_Init+0x40>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800054a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f925 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f000 f808 	bl	8000568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000558:	f002 fe3c 	bl	80031d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40023c00 	.word	0x40023c00

08000568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_InitTick+0x54>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_InitTick+0x58>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4619      	mov	r1, r3
 800057a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000582:	fbb2 f3f3 	udiv	r3, r2, r3
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f93d 	bl	8000806 <HAL_SYSTICK_Config>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
 8000594:	e00e      	b.n	80005b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b0f      	cmp	r3, #15
 800059a:	d80a      	bhi.n	80005b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800059c:	2200      	movs	r2, #0
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	f04f 30ff 	mov.w	r0, #4294967295
 80005a4:	f000 f905 	bl	80007b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <HAL_InitTick+0x5c>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ae:	2300      	movs	r3, #0
 80005b0:	e000      	b.n	80005b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005b2:	2301      	movs	r3, #1
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000008 	.word	0x20000008
 80005c0:	20000004 	.word	0x20000004
 80005c4:	20000000 	.word	0x20000000

080005c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_IncTick+0x20>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_IncTick+0x24>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4413      	add	r3, r2
 80005d8:	4a04      	ldr	r2, [pc, #16]	; (80005ec <HAL_IncTick+0x24>)
 80005da:	6013      	str	r3, [r2, #0]
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000004 	.word	0x20000004
 80005ec:	200000ac 	.word	0x200000ac

080005f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return uwTick;
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <HAL_GetTick+0x14>)
 80005f6:	681b      	ldr	r3, [r3, #0]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	200000ac 	.word	0x200000ac

08000608 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f003 0307 	and.w	r3, r3, #7
 8000616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <NVIC_SetPriorityGrouping+0x44>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000624:	4013      	ands	r3, r2
 8000626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063a:	4a04      	ldr	r2, [pc, #16]	; (800064c <NVIC_SetPriorityGrouping+0x44>)
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	60d3      	str	r3, [r2, #12]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <NVIC_GetPriorityGrouping+0x18>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	0a1b      	lsrs	r3, r3, #8
 800065a:	f003 0307 	and.w	r3, r3, #7
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000676:	4909      	ldr	r1, [pc, #36]	; (800069c <NVIC_EnableIRQ+0x30>)
 8000678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067c:	095b      	lsrs	r3, r3, #5
 800067e:	79fa      	ldrb	r2, [r7, #7]
 8000680:	f002 021f 	and.w	r2, r2, #31
 8000684:	2001      	movs	r0, #1
 8000686:	fa00 f202 	lsl.w	r2, r0, r2
 800068a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000e100 	.word	0xe000e100

080006a0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	da0b      	bge.n	80006cc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	490d      	ldr	r1, [pc, #52]	; (80006ec <NVIC_SetPriority+0x4c>)
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	3b04      	subs	r3, #4
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	0112      	lsls	r2, r2, #4
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	440b      	add	r3, r1
 80006c8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ca:	e009      	b.n	80006e0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	4908      	ldr	r1, [pc, #32]	; (80006f0 <NVIC_SetPriority+0x50>)
 80006ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	b2d2      	uxtb	r2, r2
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	440b      	add	r3, r1
 80006dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	e000e100 	.word	0xe000e100

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	2201      	movs	r2, #1
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	fa02 f303 	lsl.w	r3, r2, r3
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	401a      	ands	r2, r3
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073a:	2101      	movs	r1, #1
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	1e59      	subs	r1, r3, #1
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	4313      	orrs	r3, r2
         );
}
 800074a:	4618      	mov	r0, r3
 800074c:	3724      	adds	r7, #36	; 0x24
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000768:	d301      	bcc.n	800076e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076a:	2301      	movs	r3, #1
 800076c:	e00f      	b.n	800078e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <SysTick_Config+0x40>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000776:	210f      	movs	r1, #15
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f7ff ff90 	bl	80006a0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <SysTick_Config+0x40>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SysTick_Config+0x40>)
 8000788:	2207      	movs	r2, #7
 800078a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	e000e010 	.word	0xe000e010

0800079c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff2f 	bl	8000608 <NVIC_SetPriorityGrouping>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b086      	sub	sp, #24
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c4:	f7ff ff44 	bl	8000650 <NVIC_GetPriorityGrouping>
 80007c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	f7ff ff90 	bl	80006f4 <NVIC_EncodePriority>
 80007d4:	4602      	mov	r2, r0
 80007d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff5f 	bl	80006a0 <NVIC_SetPriority>
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff37 	bl	800066c <NVIC_EnableIRQ>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ffa2 	bl	8000758 <SysTick_Config>
 8000814:	4603      	mov	r3, r0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b04      	cmp	r3, #4
 800082c:	d106      	bne.n	800083c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800082e:	4a09      	ldr	r2, [pc, #36]	; (8000854 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800083a:	e005      	b.n	8000848 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800083c:	4a05      	ldr	r2, [pc, #20]	; (8000854 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800083e:	4b05      	ldr	r3, [pc, #20]	; (8000854 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f023 0304 	bic.w	r3, r3, #4
 8000846:	6013      	str	r3, [r2, #0]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	e000e010 	.word	0xe000e010

08000858 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800085c:	f002 f93e 	bl	8002adc <HAL_SYSTICK_Callback>
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}

08000864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
 800087e:	e165      	b.n	8000b4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000880:	2201      	movs	r2, #1
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	4013      	ands	r3, r2
 8000892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	429a      	cmp	r2, r3
 800089a:	f040 8154 	bne.w	8000b46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d003      	beq.n	80008ae <HAL_GPIO_Init+0x4a>
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	2b12      	cmp	r3, #18
 80008ac:	d123      	bne.n	80008f6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	08da      	lsrs	r2, r3, #3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3208      	adds	r2, #8
 80008b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	220f      	movs	r2, #15
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43db      	mvns	r3, r3
 80008cc:	69ba      	ldr	r2, [r7, #24]
 80008ce:	4013      	ands	r3, r2
 80008d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	691a      	ldr	r2, [r3, #16]
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	f003 0307 	and.w	r3, r3, #7
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	08da      	lsrs	r2, r3, #3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3208      	adds	r2, #8
 80008f0:	69b9      	ldr	r1, [r7, #24]
 80008f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	2203      	movs	r2, #3
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43db      	mvns	r3, r3
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	4013      	ands	r3, r2
 800090c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	f003 0203 	and.w	r2, r3, #3
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4313      	orrs	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d00b      	beq.n	800094a <HAL_GPIO_Init+0xe6>
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	2b02      	cmp	r3, #2
 8000938:	d007      	beq.n	800094a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800093e:	2b11      	cmp	r3, #17
 8000940:	d003      	beq.n	800094a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	2b12      	cmp	r3, #18
 8000948:	d130      	bne.n	80009ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	2203      	movs	r2, #3
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	4013      	ands	r3, r2
 8000960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	68da      	ldr	r2, [r3, #12]
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	69ba      	ldr	r2, [r7, #24]
 8000970:	4313      	orrs	r3, r2
 8000972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000980:	2201      	movs	r2, #1
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	69ba      	ldr	r2, [r7, #24]
 800098c:	4013      	ands	r3, r2
 800098e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	091b      	lsrs	r3, r3, #4
 8000996:	f003 0201 	and.w	r2, r3, #1
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	2203      	movs	r2, #3
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	4013      	ands	r3, r2
 80009c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	689a      	ldr	r2, [r3, #8]
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	69ba      	ldr	r2, [r7, #24]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	f000 80ae 	beq.w	8000b46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4a5c      	ldr	r2, [pc, #368]	; (8000b60 <HAL_GPIO_Init+0x2fc>)
 80009f0:	4b5b      	ldr	r3, [pc, #364]	; (8000b60 <HAL_GPIO_Init+0x2fc>)
 80009f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b59      	ldr	r3, [pc, #356]	; (8000b60 <HAL_GPIO_Init+0x2fc>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a06:	4a57      	ldr	r2, [pc, #348]	; (8000b64 <HAL_GPIO_Init+0x300>)
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	089b      	lsrs	r3, r3, #2
 8000a0c:	3302      	adds	r3, #2
 8000a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	f003 0303 	and.w	r3, r3, #3
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	220f      	movs	r2, #15
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43db      	mvns	r3, r3
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	4013      	ands	r3, r2
 8000a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a4e      	ldr	r2, [pc, #312]	; (8000b68 <HAL_GPIO_Init+0x304>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d025      	beq.n	8000a7e <HAL_GPIO_Init+0x21a>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a4d      	ldr	r2, [pc, #308]	; (8000b6c <HAL_GPIO_Init+0x308>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d01f      	beq.n	8000a7a <HAL_GPIO_Init+0x216>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a4c      	ldr	r2, [pc, #304]	; (8000b70 <HAL_GPIO_Init+0x30c>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d019      	beq.n	8000a76 <HAL_GPIO_Init+0x212>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a4b      	ldr	r2, [pc, #300]	; (8000b74 <HAL_GPIO_Init+0x310>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d013      	beq.n	8000a72 <HAL_GPIO_Init+0x20e>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a4a      	ldr	r2, [pc, #296]	; (8000b78 <HAL_GPIO_Init+0x314>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d00d      	beq.n	8000a6e <HAL_GPIO_Init+0x20a>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a49      	ldr	r2, [pc, #292]	; (8000b7c <HAL_GPIO_Init+0x318>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d007      	beq.n	8000a6a <HAL_GPIO_Init+0x206>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a48      	ldr	r2, [pc, #288]	; (8000b80 <HAL_GPIO_Init+0x31c>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d101      	bne.n	8000a66 <HAL_GPIO_Init+0x202>
 8000a62:	2306      	movs	r3, #6
 8000a64:	e00c      	b.n	8000a80 <HAL_GPIO_Init+0x21c>
 8000a66:	2307      	movs	r3, #7
 8000a68:	e00a      	b.n	8000a80 <HAL_GPIO_Init+0x21c>
 8000a6a:	2305      	movs	r3, #5
 8000a6c:	e008      	b.n	8000a80 <HAL_GPIO_Init+0x21c>
 8000a6e:	2304      	movs	r3, #4
 8000a70:	e006      	b.n	8000a80 <HAL_GPIO_Init+0x21c>
 8000a72:	2303      	movs	r3, #3
 8000a74:	e004      	b.n	8000a80 <HAL_GPIO_Init+0x21c>
 8000a76:	2302      	movs	r3, #2
 8000a78:	e002      	b.n	8000a80 <HAL_GPIO_Init+0x21c>
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e000      	b.n	8000a80 <HAL_GPIO_Init+0x21c>
 8000a7e:	2300      	movs	r3, #0
 8000a80:	69fa      	ldr	r2, [r7, #28]
 8000a82:	f002 0203 	and.w	r2, r2, #3
 8000a86:	0092      	lsls	r2, r2, #2
 8000a88:	4093      	lsls	r3, r2
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a90:	4934      	ldr	r1, [pc, #208]	; (8000b64 <HAL_GPIO_Init+0x300>)
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	089b      	lsrs	r3, r3, #2
 8000a96:	3302      	adds	r3, #2
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a9e:	4b39      	ldr	r3, [pc, #228]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ac2:	4a30      	ldr	r2, [pc, #192]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ac8:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aec:	4a25      	ldr	r2, [pc, #148]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000af2:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	4013      	ands	r3, r2
 8000b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b16:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	43db      	mvns	r3, r3
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d003      	beq.n	8000b40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b40:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	2b0f      	cmp	r3, #15
 8000b50:	f67f ae96 	bls.w	8000880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b54:	bf00      	nop
 8000b56:	3724      	adds	r7, #36	; 0x24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40013800 	.word	0x40013800
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40020800 	.word	0x40020800
 8000b74:	40020c00 	.word	0x40020c00
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40021400 	.word	0x40021400
 8000b80:	40021800 	.word	0x40021800
 8000b84:	40013c00 	.word	0x40013c00

08000b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
 8000b94:	4613      	mov	r3, r2
 8000b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b98:	787b      	ldrb	r3, [r7, #1]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b9e:	887a      	ldrh	r2, [r7, #2]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ba4:	e003      	b.n	8000bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	041a      	lsls	r2, r3, #16
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	619a      	str	r2, [r3, #24]
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d101      	bne.n	8000bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e0ca      	b.n	8000d66 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000bd0:	4b67      	ldr	r3, [pc, #412]	; (8000d70 <HAL_RCC_ClockConfig+0x1b4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 020f 	and.w	r2, r3, #15
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d20c      	bcs.n	8000bf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bde:	4b64      	ldr	r3, [pc, #400]	; (8000d70 <HAL_RCC_ClockConfig+0x1b4>)
 8000be0:	683a      	ldr	r2, [r7, #0]
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000be6:	4b62      	ldr	r3, [pc, #392]	; (8000d70 <HAL_RCC_ClockConfig+0x1b4>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 020f 	and.w	r2, r3, #15
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d001      	beq.n	8000bf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e0b6      	b.n	8000d66 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d020      	beq.n	8000c46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d005      	beq.n	8000c1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c10:	4a58      	ldr	r2, [pc, #352]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000c12:	4b58      	ldr	r3, [pc, #352]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000c1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f003 0308 	and.w	r3, r3, #8
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d005      	beq.n	8000c34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c28:	4a52      	ldr	r2, [pc, #328]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000c2a:	4b52      	ldr	r3, [pc, #328]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000c32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c34:	494f      	ldr	r1, [pc, #316]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000c36:	4b4f      	ldr	r3, [pc, #316]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d044      	beq.n	8000cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d107      	bne.n	8000c6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c5a:	4b46      	ldr	r3, [pc, #280]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d119      	bne.n	8000c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e07d      	b.n	8000d66 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d003      	beq.n	8000c7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d107      	bne.n	8000c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c7a:	4b3e      	ldr	r3, [pc, #248]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d109      	bne.n	8000c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e06d      	b.n	8000d66 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c8a:	4b3a      	ldr	r3, [pc, #232]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e065      	b.n	8000d66 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c9a:	4936      	ldr	r1, [pc, #216]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000c9c:	4b35      	ldr	r3, [pc, #212]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	f023 0203 	bic.w	r2, r3, #3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000cac:	f7ff fca0 	bl	80005f0 <HAL_GetTick>
 8000cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cb2:	e00a      	b.n	8000cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cb4:	f7ff fc9c 	bl	80005f0 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d901      	bls.n	8000cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e04d      	b.n	8000d66 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cca:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	f003 020c 	and.w	r2, r3, #12
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d1eb      	bne.n	8000cb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000cdc:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <HAL_RCC_ClockConfig+0x1b4>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 020f 	and.w	r2, r3, #15
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d90c      	bls.n	8000d04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <HAL_RCC_ClockConfig+0x1b4>)
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <HAL_RCC_ClockConfig+0x1b4>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 020f 	and.w	r2, r3, #15
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d001      	beq.n	8000d04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e030      	b.n	8000d66 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 0304 	and.w	r3, r3, #4
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d008      	beq.n	8000d22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d10:	4918      	ldr	r1, [pc, #96]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	68db      	ldr	r3, [r3, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d009      	beq.n	8000d42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d2e:	4911      	ldr	r1, [pc, #68]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000d30:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d42:	f000 f851 	bl	8000de8 <HAL_RCC_GetSysClockFreq>
 8000d46:	4601      	mov	r1, r0
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_RCC_ClockConfig+0x1b8>)
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	091b      	lsrs	r3, r3, #4
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <HAL_RCC_ClockConfig+0x1bc>)
 8000d54:	5cd3      	ldrb	r3, [r2, r3]
 8000d56:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_RCC_ClockConfig+0x1c0>)
 8000d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f7ff fc02 	bl	8000568 <HAL_InitTick>

  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023c00 	.word	0x40023c00
 8000d74:	40023800 	.word	0x40023800
 8000d78:	08003c84 	.word	0x08003c84
 8000d7c:	20000008 	.word	0x20000008

08000d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000008 	.word	0x20000008

08000d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d9c:	f7ff fff0 	bl	8000d80 <HAL_RCC_GetHCLKFreq>
 8000da0:	4601      	mov	r1, r0
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	0a9b      	lsrs	r3, r3, #10
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	4a03      	ldr	r2, [pc, #12]	; (8000dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8000dae:	5cd3      	ldrb	r3, [r2, r3]
 8000db0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	08003c94 	.word	0x08003c94

08000dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000dc4:	f7ff ffdc 	bl	8000d80 <HAL_RCC_GetHCLKFreq>
 8000dc8:	4601      	mov	r1, r0
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	0b5b      	lsrs	r3, r3, #13
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	4a03      	ldr	r2, [pc, #12]	; (8000de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000dd6:	5cd3      	ldrb	r3, [r2, r3]
 8000dd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40023800 	.word	0x40023800
 8000de4:	08003c94 	.word	0x08003c94

08000de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dec:	b0a1      	sub	sp, #132	; 0x84
 8000dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 8000df4:	2300      	movs	r3, #0
 8000df6:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 8000e00:	2300      	movs	r3, #0
 8000e02:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e04:	4ba0      	ldr	r3, [pc, #640]	; (8001088 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	f003 030c 	and.w	r3, r3, #12
 8000e0c:	2b0c      	cmp	r3, #12
 8000e0e:	f200 8193 	bhi.w	8001138 <HAL_RCC_GetSysClockFreq+0x350>
 8000e12:	a201      	add	r2, pc, #4	; (adr r2, 8000e18 <HAL_RCC_GetSysClockFreq+0x30>)
 8000e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e18:	08000e4d 	.word	0x08000e4d
 8000e1c:	08001139 	.word	0x08001139
 8000e20:	08001139 	.word	0x08001139
 8000e24:	08001139 	.word	0x08001139
 8000e28:	08000e53 	.word	0x08000e53
 8000e2c:	08001139 	.word	0x08001139
 8000e30:	08001139 	.word	0x08001139
 8000e34:	08001139 	.word	0x08001139
 8000e38:	08000e59 	.word	0x08000e59
 8000e3c:	08001139 	.word	0x08001139
 8000e40:	08001139 	.word	0x08001139
 8000e44:	08001139 	.word	0x08001139
 8000e48:	08000fd5 	.word	0x08000fd5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e4c:	4b8f      	ldr	r3, [pc, #572]	; (800108c <HAL_RCC_GetSysClockFreq+0x2a4>)
 8000e4e:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 8000e50:	e175      	b.n	800113e <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000e52:	4b8f      	ldr	r3, [pc, #572]	; (8001090 <HAL_RCC_GetSysClockFreq+0x2a8>)
 8000e54:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8000e56:	e172      	b.n	800113e <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e58:	4b8b      	ldr	r3, [pc, #556]	; (8001088 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e60:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e62:	4b89      	ldr	r3, [pc, #548]	; (8001088 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d056      	beq.n	8000f1c <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e6e:	4b86      	ldr	r3, [pc, #536]	; (8001088 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	099b      	lsrs	r3, r3, #6
 8000e74:	f04f 0400 	mov.w	r4, #0
 8000e78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000e7c:	f04f 0200 	mov.w	r2, #0
 8000e80:	ea01 0103 	and.w	r1, r1, r3
 8000e84:	ea02 0204 	and.w	r2, r2, r4
 8000e88:	460b      	mov	r3, r1
 8000e8a:	4614      	mov	r4, r2
 8000e8c:	0160      	lsls	r0, r4, #5
 8000e8e:	6678      	str	r0, [r7, #100]	; 0x64
 8000e90:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000e92:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8000e96:	6678      	str	r0, [r7, #100]	; 0x64
 8000e98:	015b      	lsls	r3, r3, #5
 8000e9a:	663b      	str	r3, [r7, #96]	; 0x60
 8000e9c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8000ea0:	1a5b      	subs	r3, r3, r1
 8000ea2:	eb64 0402 	sbc.w	r4, r4, r2
 8000ea6:	01a0      	lsls	r0, r4, #6
 8000ea8:	65f8      	str	r0, [r7, #92]	; 0x5c
 8000eaa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000eac:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 8000eb0:	65f8      	str	r0, [r7, #92]	; 0x5c
 8000eb2:	0198      	lsls	r0, r3, #6
 8000eb4:	65b8      	str	r0, [r7, #88]	; 0x58
 8000eb6:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8000eba:	1aed      	subs	r5, r5, r3
 8000ebc:	eb66 0604 	sbc.w	r6, r6, r4
 8000ec0:	4633      	mov	r3, r6
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	657b      	str	r3, [r7, #84]	; 0x54
 8000ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ec8:	4628      	mov	r0, r5
 8000eca:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ece:	657b      	str	r3, [r7, #84]	; 0x54
 8000ed0:	462b      	mov	r3, r5
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	653b      	str	r3, [r7, #80]	; 0x50
 8000ed6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8000eda:	461d      	mov	r5, r3
 8000edc:	4626      	mov	r6, r4
 8000ede:	186b      	adds	r3, r5, r1
 8000ee0:	eb46 0402 	adc.w	r4, r6, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	4621      	mov	r1, r4
 8000ee8:	460b      	mov	r3, r1
 8000eea:	025b      	lsls	r3, r3, #9
 8000eec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 8000ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ef8:	4603      	mov	r3, r0
 8000efa:	025b      	lsls	r3, r3, #9
 8000efc:	64bb      	str	r3, [r7, #72]	; 0x48
 8000efe:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8000f02:	4618      	mov	r0, r3
 8000f04:	4621      	mov	r1, r4
 8000f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f08:	f04f 0400 	mov.w	r4, #0
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4623      	mov	r3, r4
 8000f10:	f7ff f980 	bl	8000214 <__aeabi_uldivmod>
 8000f14:	4603      	mov	r3, r0
 8000f16:	460c      	mov	r4, r1
 8000f18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f1a:	e04d      	b.n	8000fb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f1c:	4b5a      	ldr	r3, [pc, #360]	; (8001088 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	099b      	lsrs	r3, r3, #6
 8000f22:	f04f 0400 	mov.w	r4, #0
 8000f26:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	ea01 0103 	and.w	r1, r1, r3
 8000f32:	ea02 0204 	and.w	r2, r2, r4
 8000f36:	460b      	mov	r3, r1
 8000f38:	4614      	mov	r4, r2
 8000f3a:	0160      	lsls	r0, r4, #5
 8000f3c:	6478      	str	r0, [r7, #68]	; 0x44
 8000f3e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000f40:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8000f44:	6478      	str	r0, [r7, #68]	; 0x44
 8000f46:	015b      	lsls	r3, r3, #5
 8000f48:	643b      	str	r3, [r7, #64]	; 0x40
 8000f4a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8000f4e:	1a5b      	subs	r3, r3, r1
 8000f50:	eb64 0402 	sbc.w	r4, r4, r2
 8000f54:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 8000f58:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 8000f5c:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 8000f60:	ebba 0a03 	subs.w	sl, sl, r3
 8000f64:	eb6b 0b04 	sbc.w	fp, fp, r4
 8000f68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f76:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8000f7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f7c:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8000f80:	eb1a 0a01 	adds.w	sl, sl, r1
 8000f84:	eb4b 0b02 	adc.w	fp, fp, r2
 8000f88:	ea4f 238b 	mov.w	r3, fp, lsl #10
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8000f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f90:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
 8000f96:	ea4f 238a 	mov.w	r3, sl, lsl #10
 8000f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8000f9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8000fa0:	4650      	mov	r0, sl
 8000fa2:	4659      	mov	r1, fp
 8000fa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fa6:	f04f 0400 	mov.w	r4, #0
 8000faa:	461a      	mov	r2, r3
 8000fac:	4623      	mov	r3, r4
 8000fae:	f7ff f931 	bl	8000214 <__aeabi_uldivmod>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	460c      	mov	r4, r1
 8000fb6:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000fb8:	4b33      	ldr	r3, [pc, #204]	; (8001088 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	0c1b      	lsrs	r3, r3, #16
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 8000fc8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd0:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8000fd2:	e0b4      	b.n	800113e <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fdc:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fde:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d054      	beq.n	8001094 <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fea:	4b27      	ldr	r3, [pc, #156]	; (8001088 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	099b      	lsrs	r3, r3, #6
 8000ff0:	f04f 0400 	mov.w	r4, #0
 8000ff4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	ea01 0103 	and.w	r1, r1, r3
 8001000:	ea02 0204 	and.w	r2, r2, r4
 8001004:	460b      	mov	r3, r1
 8001006:	4614      	mov	r4, r2
 8001008:	0160      	lsls	r0, r4, #5
 800100a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800100c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800100e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001012:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001014:	015b      	lsls	r3, r3, #5
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
 8001018:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800101c:	1a5b      	subs	r3, r3, r1
 800101e:	eb64 0402 	sbc.w	r4, r4, r2
 8001022:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001026:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 800102a:	ea4f 1883 	mov.w	r8, r3, lsl #6
 800102e:	ebb8 0803 	subs.w	r8, r8, r3
 8001032:	eb69 0904 	sbc.w	r9, r9, r4
 8001036:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
 8001044:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001048:	623b      	str	r3, [r7, #32]
 800104a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800104e:	eb18 0801 	adds.w	r8, r8, r1
 8001052:	eb49 0902 	adc.w	r9, r9, r2
 8001056:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800105a:	61fb      	str	r3, [r7, #28]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001062:	61fb      	str	r3, [r7, #28]
 8001064:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001068:	61bb      	str	r3, [r7, #24]
 800106a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800106e:	4640      	mov	r0, r8
 8001070:	4649      	mov	r1, r9
 8001072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001074:	f04f 0400 	mov.w	r4, #0
 8001078:	461a      	mov	r2, r3
 800107a:	4623      	mov	r3, r4
 800107c:	f7ff f8ca 	bl	8000214 <__aeabi_uldivmod>
 8001080:	4603      	mov	r3, r0
 8001082:	460c      	mov	r4, r1
 8001084:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001086:	e04b      	b.n	8001120 <HAL_RCC_GetSysClockFreq+0x338>
 8001088:	40023800 	.word	0x40023800
 800108c:	00f42400 	.word	0x00f42400
 8001090:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001094:	4b2d      	ldr	r3, [pc, #180]	; (800114c <HAL_RCC_GetSysClockFreq+0x364>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	099b      	lsrs	r3, r3, #6
 800109a:	f04f 0400 	mov.w	r4, #0
 800109e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	ea01 0103 	and.w	r1, r1, r3
 80010aa:	ea02 0204 	and.w	r2, r2, r4
 80010ae:	460b      	mov	r3, r1
 80010b0:	4614      	mov	r4, r2
 80010b2:	0160      	lsls	r0, r4, #5
 80010b4:	6178      	str	r0, [r7, #20]
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80010bc:	6178      	str	r0, [r7, #20]
 80010be:	015b      	lsls	r3, r3, #5
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80010c6:	1a5b      	subs	r3, r3, r1
 80010c8:	eb64 0402 	sbc.w	r4, r4, r2
 80010cc:	01a6      	lsls	r6, r4, #6
 80010ce:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80010d2:	019d      	lsls	r5, r3, #6
 80010d4:	1aed      	subs	r5, r5, r3
 80010d6:	eb66 0604 	sbc.w	r6, r6, r4
 80010da:	00f3      	lsls	r3, r6, #3
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	00eb      	lsls	r3, r5, #3
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80010ee:	186d      	adds	r5, r5, r1
 80010f0:	eb46 0602 	adc.w	r6, r6, r2
 80010f4:	02b3      	lsls	r3, r6, #10
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	02ab      	lsls	r3, r5, #10
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001108:	4628      	mov	r0, r5
 800110a:	4631      	mov	r1, r6
 800110c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800110e:	f04f 0400 	mov.w	r4, #0
 8001112:	461a      	mov	r2, r3
 8001114:	4623      	mov	r3, r4
 8001116:	f7ff f87d 	bl	8000214 <__aeabi_uldivmod>
 800111a:	4603      	mov	r3, r0
 800111c:	460c      	mov	r4, r1
 800111e:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_RCC_GetSysClockFreq+0x364>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	0f1b      	lsrs	r3, r3, #28
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 800112c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800112e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001130:	fbb2 f3f3 	udiv	r3, r2, r3
 8001134:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001136:	e002      	b.n	800113e <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_RCC_GetSysClockFreq+0x368>)
 800113a:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800113c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800113e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 8001140:	4618      	mov	r0, r3
 8001142:	3784      	adds	r7, #132	; 0x84
 8001144:	46bd      	mov	sp, r7
 8001146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800
 8001150:	00f42400 	.word	0x00f42400

08001154 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b00      	cmp	r3, #0
 800116a:	f000 8083 	beq.w	8001274 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800116e:	4b95      	ldr	r3, [pc, #596]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 030c 	and.w	r3, r3, #12
 8001176:	2b04      	cmp	r3, #4
 8001178:	d019      	beq.n	80011ae <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800117a:	4b92      	ldr	r3, [pc, #584]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001182:	2b08      	cmp	r3, #8
 8001184:	d106      	bne.n	8001194 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001186:	4b8f      	ldr	r3, [pc, #572]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800118e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001192:	d00c      	beq.n	80011ae <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001194:	4b8b      	ldr	r3, [pc, #556]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800119c:	2b0c      	cmp	r3, #12
 800119e:	d112      	bne.n	80011c6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a0:	4b88      	ldr	r3, [pc, #544]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011ac:	d10b      	bne.n	80011c6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ae:	4b85      	ldr	r3, [pc, #532]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d05b      	beq.n	8001272 <HAL_RCC_OscConfig+0x11e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d157      	bne.n	8001272 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e216      	b.n	80015f4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ce:	d106      	bne.n	80011de <HAL_RCC_OscConfig+0x8a>
 80011d0:	4a7c      	ldr	r2, [pc, #496]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 80011d2:	4b7c      	ldr	r3, [pc, #496]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	e01d      	b.n	800121a <HAL_RCC_OscConfig+0xc6>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011e6:	d10c      	bne.n	8001202 <HAL_RCC_OscConfig+0xae>
 80011e8:	4a76      	ldr	r2, [pc, #472]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 80011ea:	4b76      	ldr	r3, [pc, #472]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4a73      	ldr	r2, [pc, #460]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 80011f6:	4b73      	ldr	r3, [pc, #460]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	e00b      	b.n	800121a <HAL_RCC_OscConfig+0xc6>
 8001202:	4a70      	ldr	r2, [pc, #448]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001204:	4b6f      	ldr	r3, [pc, #444]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	4a6d      	ldr	r2, [pc, #436]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001210:	4b6c      	ldr	r3, [pc, #432]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001218:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d013      	beq.n	800124a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001222:	f7ff f9e5 	bl	80005f0 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800122a:	f7ff f9e1 	bl	80005f0 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b64      	cmp	r3, #100	; 0x64
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e1db      	b.n	80015f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123c:	4b61      	ldr	r3, [pc, #388]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0f0      	beq.n	800122a <HAL_RCC_OscConfig+0xd6>
 8001248:	e014      	b.n	8001274 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124a:	f7ff f9d1 	bl	80005f0 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001252:	f7ff f9cd 	bl	80005f0 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b64      	cmp	r3, #100	; 0x64
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e1c7      	b.n	80015f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001264:	4b57      	ldr	r3, [pc, #348]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1f0      	bne.n	8001252 <HAL_RCC_OscConfig+0xfe>
 8001270:	e000      	b.n	8001274 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001272:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d06f      	beq.n	8001360 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001280:	4b50      	ldr	r3, [pc, #320]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 030c 	and.w	r3, r3, #12
 8001288:	2b00      	cmp	r3, #0
 800128a:	d017      	beq.n	80012bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800128c:	4b4d      	ldr	r3, [pc, #308]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001294:	2b08      	cmp	r3, #8
 8001296:	d105      	bne.n	80012a4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001298:	4b4a      	ldr	r3, [pc, #296]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00b      	beq.n	80012bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012a4:	4b47      	ldr	r3, [pc, #284]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80012ac:	2b0c      	cmp	r3, #12
 80012ae:	d11c      	bne.n	80012ea <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012b0:	4b44      	ldr	r3, [pc, #272]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d116      	bne.n	80012ea <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012bc:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_OscConfig+0x180>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d001      	beq.n	80012d4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e18f      	b.n	80015f4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d4:	493b      	ldr	r1, [pc, #236]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 80012d6:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4313      	orrs	r3, r2
 80012e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e8:	e03a      	b.n	8001360 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d020      	beq.n	8001334 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f2:	4b35      	ldr	r3, [pc, #212]	; (80013c8 <HAL_RCC_OscConfig+0x274>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f8:	f7ff f97a 	bl	80005f0 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001300:	f7ff f976 	bl	80005f0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e170      	b.n	80015f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001312:	4b2c      	ldr	r3, [pc, #176]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131e:	4929      	ldr	r1, [pc, #164]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001320:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4313      	orrs	r3, r2
 8001330:	600b      	str	r3, [r1, #0]
 8001332:	e015      	b.n	8001360 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001334:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <HAL_RCC_OscConfig+0x274>)
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133a:	f7ff f959 	bl	80005f0 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001342:	f7ff f955 	bl	80005f0 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e14f      	b.n	80015f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1f0      	bne.n	8001342 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	2b00      	cmp	r3, #0
 800136a:	d037      	beq.n	80013dc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d016      	beq.n	80013a2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_RCC_OscConfig+0x278>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800137a:	f7ff f939 	bl	80005f0 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001382:	f7ff f935 	bl	80005f0 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e12f      	b.n	80015f4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_RCC_OscConfig+0x270>)
 8001396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x22e>
 80013a0:	e01c      	b.n	80013dc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_RCC_OscConfig+0x278>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a8:	f7ff f922 	bl	80005f0 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ae:	e00f      	b.n	80013d0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b0:	f7ff f91e 	bl	80005f0 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d908      	bls.n	80013d0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e118      	b.n	80015f4 <HAL_RCC_OscConfig+0x4a0>
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	42470000 	.word	0x42470000
 80013cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d0:	4b8a      	ldr	r3, [pc, #552]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 80013d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1e9      	bne.n	80013b0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 8097 	beq.w	8001518 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ee:	4b83      	ldr	r3, [pc, #524]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10f      	bne.n	800141a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	4a7f      	ldr	r2, [pc, #508]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 8001400:	4b7e      	ldr	r3, [pc, #504]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001408:	6413      	str	r3, [r2, #64]	; 0x40
 800140a:	4b7c      	ldr	r3, [pc, #496]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001416:	2301      	movs	r3, #1
 8001418:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141a:	4b79      	ldr	r3, [pc, #484]	; (8001600 <HAL_RCC_OscConfig+0x4ac>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001422:	2b00      	cmp	r3, #0
 8001424:	d118      	bne.n	8001458 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001426:	4a76      	ldr	r2, [pc, #472]	; (8001600 <HAL_RCC_OscConfig+0x4ac>)
 8001428:	4b75      	ldr	r3, [pc, #468]	; (8001600 <HAL_RCC_OscConfig+0x4ac>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001432:	f7ff f8dd 	bl	80005f0 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143a:	f7ff f8d9 	bl	80005f0 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e0d3      	b.n	80015f4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144c:	4b6c      	ldr	r3, [pc, #432]	; (8001600 <HAL_RCC_OscConfig+0x4ac>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d106      	bne.n	800146e <HAL_RCC_OscConfig+0x31a>
 8001460:	4a66      	ldr	r2, [pc, #408]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 8001462:	4b66      	ldr	r3, [pc, #408]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 8001464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6713      	str	r3, [r2, #112]	; 0x70
 800146c:	e01c      	b.n	80014a8 <HAL_RCC_OscConfig+0x354>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b05      	cmp	r3, #5
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x33c>
 8001476:	4a61      	ldr	r2, [pc, #388]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 8001478:	4b60      	ldr	r3, [pc, #384]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 800147a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6713      	str	r3, [r2, #112]	; 0x70
 8001482:	4a5e      	ldr	r2, [pc, #376]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 8001484:	4b5d      	ldr	r3, [pc, #372]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 8001486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6713      	str	r3, [r2, #112]	; 0x70
 800148e:	e00b      	b.n	80014a8 <HAL_RCC_OscConfig+0x354>
 8001490:	4a5a      	ldr	r2, [pc, #360]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 8001492:	4b5a      	ldr	r3, [pc, #360]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 8001494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001496:	f023 0301 	bic.w	r3, r3, #1
 800149a:	6713      	str	r3, [r2, #112]	; 0x70
 800149c:	4a57      	ldr	r2, [pc, #348]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 800149e:	4b57      	ldr	r3, [pc, #348]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 80014a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a2:	f023 0304 	bic.w	r3, r3, #4
 80014a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d015      	beq.n	80014dc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b0:	f7ff f89e 	bl	80005f0 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b6:	e00a      	b.n	80014ce <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b8:	f7ff f89a 	bl	80005f0 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e092      	b.n	80015f4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ce:	4b4b      	ldr	r3, [pc, #300]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0ee      	beq.n	80014b8 <HAL_RCC_OscConfig+0x364>
 80014da:	e014      	b.n	8001506 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014dc:	f7ff f888 	bl	80005f0 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e2:	e00a      	b.n	80014fa <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e4:	f7ff f884 	bl	80005f0 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e07c      	b.n	80015f4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014fa:	4b40      	ldr	r3, [pc, #256]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1ee      	bne.n	80014e4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001506:	7dfb      	ldrb	r3, [r7, #23]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d105      	bne.n	8001518 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800150c:	4a3b      	ldr	r2, [pc, #236]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 800150e:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001516:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d068      	beq.n	80015f2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001520:	4b36      	ldr	r3, [pc, #216]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 030c 	and.w	r3, r3, #12
 8001528:	2b08      	cmp	r3, #8
 800152a:	d060      	beq.n	80015ee <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d145      	bne.n	80015c0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001534:	4b33      	ldr	r3, [pc, #204]	; (8001604 <HAL_RCC_OscConfig+0x4b0>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153a:	f7ff f859 	bl	80005f0 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001542:	f7ff f855 	bl	80005f0 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e04f      	b.n	80015f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001554:	4b29      	ldr	r3, [pc, #164]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f0      	bne.n	8001542 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001560:	4926      	ldr	r1, [pc, #152]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69da      	ldr	r2, [r3, #28]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	019b      	lsls	r3, r3, #6
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001578:	085b      	lsrs	r3, r3, #1
 800157a:	3b01      	subs	r3, #1
 800157c:	041b      	lsls	r3, r3, #16
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001584:	061b      	lsls	r3, r3, #24
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158c:	071b      	lsls	r3, r3, #28
 800158e:	4313      	orrs	r3, r2
 8001590:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001592:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <HAL_RCC_OscConfig+0x4b0>)
 8001594:	2201      	movs	r2, #1
 8001596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff f82a 	bl	80005f0 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff f826 	bl	80005f0 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e020      	b.n	80015f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0x44c>
 80015be:	e018      	b.n	80015f2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c0:	4b10      	ldr	r3, [pc, #64]	; (8001604 <HAL_RCC_OscConfig+0x4b0>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c6:	f7ff f813 	bl	80005f0 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ce:	f7ff f80f 	bl	80005f0 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e009      	b.n	80015f4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_RCC_OscConfig+0x4a8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f0      	bne.n	80015ce <HAL_RCC_OscConfig+0x47a>
 80015ec:	e001      	b.n	80015f2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40023800 	.word	0x40023800
 8001600:	40007000 	.word	0x40007000
 8001604:	42470060 	.word	0x42470060

08001608 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e01d      	b.n	8001656 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d106      	bne.n	8001634 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f002 f9c0 	bl	80039b4 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2202      	movs	r2, #2
 8001638:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3304      	adds	r3, #4
 8001644:	4619      	mov	r1, r3
 8001646:	4610      	mov	r0, r2
 8001648:	f000 fbd4 	bl	8001df4 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e01d      	b.n	80016ac <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d106      	bne.n	800168a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f002 f949 	bl	800391c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2202      	movs	r2, #2
 800168e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3304      	adds	r3, #4
 800169a:	4619      	mov	r1, r3
 800169c:	4610      	mov	r0, r2
 800169e:	f000 fba9 	bl	8001df4 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}  
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2201      	movs	r2, #1
 80016c4:	6839      	ldr	r1, [r7, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fcb6 	bl	8002038 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a10      	ldr	r2, [pc, #64]	; (8001714 <HAL_TIM_PWM_Start+0x60>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d004      	beq.n	80016e0 <HAL_TIM_PWM_Start+0x2c>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <HAL_TIM_PWM_Start+0x64>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d101      	bne.n	80016e4 <HAL_TIM_PWM_Start+0x30>
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <HAL_TIM_PWM_Start+0x32>
 80016e4:	2300      	movs	r3, #0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d007      	beq.n	80016fa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016f8:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	f042 0201 	orr.w	r2, r2, #1
 8001708:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
} 
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40010000 	.word	0x40010000
 8001718:	40010400 	.word	0x40010400

0800171c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2200      	movs	r2, #0
 800172c:	6839      	ldr	r1, [r7, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f000 fc82 	bl	8002038 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a22      	ldr	r2, [pc, #136]	; (80017c4 <HAL_TIM_PWM_Stop+0xa8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d004      	beq.n	8001748 <HAL_TIM_PWM_Stop+0x2c>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a21      	ldr	r2, [pc, #132]	; (80017c8 <HAL_TIM_PWM_Stop+0xac>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d101      	bne.n	800174c <HAL_TIM_PWM_Stop+0x30>
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <HAL_TIM_PWM_Stop+0x32>
 800174c:	2300      	movs	r3, #0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d017      	beq.n	8001782 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6a1a      	ldr	r2, [r3, #32]
 8001758:	f241 1311 	movw	r3, #4369	; 0x1111
 800175c:	4013      	ands	r3, r2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10f      	bne.n	8001782 <HAL_TIM_PWM_Stop+0x66>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6a1a      	ldr	r2, [r3, #32]
 8001768:	f240 4344 	movw	r3, #1092	; 0x444
 800176c:	4013      	ands	r3, r2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d107      	bne.n	8001782 <HAL_TIM_PWM_Stop+0x66>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800177c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001780:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6a1a      	ldr	r2, [r3, #32]
 8001788:	f241 1311 	movw	r3, #4369	; 0x1111
 800178c:	4013      	ands	r3, r2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10f      	bne.n	80017b2 <HAL_TIM_PWM_Stop+0x96>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6a1a      	ldr	r2, [r3, #32]
 8001798:	f240 4344 	movw	r3, #1092	; 0x444
 800179c:	4013      	ands	r3, r2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d107      	bne.n	80017b2 <HAL_TIM_PWM_Stop+0x96>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	f022 0201 	bic.w	r2, r2, #1
 80017b0:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
} 
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40010000 	.word	0x40010000
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_TIM_Encoder_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e081      	b.n	80018f0 <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d106      	bne.n	8001806 <HAL_TIM_Encoder_Init+0x3a>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f001 ffd3 	bl	80037ac <HAL_TIM_Encoder_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2202      	movs	r2, #2
 800180a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	6892      	ldr	r2, [r2, #8]
 8001818:	f022 0207 	bic.w	r2, r2, #7
 800181c:	609a      	str	r2, [r3, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3304      	adds	r3, #4
 8001826:	4619      	mov	r1, r3
 8001828:	4610      	mov	r0, r2
 800182a:	f000 fae3 	bl	8001df4 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	4313      	orrs	r3, r2
 800184e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001856:	f023 0303 	bic.w	r3, r3, #3
 800185a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	4313      	orrs	r3, r2
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001874:	f023 030c 	bic.w	r3, r3, #12
 8001878:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001880:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001884:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	4313      	orrs	r3, r2
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	011a      	lsls	r2, r3, #4
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	031b      	lsls	r3, r3, #12
 80018a4:	4313      	orrs	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80018b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80018ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	4313      	orrs	r3, r2
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	621a      	str	r2, [r3, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <HAL_TIM_Encoder_Start+0x16>
 8001908:	2b04      	cmp	r3, #4
 800190a:	d008      	beq.n	800191e <HAL_TIM_Encoder_Start+0x26>
 800190c:	e00f      	b.n	800192e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2201      	movs	r2, #1
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f000 fb8e 	bl	8002038 <TIM_CCxChannelCmd>
      break; 
 800191c:	e016      	b.n	800194c <HAL_TIM_Encoder_Start+0x54>
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2201      	movs	r2, #1
 8001924:	2104      	movs	r1, #4
 8001926:	4618      	mov	r0, r3
 8001928:	f000 fb86 	bl	8002038 <TIM_CCxChannelCmd>
      break;
 800192c:	e00e      	b.n	800194c <HAL_TIM_Encoder_Start+0x54>
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2201      	movs	r2, #1
 8001934:	2100      	movs	r1, #0
 8001936:	4618      	mov	r0, r3
 8001938:	f000 fb7e 	bl	8002038 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2201      	movs	r2, #1
 8001942:	2104      	movs	r1, #4
 8001944:	4618      	mov	r0, r3
 8001946:	f000 fb77 	bl	8002038 <TIM_CCxChannelCmd>
     break; 
 800194a:	bf00      	nop
    }
  }  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	f042 0201 	orr.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    
   /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */ 
  switch (Channel)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <HAL_TIM_Encoder_Stop+0x16>
 8001976:	2b04      	cmp	r3, #4
 8001978:	d008      	beq.n	800198c <HAL_TIM_Encoder_Stop+0x26>
 800197a:	e00f      	b.n	800199c <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2200      	movs	r2, #0
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f000 fb57 	bl	8002038 <TIM_CCxChannelCmd>
      break; 
 800198a:	e016      	b.n	80019ba <HAL_TIM_Encoder_Stop+0x54>
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2200      	movs	r2, #0
 8001992:	2104      	movs	r1, #4
 8001994:	4618      	mov	r0, r3
 8001996:	f000 fb4f 	bl	8002038 <TIM_CCxChannelCmd>
      break;
 800199a:	e00e      	b.n	80019ba <HAL_TIM_Encoder_Stop+0x54>
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2200      	movs	r2, #0
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f000 fb47 	bl	8002038 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2200      	movs	r2, #0
 80019b0:	2104      	movs	r1, #4
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 fb40 	bl	8002038 <TIM_CCxChannelCmd>
     break; 
 80019b8:	bf00      	nop
    }
  }  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6a1a      	ldr	r2, [r3, #32]
 80019c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10f      	bne.n	80019ea <HAL_TIM_Encoder_Stop+0x84>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6a1a      	ldr	r2, [r3, #32]
 80019d0:	f240 4344 	movw	r3, #1092	; 0x444
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d107      	bne.n	80019ea <HAL_TIM_Encoder_Stop+0x84>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	f022 0201 	bic.w	r2, r2, #1
 80019e8:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d122      	bne.n	8001a50 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d11b      	bne.n	8001a50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f06f 0202 	mvn.w	r2, #2
 8001a20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f9be 	bl	8001db8 <HAL_TIM_IC_CaptureCallback>
 8001a3c:	e005      	b.n	8001a4a <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f9b0 	bl	8001da4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f9c1 	bl	8001dcc <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d122      	bne.n	8001aa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d11b      	bne.n	8001aa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f06f 0204 	mvn.w	r2, #4
 8001a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2202      	movs	r2, #2
 8001a7a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f994 	bl	8001db8 <HAL_TIM_IC_CaptureCallback>
 8001a90:	e005      	b.n	8001a9e <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f986 	bl	8001da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f997 	bl	8001dcc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d122      	bne.n	8001af8 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d11b      	bne.n	8001af8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f06f 0208 	mvn.w	r2, #8
 8001ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2204      	movs	r2, #4
 8001ace:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f96a 	bl	8001db8 <HAL_TIM_IC_CaptureCallback>
 8001ae4:	e005      	b.n	8001af2 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f95c 	bl	8001da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f96d 	bl	8001dcc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	2b10      	cmp	r3, #16
 8001b04:	d122      	bne.n	8001b4c <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f003 0310 	and.w	r3, r3, #16
 8001b10:	2b10      	cmp	r3, #16
 8001b12:	d11b      	bne.n	8001b4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f06f 0210 	mvn.w	r2, #16
 8001b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2208      	movs	r2, #8
 8001b22:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f940 	bl	8001db8 <HAL_TIM_IC_CaptureCallback>
 8001b38:	e005      	b.n	8001b46 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f932 	bl	8001da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f943 	bl	8001dcc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d10e      	bne.n	8001b78 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d107      	bne.n	8001b78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f06f 0201 	mvn.w	r2, #1
 8001b70:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f90c 	bl	8001d90 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b82:	2b80      	cmp	r3, #128	; 0x80
 8001b84:	d10e      	bne.n	8001ba4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b90:	2b80      	cmp	r3, #128	; 0x80
 8001b92:	d107      	bne.n	8001ba4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b9c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 fc09 	bl	80023b6 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bae:	2b40      	cmp	r3, #64	; 0x40
 8001bb0:	d10e      	bne.n	8001bd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bbc:	2b40      	cmp	r3, #64	; 0x40
 8001bbe:	d107      	bne.n	8001bd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bc8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f908 	bl	8001de0 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	2b20      	cmp	r3, #32
 8001bdc:	d10e      	bne.n	8001bfc <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f003 0320 	and.w	r3, r3, #32
 8001be8:	2b20      	cmp	r3, #32
 8001bea:	d107      	bne.n	8001bfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f06f 0220 	mvn.w	r2, #32
 8001bf4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 fbd3 	bl	80023a2 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e0b4      	b.n	8001d88 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2202      	movs	r2, #2
 8001c2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b0c      	cmp	r3, #12
 8001c32:	f200 809f 	bhi.w	8001d74 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001c36:	a201      	add	r2, pc, #4	; (adr r2, 8001c3c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3c:	08001c71 	.word	0x08001c71
 8001c40:	08001d75 	.word	0x08001d75
 8001c44:	08001d75 	.word	0x08001d75
 8001c48:	08001d75 	.word	0x08001d75
 8001c4c:	08001cb1 	.word	0x08001cb1
 8001c50:	08001d75 	.word	0x08001d75
 8001c54:	08001d75 	.word	0x08001d75
 8001c58:	08001d75 	.word	0x08001d75
 8001c5c:	08001cf3 	.word	0x08001cf3
 8001c60:	08001d75 	.word	0x08001d75
 8001c64:	08001d75 	.word	0x08001d75
 8001c68:	08001d75 	.word	0x08001d75
 8001c6c:	08001d33 	.word	0x08001d33
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 fa02 	bl	8002080 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	6992      	ldr	r2, [r2, #24]
 8001c86:	f042 0208 	orr.w	r2, r2, #8
 8001c8a:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	6992      	ldr	r2, [r2, #24]
 8001c96:	f022 0204 	bic.w	r2, r2, #4
 8001c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	6991      	ldr	r1, [r2, #24]
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	6912      	ldr	r2, [r2, #16]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	619a      	str	r2, [r3, #24]
    }
    break;
 8001cae:	e062      	b.n	8001d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f946 	bl	8001f48 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	6992      	ldr	r2, [r2, #24]
 8001cc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cca:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	6992      	ldr	r2, [r2, #24]
 8001cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	6991      	ldr	r1, [r2, #24]
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	6912      	ldr	r2, [r2, #16]
 8001cea:	0212      	lsls	r2, r2, #8
 8001cec:	430a      	orrs	r2, r1
 8001cee:	619a      	str	r2, [r3, #24]
    }
    break;
 8001cf0:	e041      	b.n	8001d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68b9      	ldr	r1, [r7, #8]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f000 fa35 	bl	8002168 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	69d2      	ldr	r2, [r2, #28]
 8001d08:	f042 0208 	orr.w	r2, r2, #8
 8001d0c:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	69d2      	ldr	r2, [r2, #28]
 8001d18:	f022 0204 	bic.w	r2, r2, #4
 8001d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	69d1      	ldr	r1, [r2, #28]
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	6912      	ldr	r2, [r2, #16]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	61da      	str	r2, [r3, #28]
    }
    break;
 8001d30:	e021      	b.n	8001d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68b9      	ldr	r1, [r7, #8]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 fa8d 	bl	8002258 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	6812      	ldr	r2, [r2, #0]
 8001d46:	69d2      	ldr	r2, [r2, #28]
 8001d48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d4c:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	69d2      	ldr	r2, [r2, #28]
 8001d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	69d1      	ldr	r1, [r2, #28]
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	6912      	ldr	r2, [r2, #16]
 8001d6c:	0212      	lsls	r2, r2, #8
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	61da      	str	r2, [r3, #28]
    }
    break;
 8001d72:	e000      	b.n	8001d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 8001d74:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a44      	ldr	r2, [pc, #272]	; (8001f1c <TIM_Base_SetConfig+0x128>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d013      	beq.n	8001e38 <TIM_Base_SetConfig+0x44>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e16:	d00f      	beq.n	8001e38 <TIM_Base_SetConfig+0x44>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a41      	ldr	r2, [pc, #260]	; (8001f20 <TIM_Base_SetConfig+0x12c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d00b      	beq.n	8001e38 <TIM_Base_SetConfig+0x44>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a40      	ldr	r2, [pc, #256]	; (8001f24 <TIM_Base_SetConfig+0x130>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d007      	beq.n	8001e38 <TIM_Base_SetConfig+0x44>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a3f      	ldr	r2, [pc, #252]	; (8001f28 <TIM_Base_SetConfig+0x134>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d003      	beq.n	8001e38 <TIM_Base_SetConfig+0x44>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a3e      	ldr	r2, [pc, #248]	; (8001f2c <TIM_Base_SetConfig+0x138>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d101      	bne.n	8001e3c <TIM_Base_SetConfig+0x48>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <TIM_Base_SetConfig+0x4a>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d008      	beq.n	8001e54 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a31      	ldr	r2, [pc, #196]	; (8001f1c <TIM_Base_SetConfig+0x128>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d02b      	beq.n	8001eb4 <TIM_Base_SetConfig+0xc0>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e62:	d027      	beq.n	8001eb4 <TIM_Base_SetConfig+0xc0>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a2e      	ldr	r2, [pc, #184]	; (8001f20 <TIM_Base_SetConfig+0x12c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d023      	beq.n	8001eb4 <TIM_Base_SetConfig+0xc0>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a2d      	ldr	r2, [pc, #180]	; (8001f24 <TIM_Base_SetConfig+0x130>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d01f      	beq.n	8001eb4 <TIM_Base_SetConfig+0xc0>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a2c      	ldr	r2, [pc, #176]	; (8001f28 <TIM_Base_SetConfig+0x134>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d01b      	beq.n	8001eb4 <TIM_Base_SetConfig+0xc0>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a2b      	ldr	r2, [pc, #172]	; (8001f2c <TIM_Base_SetConfig+0x138>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d017      	beq.n	8001eb4 <TIM_Base_SetConfig+0xc0>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a2a      	ldr	r2, [pc, #168]	; (8001f30 <TIM_Base_SetConfig+0x13c>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d013      	beq.n	8001eb4 <TIM_Base_SetConfig+0xc0>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a29      	ldr	r2, [pc, #164]	; (8001f34 <TIM_Base_SetConfig+0x140>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d00f      	beq.n	8001eb4 <TIM_Base_SetConfig+0xc0>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a28      	ldr	r2, [pc, #160]	; (8001f38 <TIM_Base_SetConfig+0x144>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00b      	beq.n	8001eb4 <TIM_Base_SetConfig+0xc0>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a27      	ldr	r2, [pc, #156]	; (8001f3c <TIM_Base_SetConfig+0x148>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d007      	beq.n	8001eb4 <TIM_Base_SetConfig+0xc0>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a26      	ldr	r2, [pc, #152]	; (8001f40 <TIM_Base_SetConfig+0x14c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d003      	beq.n	8001eb4 <TIM_Base_SetConfig+0xc0>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a25      	ldr	r2, [pc, #148]	; (8001f44 <TIM_Base_SetConfig+0x150>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d101      	bne.n	8001eb8 <TIM_Base_SetConfig+0xc4>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <TIM_Base_SetConfig+0xc6>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d008      	beq.n	8001ed0 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a0c      	ldr	r2, [pc, #48]	; (8001f1c <TIM_Base_SetConfig+0x128>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d003      	beq.n	8001ef6 <TIM_Base_SetConfig+0x102>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <TIM_Base_SetConfig+0x138>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d101      	bne.n	8001efa <TIM_Base_SetConfig+0x106>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <TIM_Base_SetConfig+0x108>
 8001efa:	2300      	movs	r3, #0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	615a      	str	r2, [r3, #20]
}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40010000 	.word	0x40010000
 8001f20:	40000400 	.word	0x40000400
 8001f24:	40000800 	.word	0x40000800
 8001f28:	40000c00 	.word	0x40000c00
 8001f2c:	40010400 	.word	0x40010400
 8001f30:	40014000 	.word	0x40014000
 8001f34:	40014400 	.word	0x40014400
 8001f38:	40014800 	.word	0x40014800
 8001f3c:	40001800 	.word	0x40001800
 8001f40:	40001c00 	.word	0x40001c00
 8001f44:	40002000 	.word	0x40002000

08001f48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	f023 0210 	bic.w	r2, r3, #16
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f8a:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	021b      	lsls	r3, r3, #8
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f023 0320 	bic.w	r3, r3, #32
 8001f9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a20      	ldr	r2, [pc, #128]	; (8002030 <TIM_OC2_SetConfig+0xe8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d003      	beq.n	8001fbc <TIM_OC2_SetConfig+0x74>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a1f      	ldr	r2, [pc, #124]	; (8002034 <TIM_OC2_SetConfig+0xec>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d101      	bne.n	8001fc0 <TIM_OC2_SetConfig+0x78>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <TIM_OC2_SetConfig+0x7a>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d021      	beq.n	800200a <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fe0:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	621a      	str	r2, [r3, #32]
}
 8002024:	bf00      	nop
 8002026:	371c      	adds	r7, #28
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	40010000 	.word	0x40010000
 8002034:	40010400 	.word	0x40010400

08002038 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002048:	2201      	movs	r2, #1
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6a1a      	ldr	r2, [r3, #32]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	43db      	mvns	r3, r3
 800205a:	401a      	ands	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a1a      	ldr	r2, [r3, #32]
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	431a      	orrs	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	621a      	str	r2, [r3, #32]
}
 8002072:	bf00      	nop
 8002074:	371c      	adds	r7, #28
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	f023 0201 	bic.w	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f023 0303 	bic.w	r3, r3, #3
 80020c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f023 0302 	bic.w	r3, r3, #2
 80020d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4313      	orrs	r3, r2
 80020de:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a1f      	ldr	r2, [pc, #124]	; (8002160 <TIM_OC1_SetConfig+0xe0>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d003      	beq.n	80020f0 <TIM_OC1_SetConfig+0x70>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a1e      	ldr	r2, [pc, #120]	; (8002164 <TIM_OC1_SetConfig+0xe4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d101      	bne.n	80020f4 <TIM_OC1_SetConfig+0x74>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <TIM_OC1_SetConfig+0x76>
 80020f4:	2300      	movs	r3, #0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d01e      	beq.n	8002138 <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f023 0308 	bic.w	r3, r3, #8
 8002100:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4313      	orrs	r3, r2
 800210a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f023 0304 	bic.w	r3, r3, #4
 8002112:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800211a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	621a      	str	r2, [r3, #32]
} 
 8002152:	bf00      	nop
 8002154:	371c      	adds	r7, #28
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40010000 	.word	0x40010000
 8002164:	40010400 	.word	0x40010400

08002168 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f023 0303 	bic.w	r3, r3, #3
 80021aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a20      	ldr	r2, [pc, #128]	; (8002250 <TIM_OC3_SetConfig+0xe8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d003      	beq.n	80021da <TIM_OC3_SetConfig+0x72>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a1f      	ldr	r2, [pc, #124]	; (8002254 <TIM_OC3_SetConfig+0xec>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d101      	bne.n	80021de <TIM_OC3_SetConfig+0x76>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <TIM_OC3_SetConfig+0x78>
 80021de:	2300      	movs	r3, #0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d021      	beq.n	8002228 <TIM_OC3_SetConfig+0xc0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021fe:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002206:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800220e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	621a      	str	r2, [r3, #32]
}
 8002242:	bf00      	nop
 8002244:	371c      	adds	r7, #28
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40010000 	.word	0x40010000
 8002254:	40010400 	.word	0x40010400

08002258 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002292:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800229a:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	021b      	lsls	r3, r3, #8
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022ae:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	031b      	lsls	r3, r3, #12
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a14      	ldr	r2, [pc, #80]	; (8002310 <TIM_OC4_SetConfig+0xb8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d003      	beq.n	80022cc <TIM_OC4_SetConfig+0x74>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a13      	ldr	r2, [pc, #76]	; (8002314 <TIM_OC4_SetConfig+0xbc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d101      	bne.n	80022d0 <TIM_OC4_SetConfig+0x78>
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <TIM_OC4_SetConfig+0x7a>
 80022d0:	2300      	movs	r3, #0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d009      	beq.n	80022ea <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	019b      	lsls	r3, r3, #6
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	621a      	str	r2, [r3, #32]
}
 8002304:	bf00      	nop
 8002306:	371c      	adds	r7, #28
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	40010000 	.word	0x40010000
 8002314:	40010400 	.word	0x40010400

08002318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800232c:	2302      	movs	r3, #2
 800232e:	e032      	b.n	8002396 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	6852      	ldr	r2, [r2, #4]
 800234a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800234e:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	6851      	ldr	r1, [r2, #4]
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	6892      	ldr	r2, [r2, #8]
 800236c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002370:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	6891      	ldr	r1, [r2, #8]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	6852      	ldr	r2, [r2, #4]
 8002380:	430a      	orrs	r2, r1
 8002382:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
} 
 8002396:	4618      	mov	r0, r3
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e03f      	b.n	800245c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d106      	bne.n	80023f6 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f001 fb9b 	bl	8003b2c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2224      	movs	r2, #36	; 0x24
 80023fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	68d2      	ldr	r2, [r2, #12]
 8002408:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800240c:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f90a 	bl	8002628 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	6912      	ldr	r2, [r2, #16]
 800241e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002422:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	6952      	ldr	r2, [r2, #20]
 800242e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002432:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	68d2      	ldr	r2, [r2, #12]
 800243e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002442:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2220      	movs	r2, #32
 800244e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2220      	movs	r2, #32
 8002456:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af02      	add	r7, sp, #8
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	4613      	mov	r3, r2
 8002472:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b20      	cmp	r3, #32
 8002482:	f040 8082 	bne.w	800258a <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <HAL_UART_Transmit+0x2e>
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e07a      	b.n	800258c <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_UART_Transmit+0x40>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e073      	b.n	800258c <HAL_UART_Transmit+0x128>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2221      	movs	r2, #33	; 0x21
 80024b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80024ba:	f7fe f899 	bl	80005f0 <HAL_GetTick>
 80024be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	88fa      	ldrh	r2, [r7, #6]
 80024c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	88fa      	ldrh	r2, [r7, #6]
 80024ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80024cc:	e041      	b.n	8002552 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e4:	d121      	bne.n	800252a <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2200      	movs	r2, #0
 80024ee:	2180      	movs	r1, #128	; 0x80
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 f84f 	bl	8002594 <UART_WaitOnFlagUntilTimeout>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e045      	b.n	800258c <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	8812      	ldrh	r2, [r2, #0]
 800250c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002510:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d103      	bne.n	8002522 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3302      	adds	r3, #2
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	e017      	b.n	8002552 <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	3301      	adds	r3, #1
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	e013      	b.n	8002552 <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2200      	movs	r2, #0
 8002532:	2180      	movs	r1, #128	; 0x80
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 f82d 	bl	8002594 <UART_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e023      	b.n	800258c <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	1c59      	adds	r1, r3, #1
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002556:	b29b      	uxth	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1b8      	bne.n	80024ce <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2200      	movs	r2, #0
 8002564:	2140      	movs	r1, #64	; 0x40
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 f814 	bl	8002594 <UART_WaitOnFlagUntilTimeout>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e00a      	b.n	800258c <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2220      	movs	r2, #32
 800257a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	e000      	b.n	800258c <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 800258a:	2302      	movs	r3, #2
  }
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	4613      	mov	r3, r2
 80025a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80025a4:	e02c      	b.n	8002600 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ac:	d028      	beq.n	8002600 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d007      	beq.n	80025c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80025b4:	f7fe f81c 	bl	80005f0 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	1ad2      	subs	r2, r2, r3
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d91d      	bls.n	8002600 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	68d2      	ldr	r2, [r2, #12]
 80025ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	6952      	ldr	r2, [r2, #20]
 80025de:	f022 0201 	bic.w	r2, r2, #1
 80025e2:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e00f      	b.n	8002620 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	401a      	ands	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	429a      	cmp	r2, r3
 800260e:	bf0c      	ite	eq
 8002610:	2301      	moveq	r3, #1
 8002612:	2300      	movne	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	461a      	mov	r2, r3
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	429a      	cmp	r2, r3
 800261c:	d0c3      	beq.n	80025a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002642:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002664:	f023 030c 	bic.w	r3, r3, #12
 8002668:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	4313      	orrs	r3, r2
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800269c:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b8:	f040 80e4 	bne.w	8002884 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4aab      	ldr	r2, [pc, #684]	; (8002970 <UART_SetConfig+0x348>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d004      	beq.n	80026d0 <UART_SetConfig+0xa8>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4aaa      	ldr	r2, [pc, #680]	; (8002974 <UART_SetConfig+0x34c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d16c      	bne.n	80027aa <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681c      	ldr	r4, [r3, #0]
 80026d4:	f7fe fb74 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4613      	mov	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	009a      	lsls	r2, r3, #2
 80026e2:	441a      	add	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ee:	4aa2      	ldr	r2, [pc, #648]	; (8002978 <UART_SetConfig+0x350>)
 80026f0:	fba2 2303 	umull	r2, r3, r2, r3
 80026f4:	095b      	lsrs	r3, r3, #5
 80026f6:	011d      	lsls	r5, r3, #4
 80026f8:	f7fe fb62 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 80026fc:	4602      	mov	r2, r0
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	009a      	lsls	r2, r3, #2
 8002706:	441a      	add	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002712:	f7fe fb55 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 8002716:	4602      	mov	r2, r0
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	009a      	lsls	r2, r3, #2
 8002720:	441a      	add	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fbb2 f3f3 	udiv	r3, r2, r3
 800272c:	4a92      	ldr	r2, [pc, #584]	; (8002978 <UART_SetConfig+0x350>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	2264      	movs	r2, #100	; 0x64
 8002736:	fb02 f303 	mul.w	r3, r2, r3
 800273a:	1af3      	subs	r3, r6, r3
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	3332      	adds	r3, #50	; 0x32
 8002740:	4a8d      	ldr	r2, [pc, #564]	; (8002978 <UART_SetConfig+0x350>)
 8002742:	fba2 2303 	umull	r2, r3, r2, r3
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800274e:	441d      	add	r5, r3
 8002750:	f7fe fb36 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 8002754:	4602      	mov	r2, r0
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	009a      	lsls	r2, r3, #2
 800275e:	441a      	add	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	fbb2 f6f3 	udiv	r6, r2, r3
 800276a:	f7fe fb29 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 800276e:	4602      	mov	r2, r0
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	009a      	lsls	r2, r3, #2
 8002778:	441a      	add	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	fbb2 f3f3 	udiv	r3, r2, r3
 8002784:	4a7c      	ldr	r2, [pc, #496]	; (8002978 <UART_SetConfig+0x350>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	2264      	movs	r2, #100	; 0x64
 800278e:	fb02 f303 	mul.w	r3, r2, r3
 8002792:	1af3      	subs	r3, r6, r3
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	3332      	adds	r3, #50	; 0x32
 8002798:	4a77      	ldr	r2, [pc, #476]	; (8002978 <UART_SetConfig+0x350>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	442b      	add	r3, r5
 80027a6:	60a3      	str	r3, [r4, #8]
 80027a8:	e154      	b.n	8002a54 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681c      	ldr	r4, [r3, #0]
 80027ae:	f7fe faf3 	bl	8000d98 <HAL_RCC_GetPCLK1Freq>
 80027b2:	4602      	mov	r2, r0
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	009a      	lsls	r2, r3, #2
 80027bc:	441a      	add	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c8:	4a6b      	ldr	r2, [pc, #428]	; (8002978 <UART_SetConfig+0x350>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	011d      	lsls	r5, r3, #4
 80027d2:	f7fe fae1 	bl	8000d98 <HAL_RCC_GetPCLK1Freq>
 80027d6:	4602      	mov	r2, r0
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	009a      	lsls	r2, r3, #2
 80027e0:	441a      	add	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80027ec:	f7fe fad4 	bl	8000d98 <HAL_RCC_GetPCLK1Freq>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	009a      	lsls	r2, r3, #2
 80027fa:	441a      	add	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	fbb2 f3f3 	udiv	r3, r2, r3
 8002806:	4a5c      	ldr	r2, [pc, #368]	; (8002978 <UART_SetConfig+0x350>)
 8002808:	fba2 2303 	umull	r2, r3, r2, r3
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	2264      	movs	r2, #100	; 0x64
 8002810:	fb02 f303 	mul.w	r3, r2, r3
 8002814:	1af3      	subs	r3, r6, r3
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	3332      	adds	r3, #50	; 0x32
 800281a:	4a57      	ldr	r2, [pc, #348]	; (8002978 <UART_SetConfig+0x350>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002828:	441d      	add	r5, r3
 800282a:	f7fe fab5 	bl	8000d98 <HAL_RCC_GetPCLK1Freq>
 800282e:	4602      	mov	r2, r0
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	009a      	lsls	r2, r3, #2
 8002838:	441a      	add	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fbb2 f6f3 	udiv	r6, r2, r3
 8002844:	f7fe faa8 	bl	8000d98 <HAL_RCC_GetPCLK1Freq>
 8002848:	4602      	mov	r2, r0
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	009a      	lsls	r2, r3, #2
 8002852:	441a      	add	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	fbb2 f3f3 	udiv	r3, r2, r3
 800285e:	4a46      	ldr	r2, [pc, #280]	; (8002978 <UART_SetConfig+0x350>)
 8002860:	fba2 2303 	umull	r2, r3, r2, r3
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	2264      	movs	r2, #100	; 0x64
 8002868:	fb02 f303 	mul.w	r3, r2, r3
 800286c:	1af3      	subs	r3, r6, r3
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	3332      	adds	r3, #50	; 0x32
 8002872:	4a41      	ldr	r2, [pc, #260]	; (8002978 <UART_SetConfig+0x350>)
 8002874:	fba2 2303 	umull	r2, r3, r2, r3
 8002878:	095b      	lsrs	r3, r3, #5
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	442b      	add	r3, r5
 8002880:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002882:	e0e7      	b.n	8002a54 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a39      	ldr	r2, [pc, #228]	; (8002970 <UART_SetConfig+0x348>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d004      	beq.n	8002898 <UART_SetConfig+0x270>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a38      	ldr	r2, [pc, #224]	; (8002974 <UART_SetConfig+0x34c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d171      	bne.n	800297c <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681c      	ldr	r4, [r3, #0]
 800289c:	f7fe fa90 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	009a      	lsls	r2, r3, #2
 80028aa:	441a      	add	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b6:	4a30      	ldr	r2, [pc, #192]	; (8002978 <UART_SetConfig+0x350>)
 80028b8:	fba2 2303 	umull	r2, r3, r2, r3
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	011d      	lsls	r5, r3, #4
 80028c0:	f7fe fa7e 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 80028c4:	4602      	mov	r2, r0
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	009a      	lsls	r2, r3, #2
 80028ce:	441a      	add	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80028da:	f7fe fa71 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 80028de:	4602      	mov	r2, r0
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	009a      	lsls	r2, r3, #2
 80028e8:	441a      	add	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f4:	4a20      	ldr	r2, [pc, #128]	; (8002978 <UART_SetConfig+0x350>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	2264      	movs	r2, #100	; 0x64
 80028fe:	fb02 f303 	mul.w	r3, r2, r3
 8002902:	1af3      	subs	r3, r6, r3
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	3332      	adds	r3, #50	; 0x32
 8002908:	4a1b      	ldr	r2, [pc, #108]	; (8002978 <UART_SetConfig+0x350>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002914:	441d      	add	r5, r3
 8002916:	f7fe fa53 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 800291a:	4602      	mov	r2, r0
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	009a      	lsls	r2, r3, #2
 8002924:	441a      	add	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	fbb2 f6f3 	udiv	r6, r2, r3
 8002930:	f7fe fa46 	bl	8000dc0 <HAL_RCC_GetPCLK2Freq>
 8002934:	4602      	mov	r2, r0
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	009a      	lsls	r2, r3, #2
 800293e:	441a      	add	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	fbb2 f3f3 	udiv	r3, r2, r3
 800294a:	4a0b      	ldr	r2, [pc, #44]	; (8002978 <UART_SetConfig+0x350>)
 800294c:	fba2 2303 	umull	r2, r3, r2, r3
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	2264      	movs	r2, #100	; 0x64
 8002954:	fb02 f303 	mul.w	r3, r2, r3
 8002958:	1af3      	subs	r3, r6, r3
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	3332      	adds	r3, #50	; 0x32
 800295e:	4a06      	ldr	r2, [pc, #24]	; (8002978 <UART_SetConfig+0x350>)
 8002960:	fba2 2303 	umull	r2, r3, r2, r3
 8002964:	095b      	lsrs	r3, r3, #5
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	442b      	add	r3, r5
 800296c:	60a3      	str	r3, [r4, #8]
 800296e:	e071      	b.n	8002a54 <UART_SetConfig+0x42c>
 8002970:	40011000 	.word	0x40011000
 8002974:	40011400 	.word	0x40011400
 8002978:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681c      	ldr	r4, [r3, #0]
 8002980:	f7fe fa0a 	bl	8000d98 <HAL_RCC_GetPCLK1Freq>
 8002984:	4602      	mov	r2, r0
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	009a      	lsls	r2, r3, #2
 800298e:	441a      	add	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	fbb2 f3f3 	udiv	r3, r2, r3
 800299a:	4a30      	ldr	r2, [pc, #192]	; (8002a5c <UART_SetConfig+0x434>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	011d      	lsls	r5, r3, #4
 80029a4:	f7fe f9f8 	bl	8000d98 <HAL_RCC_GetPCLK1Freq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	009a      	lsls	r2, r3, #2
 80029b2:	441a      	add	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	fbb2 f6f3 	udiv	r6, r2, r3
 80029be:	f7fe f9eb 	bl	8000d98 <HAL_RCC_GetPCLK1Freq>
 80029c2:	4602      	mov	r2, r0
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	009a      	lsls	r2, r3, #2
 80029cc:	441a      	add	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d8:	4a20      	ldr	r2, [pc, #128]	; (8002a5c <UART_SetConfig+0x434>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	2264      	movs	r2, #100	; 0x64
 80029e2:	fb02 f303 	mul.w	r3, r2, r3
 80029e6:	1af3      	subs	r3, r6, r3
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	3332      	adds	r3, #50	; 0x32
 80029ec:	4a1b      	ldr	r2, [pc, #108]	; (8002a5c <UART_SetConfig+0x434>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029f8:	441d      	add	r5, r3
 80029fa:	f7fe f9cd 	bl	8000d98 <HAL_RCC_GetPCLK1Freq>
 80029fe:	4602      	mov	r2, r0
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	009a      	lsls	r2, r3, #2
 8002a08:	441a      	add	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	fbb2 f6f3 	udiv	r6, r2, r3
 8002a14:	f7fe f9c0 	bl	8000d98 <HAL_RCC_GetPCLK1Freq>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	009a      	lsls	r2, r3, #2
 8002a22:	441a      	add	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2e:	4a0b      	ldr	r2, [pc, #44]	; (8002a5c <UART_SetConfig+0x434>)
 8002a30:	fba2 2303 	umull	r2, r3, r2, r3
 8002a34:	095b      	lsrs	r3, r3, #5
 8002a36:	2264      	movs	r2, #100	; 0x64
 8002a38:	fb02 f303 	mul.w	r3, r2, r3
 8002a3c:	1af3      	subs	r3, r6, r3
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	3332      	adds	r3, #50	; 0x32
 8002a42:	4a06      	ldr	r2, [pc, #24]	; (8002a5c <UART_SetConfig+0x434>)
 8002a44:	fba2 2303 	umull	r2, r3, r2, r3
 8002a48:	095b      	lsrs	r3, r3, #5
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	442b      	add	r3, r5
 8002a50:	60a3      	str	r3, [r4, #8]
}
 8002a52:	e7ff      	b.n	8002a54 <UART_SetConfig+0x42c>
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a5c:	51eb851f 	.word	0x51eb851f

08002a60 <app_run>:
-   Returns:
-     void 
-   Description:
-    	Our main loop for the application code.
-----------------------------------------------------------------------*/
void app_run(void) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b094      	sub	sp, #80	; 0x50
 8002a64:	af00      	add	r7, sp, #0
	char encoder_data[64];
	motors_init();
 8002a66:	f000 f83f 	bl	8002ae8 <motors_init>
	float pwm_val = .5;
 8002a6a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
	direction_t change_dir = FORWARD;
 8002a70:	2301      	movs	r3, #1
 8002a72:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	set_mtr_pwm(MTR1, pwm_val);
 8002a76:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f000 f8de 	bl	8002c3c <set_mtr_pwm>
	set_mtr_dir(MTR1, change_dir);
 8002a80:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002a84:	4619      	mov	r1, r3
 8002a86:	2000      	movs	r0, #0
 8002a88:	f000 f8ac 	bl	8002be4 <set_mtr_dir>

	pwm_on_off(MTR_ALL, MTR_ON);
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	2004      	movs	r0, #4
 8002a90:	f000 f972 	bl	8002d78 <pwm_on_off>
	encoder_on_off(MTR_ALL, MTR_ON);
 8002a94:	2101      	movs	r1, #1
 8002a96:	2004      	movs	r0, #4
 8002a98:	f000 f993 	bl	8002dc2 <encoder_on_off>



	while (1) {
		float speed = get_mtr_velocity(MTR1);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f000 f8ba 	bl	8002c16 <get_mtr_velocity>
 8002aa2:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
		HAL_UART_Transmit(&huart2, (uint8_t*)encoder_data, strlen(encoder_data), 0xFFFF);
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fbab 	bl	8000204 <strlen>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	1d39      	adds	r1, r7, #4
 8002ab4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ab8:	4807      	ldr	r0, [pc, #28]	; (8002ad8 <app_run+0x78>)
 8002aba:	f7ff fcd3 	bl	8002464 <HAL_UART_Transmit>
		set_mtr_dir(MTR1, change_dir);
 8002abe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	f000 f88d 	bl	8002be4 <set_mtr_dir>
		set_mtr_pwm(MTR1, pwm_val);
 8002aca:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f000 f8b4 	bl	8002c3c <set_mtr_pwm>
	while (1) {
 8002ad4:	e7e2      	b.n	8002a9c <app_run+0x3c>
 8002ad6:	bf00      	nop
 8002ad8:	20000290 	.word	0x20000290

08002adc <HAL_SYSTICK_Callback>:
}

/*-----------------------------------------------------------------------
- Private Functions
-----------------------------------------------------------------------*/
void HAL_SYSTICK_Callback(void) {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
	// Called every 1 ms, use this as time base for updating motor velocity
	mtr_1ms_timeout();
 8002ae0:	f000 f994 	bl	8002e0c <mtr_1ms_timeout>
}
 8002ae4:	bf00      	nop
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <motors_init>:
-----------------------------------------------------------------------*/

/*-----------------------------------------------------------------------
- Public Functions
-----------------------------------------------------------------------*/
void motors_init(void) {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
	memset(&motor_1, 0, sizeof(motor_t));
 8002aec:	2220      	movs	r2, #32
 8002aee:	2100      	movs	r1, #0
 8002af0:	482e      	ldr	r0, [pc, #184]	; (8002bac <motors_init+0xc4>)
 8002af2:	f001 f89b 	bl	8003c2c <memset>
	motor_1.dir_ctrl.gpio_port = MTR1_DIR_GPIO_Port;
 8002af6:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <motors_init+0xc4>)
 8002af8:	4a2d      	ldr	r2, [pc, #180]	; (8002bb0 <motors_init+0xc8>)
 8002afa:	601a      	str	r2, [r3, #0]
	motor_1.dir_ctrl.gpio_pin  = MTR1_DIR_Pin;
 8002afc:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <motors_init+0xc4>)
 8002afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b02:	809a      	strh	r2, [r3, #4]
	motor_1.position.hencoder = &htim4;
 8002b04:	4b29      	ldr	r3, [pc, #164]	; (8002bac <motors_init+0xc4>)
 8002b06:	4a2b      	ldr	r2, [pc, #172]	; (8002bb4 <motors_init+0xcc>)
 8002b08:	611a      	str	r2, [r3, #16]
	motor_3.position.channel = TIM_CHANNEL_1;
 8002b0a:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <motors_init+0xd0>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	61da      	str	r2, [r3, #28]
	motor_1.pwm.hpwm = &htim10;
 8002b10:	4b26      	ldr	r3, [pc, #152]	; (8002bac <motors_init+0xc4>)
 8002b12:	4a2a      	ldr	r2, [pc, #168]	; (8002bbc <motors_init+0xd4>)
 8002b14:	609a      	str	r2, [r3, #8]
	motor_1.pwm.channel = TIM_CHANNEL_1;
 8002b16:	4b25      	ldr	r3, [pc, #148]	; (8002bac <motors_init+0xc4>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	60da      	str	r2, [r3, #12]

	memset(&motor_2, 0, sizeof(motor_2));
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4827      	ldr	r0, [pc, #156]	; (8002bc0 <motors_init+0xd8>)
 8002b22:	f001 f883 	bl	8003c2c <memset>
	motor_2.dir_ctrl.gpio_port = MTR2_DIR_GPIO_Port;
 8002b26:	4b26      	ldr	r3, [pc, #152]	; (8002bc0 <motors_init+0xd8>)
 8002b28:	4a26      	ldr	r2, [pc, #152]	; (8002bc4 <motors_init+0xdc>)
 8002b2a:	601a      	str	r2, [r3, #0]
	motor_2.dir_ctrl.gpio_pin  = MTR2_DIR_Pin;
 8002b2c:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <motors_init+0xd8>)
 8002b2e:	2220      	movs	r2, #32
 8002b30:	809a      	strh	r2, [r3, #4]
	motor_2.position.hencoder = &htim3;
 8002b32:	4b23      	ldr	r3, [pc, #140]	; (8002bc0 <motors_init+0xd8>)
 8002b34:	4a24      	ldr	r2, [pc, #144]	; (8002bc8 <motors_init+0xe0>)
 8002b36:	611a      	str	r2, [r3, #16]
	motor_2.position.channel = TIM_CHANNEL_2;
 8002b38:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <motors_init+0xd8>)
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	61da      	str	r2, [r3, #28]
	motor_2.pwm.hpwm = &htim5;
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <motors_init+0xd8>)
 8002b40:	4a22      	ldr	r2, [pc, #136]	; (8002bcc <motors_init+0xe4>)
 8002b42:	609a      	str	r2, [r3, #8]
	motor_2.pwm.channel = TIM_CHANNEL_2;
 8002b44:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <motors_init+0xd8>)
 8002b46:	2204      	movs	r2, #4
 8002b48:	60da      	str	r2, [r3, #12]

	memset(&motor_3, 0, sizeof(motor_t));
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	481a      	ldr	r0, [pc, #104]	; (8002bb8 <motors_init+0xd0>)
 8002b50:	f001 f86c 	bl	8003c2c <memset>
	motor_3.dir_ctrl.gpio_port = MTR2_DIR_GPIO_Port;
 8002b54:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <motors_init+0xd0>)
 8002b56:	4a1b      	ldr	r2, [pc, #108]	; (8002bc4 <motors_init+0xdc>)
 8002b58:	601a      	str	r2, [r3, #0]
	motor_3.dir_ctrl.gpio_pin  = MTR2_DIR_Pin;
 8002b5a:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <motors_init+0xd0>)
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	809a      	strh	r2, [r3, #4]
	motor_3.position.hencoder = &htim8;
 8002b60:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <motors_init+0xd0>)
 8002b62:	4a1b      	ldr	r2, [pc, #108]	; (8002bd0 <motors_init+0xe8>)
 8002b64:	611a      	str	r2, [r3, #16]
	motor_3.position.channel = TIM_CHANNEL_2;
 8002b66:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <motors_init+0xd0>)
 8002b68:	2204      	movs	r2, #4
 8002b6a:	61da      	str	r2, [r3, #28]
	motor_3.pwm.hpwm = &htim2;
 8002b6c:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <motors_init+0xd0>)
 8002b6e:	4a19      	ldr	r2, [pc, #100]	; (8002bd4 <motors_init+0xec>)
 8002b70:	609a      	str	r2, [r3, #8]
	motor_3.pwm.channel = TIM_CHANNEL_4;
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <motors_init+0xd0>)
 8002b74:	220c      	movs	r2, #12
 8002b76:	60da      	str	r2, [r3, #12]

	memset(&motor_4, 0, sizeof(motor_t));
 8002b78:	2220      	movs	r2, #32
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4816      	ldr	r0, [pc, #88]	; (8002bd8 <motors_init+0xf0>)
 8002b7e:	f001 f855 	bl	8003c2c <memset>
	motor_4.dir_ctrl.gpio_port = MTR2_DIR_GPIO_Port;
 8002b82:	4b15      	ldr	r3, [pc, #84]	; (8002bd8 <motors_init+0xf0>)
 8002b84:	4a0f      	ldr	r2, [pc, #60]	; (8002bc4 <motors_init+0xdc>)
 8002b86:	601a      	str	r2, [r3, #0]
	motor_4.dir_ctrl.gpio_pin  = MTR2_DIR_Pin;
 8002b88:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <motors_init+0xf0>)
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	809a      	strh	r2, [r3, #4]
	motor_4.position.hencoder = &htim1;
 8002b8e:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <motors_init+0xf0>)
 8002b90:	4a12      	ldr	r2, [pc, #72]	; (8002bdc <motors_init+0xf4>)
 8002b92:	611a      	str	r2, [r3, #16]
	motor_4.position.channel = TIM_CHANNEL_2;
 8002b94:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <motors_init+0xf0>)
 8002b96:	2204      	movs	r2, #4
 8002b98:	61da      	str	r2, [r3, #28]
	motor_4.pwm.hpwm = &htim12;
 8002b9a:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <motors_init+0xf0>)
 8002b9c:	4a10      	ldr	r2, [pc, #64]	; (8002be0 <motors_init+0xf8>)
 8002b9e:	609a      	str	r2, [r3, #8]
	motor_4.pwm.channel = TIM_CHANNEL_2;
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <motors_init+0xf0>)
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	60da      	str	r2, [r3, #12]
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000028 	.word	0x20000028
 8002bb0:	40020400 	.word	0x40020400
 8002bb4:	200000ec 	.word	0x200000ec
 8002bb8:	20000068 	.word	0x20000068
 8002bbc:	20000128 	.word	0x20000128
 8002bc0:	20000048 	.word	0x20000048
 8002bc4:	40020000 	.word	0x40020000
 8002bc8:	200001a0 	.word	0x200001a0
 8002bcc:	20000164 	.word	0x20000164
 8002bd0:	200000b0 	.word	0x200000b0
 8002bd4:	20000218 	.word	0x20000218
 8002bd8:	20000088 	.word	0x20000088
 8002bdc:	200001dc 	.word	0x200001dc
 8002be0:	20000254 	.word	0x20000254

08002be4 <set_mtr_dir>:

void set_mtr_dir(mtr_id_t mtr_id, direction_t dir) {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	460a      	mov	r2, r1
 8002bee:	71fb      	strb	r3, [r7, #7]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	71bb      	strb	r3, [r7, #6]
	motor_t * motor = get_mtr(mtr_id);
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 f926 	bl	8002e48 <get_mtr>
 8002bfc:	60f8      	str	r0, [r7, #12]
	HAL_GPIO_WritePin(motor->dir_ctrl.gpio_port, motor->dir_ctrl.gpio_pin, dir);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	889b      	ldrh	r3, [r3, #4]
 8002c06:	79ba      	ldrb	r2, [r7, #6]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f7fd ffbd 	bl	8000b88 <HAL_GPIO_WritePin>
}
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <get_mtr_velocity>:

uint16_t get_mtr_cnt(mtr_id_t mtr_id) {
	return (uint16_t) get_mtr(mtr_id)->position.hencoder->Instance->CNT;
}

float get_mtr_velocity(mtr_id_t mtr_id) {
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	71fb      	strb	r3, [r7, #7]
	return get_mtr(mtr_id)->position.velocity;
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 f910 	bl	8002e48 <get_mtr>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	ee07 3a90 	vmov	s15, r3
}
 8002c30:	eeb0 0a67 	vmov.f32	s0, s15
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <set_mtr_pwm>:

void set_mtr_pwm(mtr_id_t mtr_id, float pwm) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	ed87 0a00 	vstr	s0, [r7]
 8002c48:	71fb      	strb	r3, [r7, #7]
	motor_t * motor = get_mtr(mtr_id);
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 f8fb 	bl	8002e48 <get_mtr>
 8002c52:	60f8      	str	r0, [r7, #12]

	if (pwm < 0) {
 8002c54:	edd7 7a00 	vldr	s15, [r7]
 8002c58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c60:	d503      	bpl.n	8002c6a <set_mtr_pwm+0x2e>
		pwm = 0;
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	e00b      	b.n	8002c82 <set_mtr_pwm+0x46>
	}
	else if (pwm > 1.0) {
 8002c6a:	edd7 7a00 	vldr	s15, [r7]
 8002c6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7a:	dd02      	ble.n	8002c82 <set_mtr_pwm+0x46>
		pwm = 1;
 8002c7c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c80:	603b      	str	r3, [r7, #0]
	}

	switch (motor->pwm.channel) {
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	d870      	bhi.n	8002d6c <set_mtr_pwm+0x130>
 8002c8a:	a201      	add	r2, pc, #4	; (adr r2, 8002c90 <set_mtr_pwm+0x54>)
 8002c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c90:	08002cc5 	.word	0x08002cc5
 8002c94:	08002d6d 	.word	0x08002d6d
 8002c98:	08002d6d 	.word	0x08002d6d
 8002c9c:	08002d6d 	.word	0x08002d6d
 8002ca0:	08002cef 	.word	0x08002cef
 8002ca4:	08002d6d 	.word	0x08002d6d
 8002ca8:	08002d6d 	.word	0x08002d6d
 8002cac:	08002d6d 	.word	0x08002d6d
 8002cb0:	08002d19 	.word	0x08002d19
 8002cb4:	08002d6d 	.word	0x08002d6d
 8002cb8:	08002d6d 	.word	0x08002d6d
 8002cbc:	08002d6d 	.word	0x08002d6d
 8002cc0:	08002d43 	.word	0x08002d43
	case TIM_CHANNEL_1: {
		motor->pwm.hpwm->Instance->CCR1 = motor->pwm.hpwm->Instance->ARR * pwm;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	6892      	ldr	r2, [r2, #8]
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cd2:	ee07 2a90 	vmov	s15, r2
 8002cd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cda:	edd7 7a00 	vldr	s15, [r7]
 8002cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ce6:	ee17 2a90 	vmov	r2, s15
 8002cea:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8002cec:	e03f      	b.n	8002d6e <set_mtr_pwm+0x132>
	}
	case TIM_CHANNEL_2: {
		motor->pwm.hpwm->Instance->CCR2 = motor->pwm.hpwm->Instance->ARR * pwm;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	6892      	ldr	r2, [r2, #8]
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cfc:	ee07 2a90 	vmov	s15, r2
 8002d00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d04:	edd7 7a00 	vldr	s15, [r7]
 8002d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d10:	ee17 2a90 	vmov	r2, s15
 8002d14:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8002d16:	e02a      	b.n	8002d6e <set_mtr_pwm+0x132>
	}
	case TIM_CHANNEL_3: {
		motor->pwm.hpwm->Instance->CCR3 = motor->pwm.hpwm->Instance->ARR * pwm;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	6892      	ldr	r2, [r2, #8]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d26:	ee07 2a90 	vmov	s15, r2
 8002d2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d2e:	edd7 7a00 	vldr	s15, [r7]
 8002d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d3a:	ee17 2a90 	vmov	r2, s15
 8002d3e:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8002d40:	e015      	b.n	8002d6e <set_mtr_pwm+0x132>
	}
	case TIM_CHANNEL_4: {
		motor->pwm.hpwm->Instance->CCR4 = motor->pwm.hpwm->Instance->ARR * pwm;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	6892      	ldr	r2, [r2, #8]
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d50:	ee07 2a90 	vmov	s15, r2
 8002d54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d58:	edd7 7a00 	vldr	s15, [r7]
 8002d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d64:	ee17 2a90 	vmov	r2, s15
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002d6a:	e000      	b.n	8002d6e <set_mtr_pwm+0x132>
	}
	default:
		break;
 8002d6c:	bf00      	nop
	}
}
 8002d6e:	bf00      	nop
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop

08002d78 <pwm_on_off>:

void pwm_on_off(mtr_id_t mtr_id, mtr_status_t mtr_status) {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	460a      	mov	r2, r1
 8002d82:	71fb      	strb	r3, [r7, #7]
 8002d84:	4613      	mov	r3, r2
 8002d86:	71bb      	strb	r3, [r7, #6]
	if (mtr_id == MTR_ALL) {
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d10f      	bne.n	8002dae <pwm_on_off+0x36>
		for (uint8_t i = 0; i < MTR_ALL; i++) {
 8002d8e:	2300      	movs	r3, #0
 8002d90:	73fb      	strb	r3, [r7, #15]
 8002d92:	e008      	b.n	8002da6 <pwm_on_off+0x2e>
			pwm_on_off_helper(MTR1 + i, mtr_status);
 8002d94:	79ba      	ldrb	r2, [r7, #6]
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 f8a8 	bl	8002ef0 <pwm_on_off_helper>
		for (uint8_t i = 0; i < MTR_ALL; i++) {
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	3301      	adds	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d9f3      	bls.n	8002d94 <pwm_on_off+0x1c>
		}
	}
	else {
		pwm_on_off_helper(mtr_id, mtr_status);
	}
}
 8002dac:	e005      	b.n	8002dba <pwm_on_off+0x42>
		pwm_on_off_helper(mtr_id, mtr_status);
 8002dae:	79ba      	ldrb	r2, [r7, #6]
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	4611      	mov	r1, r2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 f89b 	bl	8002ef0 <pwm_on_off_helper>
}
 8002dba:	bf00      	nop
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <encoder_on_off>:

void encoder_on_off(mtr_id_t mtr_id, mtr_status_t mtr_status) {
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	4603      	mov	r3, r0
 8002dca:	460a      	mov	r2, r1
 8002dcc:	71fb      	strb	r3, [r7, #7]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	71bb      	strb	r3, [r7, #6]
	if (mtr_id == MTR_ALL) {
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d10f      	bne.n	8002df8 <encoder_on_off+0x36>
		for (uint8_t i = 0; i < MTR_ALL; i++) {
 8002dd8:	2300      	movs	r3, #0
 8002dda:	73fb      	strb	r3, [r7, #15]
 8002ddc:	e008      	b.n	8002df0 <encoder_on_off+0x2e>
			encoder_on_off_helper(MTR1 + i, mtr_status);
 8002dde:	79ba      	ldrb	r2, [r7, #6]
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	4611      	mov	r1, r2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 f8ab 	bl	8002f40 <encoder_on_off_helper>
		for (uint8_t i = 0; i < MTR_ALL; i++) {
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	3301      	adds	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d9f3      	bls.n	8002dde <encoder_on_off+0x1c>
		}
	}
	else {
		encoder_on_off_helper(mtr_id, mtr_status);
	}
}
 8002df6:	e005      	b.n	8002e04 <encoder_on_off+0x42>
		encoder_on_off_helper(mtr_id, mtr_status);
 8002df8:	79ba      	ldrb	r2, [r7, #6]
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 f89e 	bl	8002f40 <encoder_on_off_helper>
}
 8002e04:	bf00      	nop
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <mtr_1ms_timeout>:

void mtr_1ms_timeout(void) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
	static uint16_t time_passed = 0;

	if (time_passed++ == MTR_VELOCITY_TIMESCALE) {
 8002e12:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <mtr_1ms_timeout+0x38>)
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	b291      	uxth	r1, r2
 8002e1a:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <mtr_1ms_timeout+0x38>)
 8002e1c:	8011      	strh	r1, [r2, #0]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d10c      	bne.n	8002e3c <mtr_1ms_timeout+0x30>
		for (uint8_t i = 0; i < MTR_ALL; i++) {
 8002e22:	2300      	movs	r3, #0
 8002e24:	71fb      	strb	r3, [r7, #7]
 8002e26:	e006      	b.n	8002e36 <mtr_1ms_timeout+0x2a>
			update_mtr_velocity(i);
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 f82e 	bl	8002e8c <update_mtr_velocity>
		for (uint8_t i = 0; i < MTR_ALL; i++) {
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	3301      	adds	r3, #1
 8002e34:	71fb      	strb	r3, [r7, #7]
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d9f5      	bls.n	8002e28 <mtr_1ms_timeout+0x1c>
		}
	}
}
 8002e3c:	bf00      	nop
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	200000a8 	.word	0x200000a8

08002e48 <get_mtr>:

/*-----------------------------------------------------------------------
- Private Functions
-----------------------------------------------------------------------*/
static motor_t * get_mtr(mtr_id_t mtr_id) {
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
	switch (mtr_id) {
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d005      	beq.n	8002e64 <get_mtr+0x1c>
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d005      	beq.n	8002e68 <get_mtr+0x20>
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d105      	bne.n	8002e6c <get_mtr+0x24>
	case MTR1:
		return &motor_1;
 8002e60:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <get_mtr+0x34>)
 8002e62:	e004      	b.n	8002e6e <get_mtr+0x26>
	case MTR2:
		return &motor_2;
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <get_mtr+0x38>)
 8002e66:	e002      	b.n	8002e6e <get_mtr+0x26>
	case MTR3:
		return &motor_3;
 8002e68:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <get_mtr+0x3c>)
 8002e6a:	e000      	b.n	8002e6e <get_mtr+0x26>
	case MTR4:
	default:
		return &motor_4;
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <get_mtr+0x40>)
	}
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	20000028 	.word	0x20000028
 8002e80:	20000048 	.word	0x20000048
 8002e84:	20000068 	.word	0x20000068
 8002e88:	20000088 	.word	0x20000088

08002e8c <update_mtr_velocity>:

static void update_mtr_velocity(mtr_id_t mtr_id) {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	71fb      	strb	r3, [r7, #7]
	motor_t * motor = get_mtr(mtr_id);
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ffd5 	bl	8002e48 <get_mtr>
 8002e9e:	6178      	str	r0, [r7, #20]
	int16_t change_in_encoder = motor->position.hencoder->Instance->CNT - motor->position.prev_encoder_cnt;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	827b      	strh	r3, [r7, #18]
	float percent_circum_moved = ENCODER_TICKS_PER_REV / change_in_encoder;
 8002eb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002eba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ebe:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ec2:	b21b      	sxth	r3, r3
 8002ec4:	ee07 3a90 	vmov	s15, r3
 8002ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ecc:	edc7 7a03 	vstr	s15, [r7, #12]
	motor->position.velocity = (percent_circum_moved * WHEEL_CIRCUMFERENCE) / MTR_VELOCITY_TIMESCALE;
 8002ed0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ed4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002eec <update_mtr_velocity+0x60>
 8002ed8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8002ee2:	bf00      	nop
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	3dcccccd 	.word	0x3dcccccd

08002ef0 <pwm_on_off_helper>:

static void pwm_on_off_helper(mtr_id_t mtr_id, mtr_status_t mtr_status) {
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	460a      	mov	r2, r1
 8002efa:	71fb      	strb	r3, [r7, #7]
 8002efc:	4613      	mov	r3, r2
 8002efe:	71bb      	strb	r3, [r7, #6]
	motor_t * mtr = get_mtr(mtr_id);
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff ffa0 	bl	8002e48 <get_mtr>
 8002f08:	60f8      	str	r0, [r7, #12]
	if (mtr_status == MTR_OFF) {
 8002f0a:	79bb      	ldrb	r3, [r7, #6]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d108      	bne.n	8002f22 <pwm_on_off_helper+0x32>
		HAL_TIM_PWM_Stop(mtr->pwm.hpwm, mtr->pwm.channel);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	f7fe fbfe 	bl	800171c <HAL_TIM_PWM_Stop>
	}
	else if (mtr_status == MTR_ON) {
		HAL_TIM_PWM_Start(mtr->pwm.hpwm, mtr->pwm.channel);
	}
}
 8002f20:	e00a      	b.n	8002f38 <pwm_on_off_helper+0x48>
	else if (mtr_status == MTR_ON) {
 8002f22:	79bb      	ldrb	r3, [r7, #6]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d107      	bne.n	8002f38 <pwm_on_off_helper+0x48>
		HAL_TIM_PWM_Start(mtr->pwm.hpwm, mtr->pwm.channel);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	4619      	mov	r1, r3
 8002f32:	4610      	mov	r0, r2
 8002f34:	f7fe fbbe 	bl	80016b4 <HAL_TIM_PWM_Start>
}
 8002f38:	bf00      	nop
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <encoder_on_off_helper>:

static void encoder_on_off_helper(mtr_id_t mtr_id, mtr_status_t mtr_status) {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	460a      	mov	r2, r1
 8002f4a:	71fb      	strb	r3, [r7, #7]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	71bb      	strb	r3, [r7, #6]
	motor_t * mtr = get_mtr(mtr_id);
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff ff78 	bl	8002e48 <get_mtr>
 8002f58:	60f8      	str	r0, [r7, #12]
	if (mtr_status == MTR_OFF) {
 8002f5a:	79bb      	ldrb	r3, [r7, #6]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d108      	bne.n	8002f72 <encoder_on_off_helper+0x32>
		HAL_TIM_Encoder_Stop(mtr->position.hencoder, mtr->position.channel);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	f7fe fcfb 	bl	8001966 <HAL_TIM_Encoder_Stop>
	}
	else if (mtr_status == MTR_ON) {
		HAL_TIM_Encoder_Start(mtr->position.hencoder, mtr->position.channel);
	}
}
 8002f70:	e00a      	b.n	8002f88 <encoder_on_off_helper+0x48>
	else if (mtr_status == MTR_ON) {
 8002f72:	79bb      	ldrb	r3, [r7, #6]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d107      	bne.n	8002f88 <encoder_on_off_helper+0x48>
		HAL_TIM_Encoder_Start(mtr->position.hencoder, mtr->position.channel);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	4619      	mov	r1, r3
 8002f82:	4610      	mov	r0, r2
 8002f84:	f7fe fcb8 	bl	80018f8 <HAL_TIM_Encoder_Start>
}
 8002f88:	bf00      	nop
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08a      	sub	sp, #40	; 0x28
 8002f94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	4a3b      	ldr	r2, [pc, #236]	; (8003088 <MX_GPIO_Init+0xf8>)
 8002f9c:	4b3a      	ldr	r3, [pc, #232]	; (8003088 <MX_GPIO_Init+0xf8>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa6:	4b38      	ldr	r3, [pc, #224]	; (8003088 <MX_GPIO_Init+0xf8>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	4a34      	ldr	r2, [pc, #208]	; (8003088 <MX_GPIO_Init+0xf8>)
 8002fb8:	4b33      	ldr	r3, [pc, #204]	; (8003088 <MX_GPIO_Init+0xf8>)
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc2:	4b31      	ldr	r3, [pc, #196]	; (8003088 <MX_GPIO_Init+0xf8>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	4a2d      	ldr	r2, [pc, #180]	; (8003088 <MX_GPIO_Init+0xf8>)
 8002fd4:	4b2c      	ldr	r3, [pc, #176]	; (8003088 <MX_GPIO_Init+0xf8>)
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	f043 0302 	orr.w	r3, r3, #2
 8002fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fde:	4b2a      	ldr	r3, [pc, #168]	; (8003088 <MX_GPIO_Init+0xf8>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	60bb      	str	r3, [r7, #8]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	4a26      	ldr	r2, [pc, #152]	; (8003088 <MX_GPIO_Init+0xf8>)
 8002ff0:	4b25      	ldr	r3, [pc, #148]	; (8003088 <MX_GPIO_Init+0xf8>)
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	f043 0304 	orr.w	r3, r3, #4
 8002ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffa:	4b23      	ldr	r3, [pc, #140]	; (8003088 <MX_GPIO_Init+0xf8>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	607b      	str	r3, [r7, #4]
 8003004:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MTR2_DIR_GPIO_Port, MTR2_DIR_Pin, GPIO_PIN_RESET);
 8003006:	2200      	movs	r2, #0
 8003008:	2120      	movs	r1, #32
 800300a:	4820      	ldr	r0, [pc, #128]	; (800308c <MX_GPIO_Init+0xfc>)
 800300c:	f7fd fdbc 	bl	8000b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MTR3_DIR_Pin|MTR1_DIR_Pin, GPIO_PIN_RESET);
 8003010:	2200      	movs	r2, #0
 8003012:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 8003016:	481e      	ldr	r0, [pc, #120]	; (8003090 <MX_GPIO_Init+0x100>)
 8003018:	f7fd fdb6 	bl	8000b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MTR4_DIR_GPIO_Port, MTR4_DIR_Pin, GPIO_PIN_RESET);
 800301c:	2200      	movs	r2, #0
 800301e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003022:	481c      	ldr	r0, [pc, #112]	; (8003094 <MX_GPIO_Init+0x104>)
 8003024:	f7fd fdb0 	bl	8000b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MTR2_DIR_Pin;
 8003028:	2320      	movs	r3, #32
 800302a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800302c:	2301      	movs	r3, #1
 800302e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2300      	movs	r3, #0
 8003032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003034:	2300      	movs	r3, #0
 8003036:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MTR2_DIR_GPIO_Port, &GPIO_InitStruct);
 8003038:	f107 0314 	add.w	r3, r7, #20
 800303c:	4619      	mov	r1, r3
 800303e:	4813      	ldr	r0, [pc, #76]	; (800308c <MX_GPIO_Init+0xfc>)
 8003040:	f7fd fc10 	bl	8000864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MTR3_DIR_Pin|MTR1_DIR_Pin;
 8003044:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8003048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800304a:	2301      	movs	r3, #1
 800304c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003052:	2300      	movs	r3, #0
 8003054:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003056:	f107 0314 	add.w	r3, r7, #20
 800305a:	4619      	mov	r1, r3
 800305c:	480c      	ldr	r0, [pc, #48]	; (8003090 <MX_GPIO_Init+0x100>)
 800305e:	f7fd fc01 	bl	8000864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MTR4_DIR_Pin;
 8003062:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003068:	2301      	movs	r3, #1
 800306a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306c:	2300      	movs	r3, #0
 800306e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003070:	2300      	movs	r3, #0
 8003072:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MTR4_DIR_GPIO_Port, &GPIO_InitStruct);
 8003074:	f107 0314 	add.w	r3, r7, #20
 8003078:	4619      	mov	r1, r3
 800307a:	4806      	ldr	r0, [pc, #24]	; (8003094 <MX_GPIO_Init+0x104>)
 800307c:	f7fd fbf2 	bl	8000864 <HAL_GPIO_Init>

}
 8003080:	bf00      	nop
 8003082:	3728      	adds	r7, #40	; 0x28
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40023800 	.word	0x40023800
 800308c:	40020000 	.word	0x40020000
 8003090:	40020400 	.word	0x40020400
 8003094:	40020800 	.word	0x40020800

08003098 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800309c:	f7fd fa42 	bl	8000524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030a0:	f000 f818 	bl	80030d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030a4:	f7ff ff74 	bl	8002f90 <MX_GPIO_Init>
  MX_TIM1_Init();
 80030a8:	f000 f918 	bl	80032dc <MX_TIM1_Init>
  MX_TIM3_Init();
 80030ac:	f000 f9b6 	bl	800341c <MX_TIM3_Init>
  MX_TIM4_Init();
 80030b0:	f000 fa00 	bl	80034b4 <MX_TIM4_Init>
  MX_TIM8_Init();
 80030b4:	f000 fa9a 	bl	80035ec <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80030b8:	f000 fd0a 	bl	8003ad0 <MX_USART2_UART_Init>
//  MX_CAN1_Init();
  MX_TIM2_Init();
 80030bc:	f000 f95e 	bl	800337c <MX_TIM2_Init>
  MX_TIM5_Init();
 80030c0:	f000 fa44 	bl	800354c <MX_TIM5_Init>
  MX_TIM10_Init();
 80030c4:	f000 fae2 	bl	800368c <MX_TIM10_Init>
  MX_TIM12_Init();
 80030c8:	f000 fb2e 	bl	8003728 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  /** Don't want to write code in this mess, run in application.c **/
  app_run();
 80030cc:	f7ff fcc8 	bl	8002a60 <app_run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80030d0:	e7fe      	b.n	80030d0 <main+0x38>
	...

080030d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b094      	sub	sp, #80	; 0x50
 80030d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	4a36      	ldr	r2, [pc, #216]	; (80031b8 <SystemClock_Config+0xe4>)
 80030e0:	4b35      	ldr	r3, [pc, #212]	; (80031b8 <SystemClock_Config+0xe4>)
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ea:	4b33      	ldr	r3, [pc, #204]	; (80031b8 <SystemClock_Config+0xe4>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	607b      	str	r3, [r7, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80030f6:	2300      	movs	r3, #0
 80030f8:	603b      	str	r3, [r7, #0]
 80030fa:	4a30      	ldr	r2, [pc, #192]	; (80031bc <SystemClock_Config+0xe8>)
 80030fc:	4b2f      	ldr	r3, [pc, #188]	; (80031bc <SystemClock_Config+0xe8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b2c      	ldr	r3, [pc, #176]	; (80031bc <SystemClock_Config+0xe8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003116:	2302      	movs	r3, #2
 8003118:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800311a:	2301      	movs	r3, #1
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800311e:	2310      	movs	r3, #16
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003122:	2302      	movs	r3, #2
 8003124:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003126:	2300      	movs	r3, #0
 8003128:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800312a:	2310      	movs	r3, #16
 800312c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800312e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003132:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003134:	2304      	movs	r3, #4
 8003136:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003138:	2302      	movs	r3, #2
 800313a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800313c:	2302      	movs	r3, #2
 800313e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003140:	f107 031c 	add.w	r3, r7, #28
 8003144:	4618      	mov	r0, r3
 8003146:	f7fe f805 	bl	8001154 <HAL_RCC_OscConfig>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <SystemClock_Config+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003150:	21a0      	movs	r1, #160	; 0xa0
 8003152:	481b      	ldr	r0, [pc, #108]	; (80031c0 <SystemClock_Config+0xec>)
 8003154:	f000 f838 	bl	80031c8 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003158:	230f      	movs	r3, #15
 800315a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800315c:	2302      	movs	r3, #2
 800315e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003160:	2300      	movs	r3, #0
 8003162:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003168:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800316a:	2300      	movs	r3, #0
 800316c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800316e:	f107 0308 	add.w	r3, r7, #8
 8003172:	2102      	movs	r1, #2
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd fd21 	bl	8000bbc <HAL_RCC_ClockConfig>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <SystemClock_Config+0xb4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003180:	21ae      	movs	r1, #174	; 0xae
 8003182:	480f      	ldr	r0, [pc, #60]	; (80031c0 <SystemClock_Config+0xec>)
 8003184:	f000 f820 	bl	80031c8 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003188:	f7fd fdfa 	bl	8000d80 <HAL_RCC_GetHCLKFreq>
 800318c:	4602      	mov	r2, r0
 800318e:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <SystemClock_Config+0xf0>)
 8003190:	fba3 2302 	umull	r2, r3, r3, r2
 8003194:	099b      	lsrs	r3, r3, #6
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd fb35 	bl	8000806 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800319c:	2004      	movs	r0, #4
 800319e:	f7fd fb3f 	bl	8000820 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2100      	movs	r1, #0
 80031a6:	f04f 30ff 	mov.w	r0, #4294967295
 80031aa:	f7fd fb02 	bl	80007b2 <HAL_NVIC_SetPriority>
}
 80031ae:	bf00      	nop
 80031b0:	3750      	adds	r7, #80	; 0x50
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40007000 	.word	0x40007000
 80031c0:	08003c54 	.word	0x08003c54
 80031c4:	10624dd3 	.word	0x10624dd3

080031c8 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80031d2:	e7fe      	b.n	80031d2 <_Error_Handler+0xa>

080031d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80031d8:	2007      	movs	r0, #7
 80031da:	f7fd fadf 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80031de:	2200      	movs	r2, #0
 80031e0:	2100      	movs	r1, #0
 80031e2:	f06f 000b 	mvn.w	r0, #11
 80031e6:	f7fd fae4 	bl	80007b2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80031ea:	2200      	movs	r2, #0
 80031ec:	2100      	movs	r1, #0
 80031ee:	f06f 000a 	mvn.w	r0, #10
 80031f2:	f7fd fade 	bl	80007b2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80031f6:	2200      	movs	r2, #0
 80031f8:	2100      	movs	r1, #0
 80031fa:	f06f 0009 	mvn.w	r0, #9
 80031fe:	f7fd fad8 	bl	80007b2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003202:	2200      	movs	r2, #0
 8003204:	2100      	movs	r1, #0
 8003206:	f06f 0004 	mvn.w	r0, #4
 800320a:	f7fd fad2 	bl	80007b2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800320e:	2200      	movs	r2, #0
 8003210:	2100      	movs	r1, #0
 8003212:	f06f 0003 	mvn.w	r0, #3
 8003216:	f7fd facc 	bl	80007b2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800321a:	2200      	movs	r2, #0
 800321c:	2100      	movs	r1, #0
 800321e:	f06f 0001 	mvn.w	r0, #1
 8003222:	f7fd fac6 	bl	80007b2 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003226:	2200      	movs	r2, #0
 8003228:	2100      	movs	r1, #0
 800322a:	f04f 30ff 	mov.w	r0, #4294967295
 800322e:	f7fd fac0 	bl	80007b2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003232:	bf00      	nop
 8003234:	bd80      	pop	{r7, pc}

08003236 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800323a:	f7fd f9c5 	bl	80005c8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800323e:	f7fd fb0b 	bl	8000858 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <TIM8_UP_TIM13_IRQHandler>:

/**
* @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
*/
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800324c:	4802      	ldr	r0, [pc, #8]	; (8003258 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800324e:	f7fe fbd1 	bl	80019f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	200000b0 	.word	0x200000b0

0800325c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
* @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
*/
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003260:	4802      	ldr	r0, [pc, #8]	; (800326c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003262:	f7fe fbc7 	bl	80019f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	200000b0 	.word	0x200000b0

08003270 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003274:	4a16      	ldr	r2, [pc, #88]	; (80032d0 <SystemInit+0x60>)
 8003276:	4b16      	ldr	r3, [pc, #88]	; (80032d0 <SystemInit+0x60>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003280:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003284:	4a13      	ldr	r2, [pc, #76]	; (80032d4 <SystemInit+0x64>)
 8003286:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <SystemInit+0x64>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003290:	4b10      	ldr	r3, [pc, #64]	; (80032d4 <SystemInit+0x64>)
 8003292:	2200      	movs	r2, #0
 8003294:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003296:	4a0f      	ldr	r2, [pc, #60]	; (80032d4 <SystemInit+0x64>)
 8003298:	4b0e      	ldr	r3, [pc, #56]	; (80032d4 <SystemInit+0x64>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80032a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80032a6:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <SystemInit+0x64>)
 80032a8:	4a0b      	ldr	r2, [pc, #44]	; (80032d8 <SystemInit+0x68>)
 80032aa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80032ac:	4a09      	ldr	r2, [pc, #36]	; (80032d4 <SystemInit+0x64>)
 80032ae:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <SystemInit+0x64>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <SystemInit+0x64>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032be:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <SystemInit+0x60>)
 80032c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032c4:	609a      	str	r2, [r3, #8]
#endif
}
 80032c6:	bf00      	nop
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	e000ed00 	.word	0xe000ed00
 80032d4:	40023800 	.word	0x40023800
 80032d8:	24003010 	.word	0x24003010

080032dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08c      	sub	sp, #48	; 0x30
 80032e0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
 80032e2:	4b23      	ldr	r3, [pc, #140]	; (8003370 <MX_TIM1_Init+0x94>)
 80032e4:	4a23      	ldr	r2, [pc, #140]	; (8003374 <MX_TIM1_Init+0x98>)
 80032e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80032e8:	4b21      	ldr	r3, [pc, #132]	; (8003370 <MX_TIM1_Init+0x94>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ee:	4b20      	ldr	r3, [pc, #128]	; (8003370 <MX_TIM1_Init+0x94>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 80032f4:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <MX_TIM1_Init+0x94>)
 80032f6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80032fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032fc:	4b1c      	ldr	r3, [pc, #112]	; (8003370 <MX_TIM1_Init+0x94>)
 80032fe:	2200      	movs	r2, #0
 8003300:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003302:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <MX_TIM1_Init+0x94>)
 8003304:	2200      	movs	r2, #0
 8003306:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003308:	2301      	movs	r3, #1
 800330a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800330c:	2300      	movs	r3, #0
 800330e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003310:	2301      	movs	r3, #1
 8003312:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003314:	2300      	movs	r3, #0
 8003316:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800331c:	2300      	movs	r3, #0
 800331e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003320:	2301      	movs	r3, #1
 8003322:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003324:	2300      	movs	r3, #0
 8003326:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800332c:	f107 030c 	add.w	r3, r7, #12
 8003330:	4619      	mov	r1, r3
 8003332:	480f      	ldr	r0, [pc, #60]	; (8003370 <MX_TIM1_Init+0x94>)
 8003334:	f7fe fa4a 	bl	80017cc <HAL_TIM_Encoder_Init>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <MX_TIM1_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800333e:	2151      	movs	r1, #81	; 0x51
 8003340:	480d      	ldr	r0, [pc, #52]	; (8003378 <MX_TIM1_Init+0x9c>)
 8003342:	f7ff ff41 	bl	80031c8 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003346:	2300      	movs	r3, #0
 8003348:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800334e:	1d3b      	adds	r3, r7, #4
 8003350:	4619      	mov	r1, r3
 8003352:	4807      	ldr	r0, [pc, #28]	; (8003370 <MX_TIM1_Init+0x94>)
 8003354:	f7fe ffe0 	bl	8002318 <HAL_TIMEx_MasterConfigSynchronization>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <MX_TIM1_Init+0x8a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800335e:	2158      	movs	r1, #88	; 0x58
 8003360:	4805      	ldr	r0, [pc, #20]	; (8003378 <MX_TIM1_Init+0x9c>)
 8003362:	f7ff ff31 	bl	80031c8 <_Error_Handler>
  }

}
 8003366:	bf00      	nop
 8003368:	3730      	adds	r7, #48	; 0x30
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	200001dc 	.word	0x200001dc
 8003374:	40010000 	.word	0x40010000
 8003378:	08003c64 	.word	0x08003c64

0800337c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08a      	sub	sp, #40	; 0x28
 8003380:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 8003382:	4b24      	ldr	r3, [pc, #144]	; (8003414 <MX_TIM2_Init+0x98>)
 8003384:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003388:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800338a:	4b22      	ldr	r3, [pc, #136]	; (8003414 <MX_TIM2_Init+0x98>)
 800338c:	2200      	movs	r2, #0
 800338e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003390:	4b20      	ldr	r3, [pc, #128]	; (8003414 <MX_TIM2_Init+0x98>)
 8003392:	2200      	movs	r2, #0
 8003394:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8399;
 8003396:	4b1f      	ldr	r3, [pc, #124]	; (8003414 <MX_TIM2_Init+0x98>)
 8003398:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800339c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800339e:	4b1d      	ldr	r3, [pc, #116]	; (8003414 <MX_TIM2_Init+0x98>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80033a4:	481b      	ldr	r0, [pc, #108]	; (8003414 <MX_TIM2_Init+0x98>)
 80033a6:	f7fe f95a 	bl	800165e <HAL_TIM_PWM_Init>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <MX_TIM2_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80033b0:	2169      	movs	r1, #105	; 0x69
 80033b2:	4819      	ldr	r0, [pc, #100]	; (8003418 <MX_TIM2_Init+0x9c>)
 80033b4:	f7ff ff08 	bl	80031c8 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033b8:	2300      	movs	r3, #0
 80033ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033bc:	2300      	movs	r3, #0
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033c0:	f107 0320 	add.w	r3, r7, #32
 80033c4:	4619      	mov	r1, r3
 80033c6:	4813      	ldr	r0, [pc, #76]	; (8003414 <MX_TIM2_Init+0x98>)
 80033c8:	f7fe ffa6 	bl	8002318 <HAL_TIMEx_MasterConfigSynchronization>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <MX_TIM2_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80033d2:	2170      	movs	r1, #112	; 0x70
 80033d4:	4810      	ldr	r0, [pc, #64]	; (8003418 <MX_TIM2_Init+0x9c>)
 80033d6:	f7ff fef7 	bl	80031c8 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033da:	2360      	movs	r3, #96	; 0x60
 80033dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80033ea:	1d3b      	adds	r3, r7, #4
 80033ec:	220c      	movs	r2, #12
 80033ee:	4619      	mov	r1, r3
 80033f0:	4808      	ldr	r0, [pc, #32]	; (8003414 <MX_TIM2_Init+0x98>)
 80033f2:	f7fe fc07 	bl	8001c04 <HAL_TIM_PWM_ConfigChannel>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <MX_TIM2_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 80033fc:	2179      	movs	r1, #121	; 0x79
 80033fe:	4806      	ldr	r0, [pc, #24]	; (8003418 <MX_TIM2_Init+0x9c>)
 8003400:	f7ff fee2 	bl	80031c8 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 8003404:	4803      	ldr	r0, [pc, #12]	; (8003414 <MX_TIM2_Init+0x98>)
 8003406:	f000 faf7 	bl	80039f8 <HAL_TIM_MspPostInit>

}
 800340a:	bf00      	nop
 800340c:	3728      	adds	r7, #40	; 0x28
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20000218 	.word	0x20000218
 8003418:	08003c64 	.word	0x08003c64

0800341c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08c      	sub	sp, #48	; 0x30
 8003420:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 8003422:	4b21      	ldr	r3, [pc, #132]	; (80034a8 <MX_TIM3_Init+0x8c>)
 8003424:	4a21      	ldr	r2, [pc, #132]	; (80034ac <MX_TIM3_Init+0x90>)
 8003426:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003428:	4b1f      	ldr	r3, [pc, #124]	; (80034a8 <MX_TIM3_Init+0x8c>)
 800342a:	2200      	movs	r2, #0
 800342c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800342e:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <MX_TIM3_Init+0x8c>)
 8003430:	2200      	movs	r2, #0
 8003432:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1023;
 8003434:	4b1c      	ldr	r3, [pc, #112]	; (80034a8 <MX_TIM3_Init+0x8c>)
 8003436:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800343a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800343c:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <MX_TIM3_Init+0x8c>)
 800343e:	2200      	movs	r2, #0
 8003440:	611a      	str	r2, [r3, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003442:	2301      	movs	r3, #1
 8003444:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003446:	2300      	movs	r3, #0
 8003448:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800344a:	2301      	movs	r3, #1
 800344c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800344e:	2300      	movs	r3, #0
 8003450:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003456:	2300      	movs	r3, #0
 8003458:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800345a:	2301      	movs	r3, #1
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800345e:	2300      	movs	r3, #0
 8003460:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003466:	f107 030c 	add.w	r3, r7, #12
 800346a:	4619      	mov	r1, r3
 800346c:	480e      	ldr	r0, [pc, #56]	; (80034a8 <MX_TIM3_Init+0x8c>)
 800346e:	f7fe f9ad 	bl	80017cc <HAL_TIM_Encoder_Init>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <MX_TIM3_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003478:	2195      	movs	r1, #149	; 0x95
 800347a:	480d      	ldr	r0, [pc, #52]	; (80034b0 <MX_TIM3_Init+0x94>)
 800347c:	f7ff fea4 	bl	80031c8 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003480:	2300      	movs	r3, #0
 8003482:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003484:	2300      	movs	r3, #0
 8003486:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003488:	1d3b      	adds	r3, r7, #4
 800348a:	4619      	mov	r1, r3
 800348c:	4806      	ldr	r0, [pc, #24]	; (80034a8 <MX_TIM3_Init+0x8c>)
 800348e:	f7fe ff43 	bl	8002318 <HAL_TIMEx_MasterConfigSynchronization>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <MX_TIM3_Init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003498:	219c      	movs	r1, #156	; 0x9c
 800349a:	4805      	ldr	r0, [pc, #20]	; (80034b0 <MX_TIM3_Init+0x94>)
 800349c:	f7ff fe94 	bl	80031c8 <_Error_Handler>
  }

}
 80034a0:	bf00      	nop
 80034a2:	3730      	adds	r7, #48	; 0x30
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	200001a0 	.word	0x200001a0
 80034ac:	40000400 	.word	0x40000400
 80034b0:	08003c64 	.word	0x08003c64

080034b4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08c      	sub	sp, #48	; 0x30
 80034b8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 80034ba:	4b21      	ldr	r3, [pc, #132]	; (8003540 <MX_TIM4_Init+0x8c>)
 80034bc:	4a21      	ldr	r2, [pc, #132]	; (8003544 <MX_TIM4_Init+0x90>)
 80034be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80034c0:	4b1f      	ldr	r3, [pc, #124]	; (8003540 <MX_TIM4_Init+0x8c>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034c6:	4b1e      	ldr	r3, [pc, #120]	; (8003540 <MX_TIM4_Init+0x8c>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1023;
 80034cc:	4b1c      	ldr	r3, [pc, #112]	; (8003540 <MX_TIM4_Init+0x8c>)
 80034ce:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80034d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034d4:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <MX_TIM4_Init+0x8c>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	611a      	str	r2, [r3, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80034da:	2301      	movs	r3, #1
 80034dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80034de:	2300      	movs	r3, #0
 80034e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80034e2:	2301      	movs	r3, #1
 80034e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80034ee:	2300      	movs	r3, #0
 80034f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80034f2:	2301      	movs	r3, #1
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80034f6:	2300      	movs	r3, #0
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80034fe:	f107 030c 	add.w	r3, r7, #12
 8003502:	4619      	mov	r1, r3
 8003504:	480e      	ldr	r0, [pc, #56]	; (8003540 <MX_TIM4_Init+0x8c>)
 8003506:	f7fe f961 	bl	80017cc <HAL_TIM_Encoder_Init>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <MX_TIM4_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003510:	21b6      	movs	r1, #182	; 0xb6
 8003512:	480d      	ldr	r0, [pc, #52]	; (8003548 <MX_TIM4_Init+0x94>)
 8003514:	f7ff fe58 	bl	80031c8 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003518:	2300      	movs	r3, #0
 800351a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800351c:	2300      	movs	r3, #0
 800351e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003520:	1d3b      	adds	r3, r7, #4
 8003522:	4619      	mov	r1, r3
 8003524:	4806      	ldr	r0, [pc, #24]	; (8003540 <MX_TIM4_Init+0x8c>)
 8003526:	f7fe fef7 	bl	8002318 <HAL_TIMEx_MasterConfigSynchronization>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <MX_TIM4_Init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003530:	21bd      	movs	r1, #189	; 0xbd
 8003532:	4805      	ldr	r0, [pc, #20]	; (8003548 <MX_TIM4_Init+0x94>)
 8003534:	f7ff fe48 	bl	80031c8 <_Error_Handler>
  }

}
 8003538:	bf00      	nop
 800353a:	3730      	adds	r7, #48	; 0x30
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	200000ec 	.word	0x200000ec
 8003544:	40000800 	.word	0x40000800
 8003548:	08003c64 	.word	0x08003c64

0800354c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim5.Instance = TIM5;
 8003552:	4b23      	ldr	r3, [pc, #140]	; (80035e0 <MX_TIM5_Init+0x94>)
 8003554:	4a23      	ldr	r2, [pc, #140]	; (80035e4 <MX_TIM5_Init+0x98>)
 8003556:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003558:	4b21      	ldr	r3, [pc, #132]	; (80035e0 <MX_TIM5_Init+0x94>)
 800355a:	2200      	movs	r2, #0
 800355c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800355e:	4b20      	ldr	r3, [pc, #128]	; (80035e0 <MX_TIM5_Init+0x94>)
 8003560:	2200      	movs	r2, #0
 8003562:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 8399;
 8003564:	4b1e      	ldr	r3, [pc, #120]	; (80035e0 <MX_TIM5_Init+0x94>)
 8003566:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800356a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800356c:	4b1c      	ldr	r3, [pc, #112]	; (80035e0 <MX_TIM5_Init+0x94>)
 800356e:	2200      	movs	r2, #0
 8003570:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003572:	481b      	ldr	r0, [pc, #108]	; (80035e0 <MX_TIM5_Init+0x94>)
 8003574:	f7fe f873 	bl	800165e <HAL_TIM_PWM_Init>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <MX_TIM5_Init+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800357e:	21ce      	movs	r1, #206	; 0xce
 8003580:	4819      	ldr	r0, [pc, #100]	; (80035e8 <MX_TIM5_Init+0x9c>)
 8003582:	f7ff fe21 	bl	80031c8 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003586:	2300      	movs	r3, #0
 8003588:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800358a:	2300      	movs	r3, #0
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800358e:	f107 0320 	add.w	r3, r7, #32
 8003592:	4619      	mov	r1, r3
 8003594:	4812      	ldr	r0, [pc, #72]	; (80035e0 <MX_TIM5_Init+0x94>)
 8003596:	f7fe febf 	bl	8002318 <HAL_TIMEx_MasterConfigSynchronization>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <MX_TIM5_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80035a0:	21d5      	movs	r1, #213	; 0xd5
 80035a2:	4811      	ldr	r0, [pc, #68]	; (80035e8 <MX_TIM5_Init+0x9c>)
 80035a4:	f7ff fe10 	bl	80031c8 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035a8:	2360      	movs	r3, #96	; 0x60
 80035aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80035b8:	1d3b      	adds	r3, r7, #4
 80035ba:	2204      	movs	r2, #4
 80035bc:	4619      	mov	r1, r3
 80035be:	4808      	ldr	r0, [pc, #32]	; (80035e0 <MX_TIM5_Init+0x94>)
 80035c0:	f7fe fb20 	bl	8001c04 <HAL_TIM_PWM_ConfigChannel>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <MX_TIM5_Init+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 80035ca:	21de      	movs	r1, #222	; 0xde
 80035cc:	4806      	ldr	r0, [pc, #24]	; (80035e8 <MX_TIM5_Init+0x9c>)
 80035ce:	f7ff fdfb 	bl	80031c8 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim5);
 80035d2:	4803      	ldr	r0, [pc, #12]	; (80035e0 <MX_TIM5_Init+0x94>)
 80035d4:	f000 fa10 	bl	80039f8 <HAL_TIM_MspPostInit>

}
 80035d8:	bf00      	nop
 80035da:	3728      	adds	r7, #40	; 0x28
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20000164 	.word	0x20000164
 80035e4:	40000c00 	.word	0x40000c00
 80035e8:	08003c64 	.word	0x08003c64

080035ec <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08c      	sub	sp, #48	; 0x30
 80035f0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim8.Instance = TIM8;
 80035f2:	4b23      	ldr	r3, [pc, #140]	; (8003680 <MX_TIM8_Init+0x94>)
 80035f4:	4a23      	ldr	r2, [pc, #140]	; (8003684 <MX_TIM8_Init+0x98>)
 80035f6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80035f8:	4b21      	ldr	r3, [pc, #132]	; (8003680 <MX_TIM8_Init+0x94>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035fe:	4b20      	ldr	r3, [pc, #128]	; (8003680 <MX_TIM8_Init+0x94>)
 8003600:	2200      	movs	r2, #0
 8003602:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1023;
 8003604:	4b1e      	ldr	r3, [pc, #120]	; (8003680 <MX_TIM8_Init+0x94>)
 8003606:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800360a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800360c:	4b1c      	ldr	r3, [pc, #112]	; (8003680 <MX_TIM8_Init+0x94>)
 800360e:	2200      	movs	r2, #0
 8003610:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003612:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <MX_TIM8_Init+0x94>)
 8003614:	2200      	movs	r2, #0
 8003616:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003618:	2301      	movs	r3, #1
 800361a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800361c:	2300      	movs	r3, #0
 800361e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003620:	2301      	movs	r3, #1
 8003622:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003624:	2300      	movs	r3, #0
 8003626:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800362c:	2300      	movs	r3, #0
 800362e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003630:	2301      	movs	r3, #1
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003634:	2300      	movs	r3, #0
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800363c:	f107 030c 	add.w	r3, r7, #12
 8003640:	4619      	mov	r1, r3
 8003642:	480f      	ldr	r0, [pc, #60]	; (8003680 <MX_TIM8_Init+0x94>)
 8003644:	f7fe f8c2 	bl	80017cc <HAL_TIM_Encoder_Init>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <MX_TIM8_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800364e:	21fb      	movs	r1, #251	; 0xfb
 8003650:	480d      	ldr	r0, [pc, #52]	; (8003688 <MX_TIM8_Init+0x9c>)
 8003652:	f7ff fdb9 	bl	80031c8 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003656:	2300      	movs	r3, #0
 8003658:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800365a:	2300      	movs	r3, #0
 800365c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800365e:	1d3b      	adds	r3, r7, #4
 8003660:	4619      	mov	r1, r3
 8003662:	4807      	ldr	r0, [pc, #28]	; (8003680 <MX_TIM8_Init+0x94>)
 8003664:	f7fe fe58 	bl	8002318 <HAL_TIMEx_MasterConfigSynchronization>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d004      	beq.n	8003678 <MX_TIM8_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800366e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8003672:	4805      	ldr	r0, [pc, #20]	; (8003688 <MX_TIM8_Init+0x9c>)
 8003674:	f7ff fda8 	bl	80031c8 <_Error_Handler>
  }

}
 8003678:	bf00      	nop
 800367a:	3730      	adds	r7, #48	; 0x30
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	200000b0 	.word	0x200000b0
 8003684:	40010400 	.word	0x40010400
 8003688:	08003c64 	.word	0x08003c64

0800368c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC;

  htim10.Instance = TIM10;
 8003692:	4b22      	ldr	r3, [pc, #136]	; (800371c <MX_TIM10_Init+0x90>)
 8003694:	4a22      	ldr	r2, [pc, #136]	; (8003720 <MX_TIM10_Init+0x94>)
 8003696:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8003698:	4b20      	ldr	r3, [pc, #128]	; (800371c <MX_TIM10_Init+0x90>)
 800369a:	2200      	movs	r2, #0
 800369c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800369e:	4b1f      	ldr	r3, [pc, #124]	; (800371c <MX_TIM10_Init+0x90>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8399;
 80036a4:	4b1d      	ldr	r3, [pc, #116]	; (800371c <MX_TIM10_Init+0x90>)
 80036a6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80036aa:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ac:	4b1b      	ldr	r3, [pc, #108]	; (800371c <MX_TIM10_Init+0x90>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80036b2:	481a      	ldr	r0, [pc, #104]	; (800371c <MX_TIM10_Init+0x90>)
 80036b4:	f7fd ffa8 	bl	8001608 <HAL_TIM_Base_Init>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d004      	beq.n	80036c8 <MX_TIM10_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80036be:	f44f 7189 	mov.w	r1, #274	; 0x112
 80036c2:	4818      	ldr	r0, [pc, #96]	; (8003724 <MX_TIM10_Init+0x98>)
 80036c4:	f7ff fd80 	bl	80031c8 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80036c8:	4814      	ldr	r0, [pc, #80]	; (800371c <MX_TIM10_Init+0x90>)
 80036ca:	f7fd ffc8 	bl	800165e <HAL_TIM_PWM_Init>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d004      	beq.n	80036de <MX_TIM10_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 80036d4:	f240 1117 	movw	r1, #279	; 0x117
 80036d8:	4812      	ldr	r0, [pc, #72]	; (8003724 <MX_TIM10_Init+0x98>)
 80036da:	f7ff fd75 	bl	80031c8 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036de:	2360      	movs	r3, #96	; 0x60
 80036e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3999;
 80036e2:	f640 739f 	movw	r3, #3999	; 0xf9f
 80036e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036f0:	1d3b      	adds	r3, r7, #4
 80036f2:	2200      	movs	r2, #0
 80036f4:	4619      	mov	r1, r3
 80036f6:	4809      	ldr	r0, [pc, #36]	; (800371c <MX_TIM10_Init+0x90>)
 80036f8:	f7fe fa84 	bl	8001c04 <HAL_TIM_PWM_ConfigChannel>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d004      	beq.n	800370c <MX_TIM10_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003702:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003706:	4807      	ldr	r0, [pc, #28]	; (8003724 <MX_TIM10_Init+0x98>)
 8003708:	f7ff fd5e 	bl	80031c8 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim10);
 800370c:	4803      	ldr	r0, [pc, #12]	; (800371c <MX_TIM10_Init+0x90>)
 800370e:	f000 f973 	bl	80039f8 <HAL_TIM_MspPostInit>

}
 8003712:	bf00      	nop
 8003714:	3720      	adds	r7, #32
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000128 	.word	0x20000128
 8003720:	40014400 	.word	0x40014400
 8003724:	08003c64 	.word	0x08003c64

08003728 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC;

  htim12.Instance = TIM12;
 800372e:	4b1c      	ldr	r3, [pc, #112]	; (80037a0 <MX_TIM12_Init+0x78>)
 8003730:	4a1c      	ldr	r2, [pc, #112]	; (80037a4 <MX_TIM12_Init+0x7c>)
 8003732:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8003734:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <MX_TIM12_Init+0x78>)
 8003736:	2200      	movs	r2, #0
 8003738:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800373a:	4b19      	ldr	r3, [pc, #100]	; (80037a0 <MX_TIM12_Init+0x78>)
 800373c:	2200      	movs	r2, #0
 800373e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 8399;
 8003740:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <MX_TIM12_Init+0x78>)
 8003742:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003746:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003748:	4b15      	ldr	r3, [pc, #84]	; (80037a0 <MX_TIM12_Init+0x78>)
 800374a:	2200      	movs	r2, #0
 800374c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800374e:	4814      	ldr	r0, [pc, #80]	; (80037a0 <MX_TIM12_Init+0x78>)
 8003750:	f7fd ff85 	bl	800165e <HAL_TIM_PWM_Init>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d004      	beq.n	8003764 <MX_TIM12_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800375a:	f44f 7199 	mov.w	r1, #306	; 0x132
 800375e:	4812      	ldr	r0, [pc, #72]	; (80037a8 <MX_TIM12_Init+0x80>)
 8003760:	f7ff fd32 	bl	80031c8 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003764:	2360      	movs	r3, #96	; 0x60
 8003766:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800376c:	2300      	movs	r3, #0
 800376e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003774:	1d3b      	adds	r3, r7, #4
 8003776:	2204      	movs	r2, #4
 8003778:	4619      	mov	r1, r3
 800377a:	4809      	ldr	r0, [pc, #36]	; (80037a0 <MX_TIM12_Init+0x78>)
 800377c:	f7fe fa42 	bl	8001c04 <HAL_TIM_PWM_ConfigChannel>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d004      	beq.n	8003790 <MX_TIM12_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003786:	f240 113b 	movw	r1, #315	; 0x13b
 800378a:	4807      	ldr	r0, [pc, #28]	; (80037a8 <MX_TIM12_Init+0x80>)
 800378c:	f7ff fd1c 	bl	80031c8 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim12);
 8003790:	4803      	ldr	r0, [pc, #12]	; (80037a0 <MX_TIM12_Init+0x78>)
 8003792:	f000 f931 	bl	80039f8 <HAL_TIM_MspPostInit>

}
 8003796:	bf00      	nop
 8003798:	3720      	adds	r7, #32
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000254 	.word	0x20000254
 80037a4:	40001800 	.word	0x40001800
 80037a8:	08003c64 	.word	0x08003c64

080037ac <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08c      	sub	sp, #48	; 0x30
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_encoderHandle->Instance==TIM1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a50      	ldr	r2, [pc, #320]	; (80038fc <HAL_TIM_Encoder_MspInit+0x150>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d11f      	bne.n	80037fe <HAL_TIM_Encoder_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	4a4f      	ldr	r2, [pc, #316]	; (8003900 <HAL_TIM_Encoder_MspInit+0x154>)
 80037c4:	4b4e      	ldr	r3, [pc, #312]	; (8003900 <HAL_TIM_Encoder_MspInit+0x154>)
 80037c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	6453      	str	r3, [r2, #68]	; 0x44
 80037ce:	4b4c      	ldr	r3, [pc, #304]	; (8003900 <HAL_TIM_Encoder_MspInit+0x154>)
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	61bb      	str	r3, [r7, #24]
 80037d8:	69bb      	ldr	r3, [r7, #24]
  
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = MTR4_A_Pin|MTR4_B_Pin;
 80037da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e0:	2302      	movs	r3, #2
 80037e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e8:	2300      	movs	r3, #0
 80037ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037ec:	2301      	movs	r3, #1
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037f0:	f107 031c 	add.w	r3, r7, #28
 80037f4:	4619      	mov	r1, r3
 80037f6:	4843      	ldr	r0, [pc, #268]	; (8003904 <HAL_TIM_Encoder_MspInit+0x158>)
 80037f8:	f7fd f834 	bl	8000864 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80037fc:	e07a      	b.n	80038f4 <HAL_TIM_Encoder_MspInit+0x148>
  else if(tim_encoderHandle->Instance==TIM3)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a41      	ldr	r2, [pc, #260]	; (8003908 <HAL_TIM_Encoder_MspInit+0x15c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d11e      	bne.n	8003846 <HAL_TIM_Encoder_MspInit+0x9a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	4a3c      	ldr	r2, [pc, #240]	; (8003900 <HAL_TIM_Encoder_MspInit+0x154>)
 800380e:	4b3c      	ldr	r3, [pc, #240]	; (8003900 <HAL_TIM_Encoder_MspInit+0x154>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f043 0302 	orr.w	r3, r3, #2
 8003816:	6413      	str	r3, [r2, #64]	; 0x40
 8003818:	4b39      	ldr	r3, [pc, #228]	; (8003900 <HAL_TIM_Encoder_MspInit+0x154>)
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MTR2_A_Pin|MTR2_B_Pin;
 8003824:	23c0      	movs	r3, #192	; 0xc0
 8003826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003828:	2302      	movs	r3, #2
 800382a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382c:	2300      	movs	r3, #0
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003830:	2300      	movs	r3, #0
 8003832:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003834:	2302      	movs	r3, #2
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003838:	f107 031c 	add.w	r3, r7, #28
 800383c:	4619      	mov	r1, r3
 800383e:	4831      	ldr	r0, [pc, #196]	; (8003904 <HAL_TIM_Encoder_MspInit+0x158>)
 8003840:	f7fd f810 	bl	8000864 <HAL_GPIO_Init>
}
 8003844:	e056      	b.n	80038f4 <HAL_TIM_Encoder_MspInit+0x148>
  else if(tim_encoderHandle->Instance==TIM4)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a30      	ldr	r2, [pc, #192]	; (800390c <HAL_TIM_Encoder_MspInit+0x160>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d11e      	bne.n	800388e <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003850:	2300      	movs	r3, #0
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	4a2a      	ldr	r2, [pc, #168]	; (8003900 <HAL_TIM_Encoder_MspInit+0x154>)
 8003856:	4b2a      	ldr	r3, [pc, #168]	; (8003900 <HAL_TIM_Encoder_MspInit+0x154>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	f043 0304 	orr.w	r3, r3, #4
 800385e:	6413      	str	r3, [r2, #64]	; 0x40
 8003860:	4b27      	ldr	r3, [pc, #156]	; (8003900 <HAL_TIM_Encoder_MspInit+0x154>)
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MTR1_B_Pin|MTR1_A_Pin;
 800386c:	23c0      	movs	r3, #192	; 0xc0
 800386e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003870:	2302      	movs	r3, #2
 8003872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003874:	2300      	movs	r3, #0
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003878:	2300      	movs	r3, #0
 800387a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800387c:	2302      	movs	r3, #2
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003880:	f107 031c 	add.w	r3, r7, #28
 8003884:	4619      	mov	r1, r3
 8003886:	4822      	ldr	r0, [pc, #136]	; (8003910 <HAL_TIM_Encoder_MspInit+0x164>)
 8003888:	f7fc ffec 	bl	8000864 <HAL_GPIO_Init>
}
 800388c:	e032      	b.n	80038f4 <HAL_TIM_Encoder_MspInit+0x148>
  else if(tim_encoderHandle->Instance==TIM8)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a20      	ldr	r2, [pc, #128]	; (8003914 <HAL_TIM_Encoder_MspInit+0x168>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d12d      	bne.n	80038f4 <HAL_TIM_Encoder_MspInit+0x148>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	4a18      	ldr	r2, [pc, #96]	; (8003900 <HAL_TIM_Encoder_MspInit+0x154>)
 800389e:	4b18      	ldr	r3, [pc, #96]	; (8003900 <HAL_TIM_Encoder_MspInit+0x154>)
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	f043 0302 	orr.w	r3, r3, #2
 80038a6:	6453      	str	r3, [r2, #68]	; 0x44
 80038a8:	4b15      	ldr	r3, [pc, #84]	; (8003900 <HAL_TIM_Encoder_MspInit+0x154>)
 80038aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MTR3_A_Pin|MTR3_B_Pin;
 80038b4:	23c0      	movs	r3, #192	; 0xc0
 80038b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b8:	2302      	movs	r3, #2
 80038ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c0:	2300      	movs	r3, #0
 80038c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80038c4:	2303      	movs	r3, #3
 80038c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038c8:	f107 031c 	add.w	r3, r7, #28
 80038cc:	4619      	mov	r1, r3
 80038ce:	4812      	ldr	r0, [pc, #72]	; (8003918 <HAL_TIM_Encoder_MspInit+0x16c>)
 80038d0:	f7fc ffc8 	bl	8000864 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80038d4:	2200      	movs	r2, #0
 80038d6:	2100      	movs	r1, #0
 80038d8:	202c      	movs	r0, #44	; 0x2c
 80038da:	f7fc ff6a 	bl	80007b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80038de:	202c      	movs	r0, #44	; 0x2c
 80038e0:	f7fc ff83 	bl	80007ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80038e4:	2200      	movs	r2, #0
 80038e6:	2100      	movs	r1, #0
 80038e8:	202d      	movs	r0, #45	; 0x2d
 80038ea:	f7fc ff62 	bl	80007b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80038ee:	202d      	movs	r0, #45	; 0x2d
 80038f0:	f7fc ff7b 	bl	80007ea <HAL_NVIC_EnableIRQ>
}
 80038f4:	bf00      	nop
 80038f6:	3730      	adds	r7, #48	; 0x30
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40010000 	.word	0x40010000
 8003900:	40023800 	.word	0x40023800
 8003904:	40020000 	.word	0x40020000
 8003908:	40000400 	.word	0x40000400
 800390c:	40000800 	.word	0x40000800
 8003910:	40020400 	.word	0x40020400
 8003914:	40010400 	.word	0x40010400
 8003918:	40020800 	.word	0x40020800

0800391c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392c:	d10e      	bne.n	800394c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	4a1d      	ldr	r2, [pc, #116]	; (80039a8 <HAL_TIM_PWM_MspInit+0x8c>)
 8003934:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <HAL_TIM_PWM_MspInit+0x8c>)
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	6413      	str	r3, [r2, #64]	; 0x40
 800393e:	4b1a      	ldr	r3, [pc, #104]	; (80039a8 <HAL_TIM_PWM_MspInit+0x8c>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800394a:	e026      	b.n	800399a <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM5)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a16      	ldr	r2, [pc, #88]	; (80039ac <HAL_TIM_PWM_MspInit+0x90>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d10e      	bne.n	8003974 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	4a13      	ldr	r2, [pc, #76]	; (80039a8 <HAL_TIM_PWM_MspInit+0x8c>)
 800395c:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <HAL_TIM_PWM_MspInit+0x8c>)
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	f043 0308 	orr.w	r3, r3, #8
 8003964:	6413      	str	r3, [r2, #64]	; 0x40
 8003966:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <HAL_TIM_PWM_MspInit+0x8c>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	693b      	ldr	r3, [r7, #16]
}
 8003972:	e012      	b.n	800399a <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM12)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a0d      	ldr	r2, [pc, #52]	; (80039b0 <HAL_TIM_PWM_MspInit+0x94>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d10d      	bne.n	800399a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	4a09      	ldr	r2, [pc, #36]	; (80039a8 <HAL_TIM_PWM_MspInit+0x8c>)
 8003984:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <HAL_TIM_PWM_MspInit+0x8c>)
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800398c:	6413      	str	r3, [r2, #64]	; 0x40
 800398e:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <HAL_TIM_PWM_MspInit+0x8c>)
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]
}
 800399a:	bf00      	nop
 800399c:	371c      	adds	r7, #28
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40023800 	.word	0x40023800
 80039ac:	40000c00 	.word	0x40000c00
 80039b0:	40001800 	.word	0x40001800

080039b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a0b      	ldr	r2, [pc, #44]	; (80039f0 <HAL_TIM_Base_MspInit+0x3c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d10d      	bne.n	80039e2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	4a0a      	ldr	r2, [pc, #40]	; (80039f4 <HAL_TIM_Base_MspInit+0x40>)
 80039cc:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <HAL_TIM_Base_MspInit+0x40>)
 80039ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d4:	6453      	str	r3, [r2, #68]	; 0x44
 80039d6:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <HAL_TIM_Base_MspInit+0x40>)
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80039e2:	bf00      	nop
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40014400 	.word	0x40014400
 80039f4:	40023800 	.word	0x40023800

080039f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM2)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a08:	d110      	bne.n	8003a2c <HAL_TIM_MspPostInit+0x34>

  /* USER CODE END TIM2_MspPostInit 0 */
    /**TIM2 GPIO Configuration    
    PB2     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = MTR3_PWM_Pin;
 8003a0a:	2304      	movs	r3, #4
 8003a0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MTR3_PWM_GPIO_Port, &GPIO_InitStruct);
 8003a1e:	f107 030c 	add.w	r3, r7, #12
 8003a22:	4619      	mov	r1, r3
 8003a24:	4825      	ldr	r0, [pc, #148]	; (8003abc <HAL_TIM_MspPostInit+0xc4>)
 8003a26:	f7fc ff1d 	bl	8000864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003a2a:	e042      	b.n	8003ab2 <HAL_TIM_MspPostInit+0xba>
  else if(timHandle->Instance==TIM5)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a23      	ldr	r2, [pc, #140]	; (8003ac0 <HAL_TIM_MspPostInit+0xc8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d110      	bne.n	8003a58 <HAL_TIM_MspPostInit+0x60>
    GPIO_InitStruct.Pin = MTR2_PWM_Pin;
 8003a36:	2302      	movs	r3, #2
 8003a38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003a46:	2302      	movs	r3, #2
 8003a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MTR2_PWM_GPIO_Port, &GPIO_InitStruct);
 8003a4a:	f107 030c 	add.w	r3, r7, #12
 8003a4e:	4619      	mov	r1, r3
 8003a50:	481c      	ldr	r0, [pc, #112]	; (8003ac4 <HAL_TIM_MspPostInit+0xcc>)
 8003a52:	f7fc ff07 	bl	8000864 <HAL_GPIO_Init>
}
 8003a56:	e02c      	b.n	8003ab2 <HAL_TIM_MspPostInit+0xba>
  else if(timHandle->Instance==TIM10)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a1a      	ldr	r2, [pc, #104]	; (8003ac8 <HAL_TIM_MspPostInit+0xd0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d111      	bne.n	8003a86 <HAL_TIM_MspPostInit+0x8e>
    GPIO_InitStruct.Pin = MTR1_PWM_Pin;
 8003a62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a70:	2300      	movs	r3, #0
 8003a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003a74:	2303      	movs	r3, #3
 8003a76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MTR1_PWM_GPIO_Port, &GPIO_InitStruct);
 8003a78:	f107 030c 	add.w	r3, r7, #12
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	480f      	ldr	r0, [pc, #60]	; (8003abc <HAL_TIM_MspPostInit+0xc4>)
 8003a80:	f7fc fef0 	bl	8000864 <HAL_GPIO_Init>
}
 8003a84:	e015      	b.n	8003ab2 <HAL_TIM_MspPostInit+0xba>
  else if(timHandle->Instance==TIM12)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a10      	ldr	r2, [pc, #64]	; (8003acc <HAL_TIM_MspPostInit+0xd4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d110      	bne.n	8003ab2 <HAL_TIM_MspPostInit+0xba>
    GPIO_InitStruct.Pin = MTR4_PWM_Pin;
 8003a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a96:	2302      	movs	r3, #2
 8003a98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003aa2:	2309      	movs	r3, #9
 8003aa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MTR4_PWM_GPIO_Port, &GPIO_InitStruct);
 8003aa6:	f107 030c 	add.w	r3, r7, #12
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4803      	ldr	r0, [pc, #12]	; (8003abc <HAL_TIM_MspPostInit+0xc4>)
 8003aae:	f7fc fed9 	bl	8000864 <HAL_GPIO_Init>
}
 8003ab2:	bf00      	nop
 8003ab4:	3720      	adds	r7, #32
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40020400 	.word	0x40020400
 8003ac0:	40000c00 	.word	0x40000c00
 8003ac4:	40020000 	.word	0x40020000
 8003ac8:	40014400 	.word	0x40014400
 8003acc:	40001800 	.word	0x40001800

08003ad0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003ad4:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <MX_USART2_UART_Init+0x50>)
 8003ad6:	4a13      	ldr	r2, [pc, #76]	; (8003b24 <MX_USART2_UART_Init+0x54>)
 8003ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003ada:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <MX_USART2_UART_Init+0x50>)
 8003adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ae2:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <MX_USART2_UART_Init+0x50>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ae8:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <MX_USART2_UART_Init+0x50>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003aee:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <MX_USART2_UART_Init+0x50>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003af4:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <MX_USART2_UART_Init+0x50>)
 8003af6:	220c      	movs	r2, #12
 8003af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003afa:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <MX_USART2_UART_Init+0x50>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b00:	4b07      	ldr	r3, [pc, #28]	; (8003b20 <MX_USART2_UART_Init+0x50>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b06:	4806      	ldr	r0, [pc, #24]	; (8003b20 <MX_USART2_UART_Init+0x50>)
 8003b08:	f7fe fc5f 	bl	80023ca <HAL_UART_Init>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <MX_USART2_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003b12:	2142      	movs	r1, #66	; 0x42
 8003b14:	4804      	ldr	r0, [pc, #16]	; (8003b28 <MX_USART2_UART_Init+0x58>)
 8003b16:	f7ff fb57 	bl	80031c8 <_Error_Handler>
  }

}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20000290 	.word	0x20000290
 8003b24:	40004400 	.word	0x40004400
 8003b28:	08003c74 	.word	0x08003c74

08003b2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <HAL_UART_MspInit+0x58>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d11d      	bne.n	8003b7a <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	4a11      	ldr	r2, [pc, #68]	; (8003b88 <HAL_UART_MspInit+0x5c>)
 8003b44:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <HAL_UART_MspInit+0x5c>)
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4e:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <HAL_UART_MspInit+0x5c>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003b5a:	230c      	movs	r3, #12
 8003b5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5e:	2302      	movs	r3, #2
 8003b60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b62:	2301      	movs	r3, #1
 8003b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b66:	2303      	movs	r3, #3
 8003b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b6a:	2307      	movs	r3, #7
 8003b6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b6e:	f107 030c 	add.w	r3, r7, #12
 8003b72:	4619      	mov	r1, r3
 8003b74:	4805      	ldr	r0, [pc, #20]	; (8003b8c <HAL_UART_MspInit+0x60>)
 8003b76:	f7fc fe75 	bl	8000864 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003b7a:	bf00      	nop
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40004400 	.word	0x40004400
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	40020000 	.word	0x40020000

08003b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003b94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b96:	e003      	b.n	8003ba0 <LoopCopyDataInit>

08003b98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b98:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003b9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b9e:	3104      	adds	r1, #4

08003ba0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ba0:	480b      	ldr	r0, [pc, #44]	; (8003bd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ba4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ba6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ba8:	d3f6      	bcc.n	8003b98 <CopyDataInit>
  ldr  r2, =_sbss
 8003baa:	4a0b      	ldr	r2, [pc, #44]	; (8003bd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003bac:	e002      	b.n	8003bb4 <LoopFillZerobss>

08003bae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003bae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003bb0:	f842 3b04 	str.w	r3, [r2], #4

08003bb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003bb4:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003bb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003bb8:	d3f9      	bcc.n	8003bae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003bba:	f7ff fb59 	bl	8003270 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bbe:	f000 f811 	bl	8003be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bc2:	f7ff fa69 	bl	8003098 <main>
  bx  lr    
 8003bc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003bc8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003bcc:	08003cac 	.word	0x08003cac
  ldr  r0, =_sdata
 8003bd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003bd4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003bd8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003bdc:	200002d0 	.word	0x200002d0

08003be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003be0:	e7fe      	b.n	8003be0 <ADC_IRQHandler>
	...

08003be4 <__libc_init_array>:
 8003be4:	b570      	push	{r4, r5, r6, lr}
 8003be6:	4e0d      	ldr	r6, [pc, #52]	; (8003c1c <__libc_init_array+0x38>)
 8003be8:	4c0d      	ldr	r4, [pc, #52]	; (8003c20 <__libc_init_array+0x3c>)
 8003bea:	1ba4      	subs	r4, r4, r6
 8003bec:	10a4      	asrs	r4, r4, #2
 8003bee:	2500      	movs	r5, #0
 8003bf0:	42a5      	cmp	r5, r4
 8003bf2:	d109      	bne.n	8003c08 <__libc_init_array+0x24>
 8003bf4:	4e0b      	ldr	r6, [pc, #44]	; (8003c24 <__libc_init_array+0x40>)
 8003bf6:	4c0c      	ldr	r4, [pc, #48]	; (8003c28 <__libc_init_array+0x44>)
 8003bf8:	f000 f820 	bl	8003c3c <_init>
 8003bfc:	1ba4      	subs	r4, r4, r6
 8003bfe:	10a4      	asrs	r4, r4, #2
 8003c00:	2500      	movs	r5, #0
 8003c02:	42a5      	cmp	r5, r4
 8003c04:	d105      	bne.n	8003c12 <__libc_init_array+0x2e>
 8003c06:	bd70      	pop	{r4, r5, r6, pc}
 8003c08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c0c:	4798      	blx	r3
 8003c0e:	3501      	adds	r5, #1
 8003c10:	e7ee      	b.n	8003bf0 <__libc_init_array+0xc>
 8003c12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c16:	4798      	blx	r3
 8003c18:	3501      	adds	r5, #1
 8003c1a:	e7f2      	b.n	8003c02 <__libc_init_array+0x1e>
 8003c1c:	08003ca4 	.word	0x08003ca4
 8003c20:	08003ca4 	.word	0x08003ca4
 8003c24:	08003ca4 	.word	0x08003ca4
 8003c28:	08003ca8 	.word	0x08003ca8

08003c2c <memset>:
 8003c2c:	4402      	add	r2, r0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d100      	bne.n	8003c36 <memset+0xa>
 8003c34:	4770      	bx	lr
 8003c36:	f803 1b01 	strb.w	r1, [r3], #1
 8003c3a:	e7f9      	b.n	8003c30 <memset+0x4>

08003c3c <_init>:
 8003c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3e:	bf00      	nop
 8003c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c42:	bc08      	pop	{r3}
 8003c44:	469e      	mov	lr, r3
 8003c46:	4770      	bx	lr

08003c48 <_fini>:
 8003c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4a:	bf00      	nop
 8003c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4e:	bc08      	pop	{r3}
 8003c50:	469e      	mov	lr, r3
 8003c52:	4770      	bx	lr
