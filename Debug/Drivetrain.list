
Drivetrain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004494  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004664  08004664  00014664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080046ec  080046ec  000146ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080046f4  080046f4  000146f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080046f8  080046f8  000146f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  080046fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002d4  20000070  0800476c  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000344  0800476c  00020344  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   000152a0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002744  00000000  00000000  00035340  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c18  00000000  00000000  00037a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b00  00000000  00000000  000386a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000060cf  00000000  00000000  000391a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003f03  00000000  00000000  0003f26f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00043172  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003498  00000000  00000000  000431f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800464c 	.word	0x0800464c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800464c 	.word	0x0800464c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b97a 	b.w	80005cc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	468c      	mov	ip, r1
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	9e08      	ldr	r6, [sp, #32]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d151      	bne.n	80003a4 <__udivmoddi4+0xb4>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d96d      	bls.n	80003e2 <__udivmoddi4+0xf2>
 8000306:	fab2 fe82 	clz	lr, r2
 800030a:	f1be 0f00 	cmp.w	lr, #0
 800030e:	d00b      	beq.n	8000328 <__udivmoddi4+0x38>
 8000310:	f1ce 0c20 	rsb	ip, lr, #32
 8000314:	fa01 f50e 	lsl.w	r5, r1, lr
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000320:	ea4c 0c05 	orr.w	ip, ip, r5
 8000324:	fa00 f40e 	lsl.w	r4, r0, lr
 8000328:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800032c:	0c25      	lsrs	r5, r4, #16
 800032e:	fbbc f8fa 	udiv	r8, ip, sl
 8000332:	fa1f f987 	uxth.w	r9, r7
 8000336:	fb0a cc18 	mls	ip, sl, r8, ip
 800033a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800033e:	fb08 f309 	mul.w	r3, r8, r9
 8000342:	42ab      	cmp	r3, r5
 8000344:	d90a      	bls.n	800035c <__udivmoddi4+0x6c>
 8000346:	19ed      	adds	r5, r5, r7
 8000348:	f108 32ff 	add.w	r2, r8, #4294967295
 800034c:	f080 8123 	bcs.w	8000596 <__udivmoddi4+0x2a6>
 8000350:	42ab      	cmp	r3, r5
 8000352:	f240 8120 	bls.w	8000596 <__udivmoddi4+0x2a6>
 8000356:	f1a8 0802 	sub.w	r8, r8, #2
 800035a:	443d      	add	r5, r7
 800035c:	1aed      	subs	r5, r5, r3
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb5 f0fa 	udiv	r0, r5, sl
 8000364:	fb0a 5510 	mls	r5, sl, r0, r5
 8000368:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800036c:	fb00 f909 	mul.w	r9, r0, r9
 8000370:	45a1      	cmp	r9, r4
 8000372:	d909      	bls.n	8000388 <__udivmoddi4+0x98>
 8000374:	19e4      	adds	r4, r4, r7
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	f080 810a 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800037e:	45a1      	cmp	r9, r4
 8000380:	f240 8107 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000384:	3802      	subs	r0, #2
 8000386:	443c      	add	r4, r7
 8000388:	eba4 0409 	sub.w	r4, r4, r9
 800038c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000390:	2100      	movs	r1, #0
 8000392:	2e00      	cmp	r6, #0
 8000394:	d061      	beq.n	800045a <__udivmoddi4+0x16a>
 8000396:	fa24 f40e 	lsr.w	r4, r4, lr
 800039a:	2300      	movs	r3, #0
 800039c:	6034      	str	r4, [r6, #0]
 800039e:	6073      	str	r3, [r6, #4]
 80003a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xc8>
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d054      	beq.n	8000456 <__udivmoddi4+0x166>
 80003ac:	2100      	movs	r1, #0
 80003ae:	e886 0021 	stmia.w	r6, {r0, r5}
 80003b2:	4608      	mov	r0, r1
 80003b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b8:	fab3 f183 	clz	r1, r3
 80003bc:	2900      	cmp	r1, #0
 80003be:	f040 808e 	bne.w	80004de <__udivmoddi4+0x1ee>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xdc>
 80003c6:	4282      	cmp	r2, r0
 80003c8:	f200 80fa 	bhi.w	80005c0 <__udivmoddi4+0x2d0>
 80003cc:	1a84      	subs	r4, r0, r2
 80003ce:	eb65 0503 	sbc.w	r5, r5, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	46ac      	mov	ip, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d03f      	beq.n	800045a <__udivmoddi4+0x16a>
 80003da:	e886 1010 	stmia.w	r6, {r4, ip}
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b912      	cbnz	r2, 80003ea <__udivmoddi4+0xfa>
 80003e4:	2701      	movs	r7, #1
 80003e6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ea:	fab7 fe87 	clz	lr, r7
 80003ee:	f1be 0f00 	cmp.w	lr, #0
 80003f2:	d134      	bne.n	800045e <__udivmoddi4+0x16e>
 80003f4:	1beb      	subs	r3, r5, r7
 80003f6:	0c3a      	lsrs	r2, r7, #16
 80003f8:	fa1f fc87 	uxth.w	ip, r7
 80003fc:	2101      	movs	r1, #1
 80003fe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000402:	0c25      	lsrs	r5, r4, #16
 8000404:	fb02 3318 	mls	r3, r2, r8, r3
 8000408:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800040c:	fb0c f308 	mul.w	r3, ip, r8
 8000410:	42ab      	cmp	r3, r5
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x134>
 8000414:	19ed      	adds	r5, r5, r7
 8000416:	f108 30ff 	add.w	r0, r8, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x132>
 800041c:	42ab      	cmp	r3, r5
 800041e:	f200 80d1 	bhi.w	80005c4 <__udivmoddi4+0x2d4>
 8000422:	4680      	mov	r8, r0
 8000424:	1aed      	subs	r5, r5, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb5 f0f2 	udiv	r0, r5, r2
 800042c:	fb02 5510 	mls	r5, r2, r0, r5
 8000430:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000434:	fb0c fc00 	mul.w	ip, ip, r0
 8000438:	45a4      	cmp	ip, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x15c>
 800043c:	19e4      	adds	r4, r4, r7
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x15a>
 8000444:	45a4      	cmp	ip, r4
 8000446:	f200 80b8 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 040c 	sub.w	r4, r4, ip
 8000450:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000454:	e79d      	b.n	8000392 <__udivmoddi4+0xa2>
 8000456:	4631      	mov	r1, r6
 8000458:	4630      	mov	r0, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1ce 0420 	rsb	r4, lr, #32
 8000462:	fa05 f30e 	lsl.w	r3, r5, lr
 8000466:	fa07 f70e 	lsl.w	r7, r7, lr
 800046a:	fa20 f804 	lsr.w	r8, r0, r4
 800046e:	0c3a      	lsrs	r2, r7, #16
 8000470:	fa25 f404 	lsr.w	r4, r5, r4
 8000474:	ea48 0803 	orr.w	r8, r8, r3
 8000478:	fbb4 f1f2 	udiv	r1, r4, r2
 800047c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000480:	fb02 4411 	mls	r4, r2, r1, r4
 8000484:	fa1f fc87 	uxth.w	ip, r7
 8000488:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800048c:	fb01 f30c 	mul.w	r3, r1, ip
 8000490:	42ab      	cmp	r3, r5
 8000492:	fa00 f40e 	lsl.w	r4, r0, lr
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x1bc>
 8000498:	19ed      	adds	r5, r5, r7
 800049a:	f101 30ff 	add.w	r0, r1, #4294967295
 800049e:	f080 808a 	bcs.w	80005b6 <__udivmoddi4+0x2c6>
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	f240 8087 	bls.w	80005b6 <__udivmoddi4+0x2c6>
 80004a8:	3902      	subs	r1, #2
 80004aa:	443d      	add	r5, r7
 80004ac:	1aeb      	subs	r3, r5, r3
 80004ae:	fa1f f588 	uxth.w	r5, r8
 80004b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004b6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004be:	fb00 f30c 	mul.w	r3, r0, ip
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x1e6>
 80004c6:	19ed      	adds	r5, r5, r7
 80004c8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004cc:	d26f      	bcs.n	80005ae <__udivmoddi4+0x2be>
 80004ce:	42ab      	cmp	r3, r5
 80004d0:	d96d      	bls.n	80005ae <__udivmoddi4+0x2be>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443d      	add	r5, r7
 80004d6:	1aeb      	subs	r3, r5, r3
 80004d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004dc:	e78f      	b.n	80003fe <__udivmoddi4+0x10e>
 80004de:	f1c1 0720 	rsb	r7, r1, #32
 80004e2:	fa22 f807 	lsr.w	r8, r2, r7
 80004e6:	408b      	lsls	r3, r1
 80004e8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ec:	ea48 0303 	orr.w	r3, r8, r3
 80004f0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004f4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004f8:	40fd      	lsrs	r5, r7
 80004fa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004fe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000502:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000506:	fb0c 5519 	mls	r5, ip, r9, r5
 800050a:	fa1f f883 	uxth.w	r8, r3
 800050e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000512:	fb09 f408 	mul.w	r4, r9, r8
 8000516:	42ac      	cmp	r4, r5
 8000518:	fa02 f201 	lsl.w	r2, r2, r1
 800051c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x244>
 8000522:	18ed      	adds	r5, r5, r3
 8000524:	f109 30ff 	add.w	r0, r9, #4294967295
 8000528:	d243      	bcs.n	80005b2 <__udivmoddi4+0x2c2>
 800052a:	42ac      	cmp	r4, r5
 800052c:	d941      	bls.n	80005b2 <__udivmoddi4+0x2c2>
 800052e:	f1a9 0902 	sub.w	r9, r9, #2
 8000532:	441d      	add	r5, r3
 8000534:	1b2d      	subs	r5, r5, r4
 8000536:	fa1f fe8e 	uxth.w	lr, lr
 800053a:	fbb5 f0fc 	udiv	r0, r5, ip
 800053e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000542:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000546:	fb00 f808 	mul.w	r8, r0, r8
 800054a:	45a0      	cmp	r8, r4
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x26e>
 800054e:	18e4      	adds	r4, r4, r3
 8000550:	f100 35ff 	add.w	r5, r0, #4294967295
 8000554:	d229      	bcs.n	80005aa <__udivmoddi4+0x2ba>
 8000556:	45a0      	cmp	r8, r4
 8000558:	d927      	bls.n	80005aa <__udivmoddi4+0x2ba>
 800055a:	3802      	subs	r0, #2
 800055c:	441c      	add	r4, r3
 800055e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000562:	eba4 0408 	sub.w	r4, r4, r8
 8000566:	fba0 8902 	umull	r8, r9, r0, r2
 800056a:	454c      	cmp	r4, r9
 800056c:	46c6      	mov	lr, r8
 800056e:	464d      	mov	r5, r9
 8000570:	d315      	bcc.n	800059e <__udivmoddi4+0x2ae>
 8000572:	d012      	beq.n	800059a <__udivmoddi4+0x2aa>
 8000574:	b156      	cbz	r6, 800058c <__udivmoddi4+0x29c>
 8000576:	ebba 030e 	subs.w	r3, sl, lr
 800057a:	eb64 0405 	sbc.w	r4, r4, r5
 800057e:	fa04 f707 	lsl.w	r7, r4, r7
 8000582:	40cb      	lsrs	r3, r1
 8000584:	431f      	orrs	r7, r3
 8000586:	40cc      	lsrs	r4, r1
 8000588:	6037      	str	r7, [r6, #0]
 800058a:	6074      	str	r4, [r6, #4]
 800058c:	2100      	movs	r1, #0
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	4618      	mov	r0, r3
 8000594:	e6f8      	b.n	8000388 <__udivmoddi4+0x98>
 8000596:	4690      	mov	r8, r2
 8000598:	e6e0      	b.n	800035c <__udivmoddi4+0x6c>
 800059a:	45c2      	cmp	sl, r8
 800059c:	d2ea      	bcs.n	8000574 <__udivmoddi4+0x284>
 800059e:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a2:	eb69 0503 	sbc.w	r5, r9, r3
 80005a6:	3801      	subs	r0, #1
 80005a8:	e7e4      	b.n	8000574 <__udivmoddi4+0x284>
 80005aa:	4628      	mov	r0, r5
 80005ac:	e7d7      	b.n	800055e <__udivmoddi4+0x26e>
 80005ae:	4640      	mov	r0, r8
 80005b0:	e791      	b.n	80004d6 <__udivmoddi4+0x1e6>
 80005b2:	4681      	mov	r9, r0
 80005b4:	e7be      	b.n	8000534 <__udivmoddi4+0x244>
 80005b6:	4601      	mov	r1, r0
 80005b8:	e778      	b.n	80004ac <__udivmoddi4+0x1bc>
 80005ba:	3802      	subs	r0, #2
 80005bc:	443c      	add	r4, r7
 80005be:	e745      	b.n	800044c <__udivmoddi4+0x15c>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e708      	b.n	80003d6 <__udivmoddi4+0xe6>
 80005c4:	f1a8 0802 	sub.w	r8, r8, #2
 80005c8:	443d      	add	r5, r7
 80005ca:	e72b      	b.n	8000424 <__udivmoddi4+0x134>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005d4:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <HAL_Init+0x40>)
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <HAL_Init+0x40>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <HAL_Init+0x40>)
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <HAL_Init+0x40>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <HAL_Init+0x40>)
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <HAL_Init+0x40>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f8:	2003      	movs	r0, #3
 80005fa:	f000 f925 	bl	8000848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 f808 	bl	8000614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000604:	f002 fec2 	bl	800338c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023c00 	.word	0x40023c00

08000614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <HAL_InitTick+0x54>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_InitTick+0x58>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062a:	fbb3 f3f1 	udiv	r3, r3, r1
 800062e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f93d 	bl	80008b2 <HAL_SYSTICK_Config>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
 8000640:	e00e      	b.n	8000660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2b0f      	cmp	r3, #15
 8000646:	d80a      	bhi.n	800065e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000648:	2200      	movs	r2, #0
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	f04f 30ff 	mov.w	r0, #4294967295
 8000650:	f000 f905 	bl	800085e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000654:	4a06      	ldr	r2, [pc, #24]	; (8000670 <HAL_InitTick+0x5c>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800065a:	2300      	movs	r3, #0
 800065c:	e000      	b.n	8000660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000008 	.word	0x20000008
 800066c:	20000004 	.word	0x20000004
 8000670:	20000000 	.word	0x20000000

08000674 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_IncTick+0x20>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_IncTick+0x24>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4413      	add	r3, r2
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <HAL_IncTick+0x24>)
 8000686:	6013      	str	r3, [r2, #0]
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000004 	.word	0x20000004
 8000698:	2000011c 	.word	0x2000011c

0800069c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  return uwTick;
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <HAL_GetTick+0x14>)
 80006a2:	681b      	ldr	r3, [r3, #0]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	2000011c 	.word	0x2000011c

080006b4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <NVIC_SetPriorityGrouping+0x44>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d0:	4013      	ands	r3, r2
 80006d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006e6:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <NVIC_SetPriorityGrouping+0x44>)
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	60d3      	str	r3, [r2, #12]
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <NVIC_GetPriorityGrouping+0x18>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	f003 0307 	and.w	r3, r3, #7
}
 800070a:	4618      	mov	r0, r3
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000722:	4909      	ldr	r1, [pc, #36]	; (8000748 <NVIC_EnableIRQ+0x30>)
 8000724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000728:	095b      	lsrs	r3, r3, #5
 800072a:	79fa      	ldrb	r2, [r7, #7]
 800072c:	f002 021f 	and.w	r2, r2, #31
 8000730:	2001      	movs	r0, #1
 8000732:	fa00 f202 	lsl.w	r2, r0, r2
 8000736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000e100 	.word	0xe000e100

0800074c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	da0b      	bge.n	8000778 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	490d      	ldr	r1, [pc, #52]	; (8000798 <NVIC_SetPriority+0x4c>)
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	f003 030f 	and.w	r3, r3, #15
 8000768:	3b04      	subs	r3, #4
 800076a:	683a      	ldr	r2, [r7, #0]
 800076c:	b2d2      	uxtb	r2, r2
 800076e:	0112      	lsls	r2, r2, #4
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	440b      	add	r3, r1
 8000774:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000776:	e009      	b.n	800078c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000778:	4908      	ldr	r1, [pc, #32]	; (800079c <NVIC_SetPriority+0x50>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	0112      	lsls	r2, r2, #4
 8000784:	b2d2      	uxtb	r2, r2
 8000786:	440b      	add	r3, r1
 8000788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00
 800079c:	e000e100 	.word	0xe000e100

080007a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f1c3 0307 	rsb	r3, r3, #7
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	bf28      	it	cs
 80007be:	2304      	movcs	r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3304      	adds	r3, #4
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d902      	bls.n	80007d0 <NVIC_EncodePriority+0x30>
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3b03      	subs	r3, #3
 80007ce:	e000      	b.n	80007d2 <NVIC_EncodePriority+0x32>
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	2201      	movs	r2, #1
 80007d6:	69bb      	ldr	r3, [r7, #24]
 80007d8:	fa02 f303 	lsl.w	r3, r2, r3
 80007dc:	1e5a      	subs	r2, r3, #1
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	401a      	ands	r2, r3
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e6:	2101      	movs	r1, #1
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	fa01 f303 	lsl.w	r3, r1, r3
 80007ee:	1e59      	subs	r1, r3, #1
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	4313      	orrs	r3, r2
         );
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3724      	adds	r7, #36	; 0x24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
	...

08000804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000814:	d301      	bcc.n	800081a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000816:	2301      	movs	r3, #1
 8000818:	e00f      	b.n	800083a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081a:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <SysTick_Config+0x40>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000822:	210f      	movs	r1, #15
 8000824:	f04f 30ff 	mov.w	r0, #4294967295
 8000828:	f7ff ff90 	bl	800074c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <SysTick_Config+0x40>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000832:	4b04      	ldr	r3, [pc, #16]	; (8000844 <SysTick_Config+0x40>)
 8000834:	2207      	movs	r2, #7
 8000836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	e000e010 	.word	0xe000e010

08000848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ff2f 	bl	80006b4 <NVIC_SetPriorityGrouping>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800085e:	b580      	push	{r7, lr}
 8000860:	b086      	sub	sp, #24
 8000862:	af00      	add	r7, sp, #0
 8000864:	4603      	mov	r3, r0
 8000866:	60b9      	str	r1, [r7, #8]
 8000868:	607a      	str	r2, [r7, #4]
 800086a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000870:	f7ff ff44 	bl	80006fc <NVIC_GetPriorityGrouping>
 8000874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	68b9      	ldr	r1, [r7, #8]
 800087a:	6978      	ldr	r0, [r7, #20]
 800087c:	f7ff ff90 	bl	80007a0 <NVIC_EncodePriority>
 8000880:	4602      	mov	r2, r0
 8000882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff5f 	bl	800074c <NVIC_SetPriority>
}
 800088e:	bf00      	nop
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff37 	bl	8000718 <NVIC_EnableIRQ>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff ffa2 	bl	8000804 <SysTick_Config>
 80008c0:	4603      	mov	r3, r0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	d106      	bne.n	80008e8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008da:	4a09      	ldr	r2, [pc, #36]	; (8000900 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80008e6:	e005      	b.n	80008f4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008e8:	4a05      	ldr	r2, [pc, #20]	; (8000900 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f023 0304 	bic.w	r3, r3, #4
 80008f2:	6013      	str	r3, [r2, #0]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	e000e010 	.word	0xe000e010

08000904 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000908:	f002 f974 	bl	8002bf4 <HAL_SYSTICK_Callback>
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000910:	b480      	push	{r7}
 8000912:	b089      	sub	sp, #36	; 0x24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
 800092a:	e165      	b.n	8000bf8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800092c:	2201      	movs	r2, #1
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	429a      	cmp	r2, r3
 8000946:	f040 8154 	bne.w	8000bf2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	2b02      	cmp	r3, #2
 8000950:	d003      	beq.n	800095a <HAL_GPIO_Init+0x4a>
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	2b12      	cmp	r3, #18
 8000958:	d123      	bne.n	80009a2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	08da      	lsrs	r2, r3, #3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3208      	adds	r2, #8
 8000962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	220f      	movs	r2, #15
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43db      	mvns	r3, r3
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	4013      	ands	r3, r2
 800097c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	691a      	ldr	r2, [r3, #16]
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	f003 0307 	and.w	r3, r3, #7
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	69ba      	ldr	r2, [r7, #24]
 8000990:	4313      	orrs	r3, r2
 8000992:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	08da      	lsrs	r2, r3, #3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3208      	adds	r2, #8
 800099c:	69b9      	ldr	r1, [r7, #24]
 800099e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2203      	movs	r2, #3
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	4013      	ands	r3, r2
 80009b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f003 0203 	and.w	r2, r3, #3
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	69ba      	ldr	r2, [r7, #24]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d00b      	beq.n	80009f6 <HAL_GPIO_Init+0xe6>
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d007      	beq.n	80009f6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009ea:	2b11      	cmp	r3, #17
 80009ec:	d003      	beq.n	80009f6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	2b12      	cmp	r3, #18
 80009f4:	d130      	bne.n	8000a58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	2203      	movs	r2, #3
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	68da      	ldr	r2, [r3, #12]
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	69ba      	ldr	r2, [r7, #24]
 8000a24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	43db      	mvns	r3, r3
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	091b      	lsrs	r3, r3, #4
 8000a42:	f003 0201 	and.w	r2, r3, #1
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	2203      	movs	r2, #3
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	69ba      	ldr	r2, [r7, #24]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	689a      	ldr	r2, [r3, #8]
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	f000 80ae 	beq.w	8000bf2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4a5c      	ldr	r2, [pc, #368]	; (8000c0c <HAL_GPIO_Init+0x2fc>)
 8000a9c:	4b5b      	ldr	r3, [pc, #364]	; (8000c0c <HAL_GPIO_Init+0x2fc>)
 8000a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b59      	ldr	r3, [pc, #356]	; (8000c0c <HAL_GPIO_Init+0x2fc>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ab2:	4a57      	ldr	r2, [pc, #348]	; (8000c10 <HAL_GPIO_Init+0x300>)
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	089b      	lsrs	r3, r3, #2
 8000ab8:	3302      	adds	r3, #2
 8000aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f003 0303 	and.w	r3, r3, #3
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	220f      	movs	r2, #15
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	69ba      	ldr	r2, [r7, #24]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a4e      	ldr	r2, [pc, #312]	; (8000c14 <HAL_GPIO_Init+0x304>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d025      	beq.n	8000b2a <HAL_GPIO_Init+0x21a>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a4d      	ldr	r2, [pc, #308]	; (8000c18 <HAL_GPIO_Init+0x308>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d01f      	beq.n	8000b26 <HAL_GPIO_Init+0x216>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a4c      	ldr	r2, [pc, #304]	; (8000c1c <HAL_GPIO_Init+0x30c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d019      	beq.n	8000b22 <HAL_GPIO_Init+0x212>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a4b      	ldr	r2, [pc, #300]	; (8000c20 <HAL_GPIO_Init+0x310>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d013      	beq.n	8000b1e <HAL_GPIO_Init+0x20e>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a4a      	ldr	r2, [pc, #296]	; (8000c24 <HAL_GPIO_Init+0x314>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d00d      	beq.n	8000b1a <HAL_GPIO_Init+0x20a>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a49      	ldr	r2, [pc, #292]	; (8000c28 <HAL_GPIO_Init+0x318>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d007      	beq.n	8000b16 <HAL_GPIO_Init+0x206>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a48      	ldr	r2, [pc, #288]	; (8000c2c <HAL_GPIO_Init+0x31c>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d101      	bne.n	8000b12 <HAL_GPIO_Init+0x202>
 8000b0e:	2306      	movs	r3, #6
 8000b10:	e00c      	b.n	8000b2c <HAL_GPIO_Init+0x21c>
 8000b12:	2307      	movs	r3, #7
 8000b14:	e00a      	b.n	8000b2c <HAL_GPIO_Init+0x21c>
 8000b16:	2305      	movs	r3, #5
 8000b18:	e008      	b.n	8000b2c <HAL_GPIO_Init+0x21c>
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	e006      	b.n	8000b2c <HAL_GPIO_Init+0x21c>
 8000b1e:	2303      	movs	r3, #3
 8000b20:	e004      	b.n	8000b2c <HAL_GPIO_Init+0x21c>
 8000b22:	2302      	movs	r3, #2
 8000b24:	e002      	b.n	8000b2c <HAL_GPIO_Init+0x21c>
 8000b26:	2301      	movs	r3, #1
 8000b28:	e000      	b.n	8000b2c <HAL_GPIO_Init+0x21c>
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	69fa      	ldr	r2, [r7, #28]
 8000b2e:	f002 0203 	and.w	r2, r2, #3
 8000b32:	0092      	lsls	r2, r2, #2
 8000b34:	4093      	lsls	r3, r2
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b3c:	4934      	ldr	r1, [pc, #208]	; (8000c10 <HAL_GPIO_Init+0x300>)
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	089b      	lsrs	r3, r3, #2
 8000b42:	3302      	adds	r3, #2
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b4a:	4b39      	ldr	r3, [pc, #228]	; (8000c30 <HAL_GPIO_Init+0x320>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	43db      	mvns	r3, r3
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	4013      	ands	r3, r2
 8000b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000b66:	69ba      	ldr	r2, [r7, #24]
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b6e:	4a30      	ldr	r2, [pc, #192]	; (8000c30 <HAL_GPIO_Init+0x320>)
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b74:	4b2e      	ldr	r3, [pc, #184]	; (8000c30 <HAL_GPIO_Init+0x320>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	4013      	ands	r3, r2
 8000b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d003      	beq.n	8000b98 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b98:	4a25      	ldr	r2, [pc, #148]	; (8000c30 <HAL_GPIO_Init+0x320>)
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b9e:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <HAL_GPIO_Init+0x320>)
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	4013      	ands	r3, r2
 8000bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d003      	beq.n	8000bc2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bc2:	4a1b      	ldr	r2, [pc, #108]	; (8000c30 <HAL_GPIO_Init+0x320>)
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <HAL_GPIO_Init+0x320>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d003      	beq.n	8000bec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000bec:	4a10      	ldr	r2, [pc, #64]	; (8000c30 <HAL_GPIO_Init+0x320>)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	61fb      	str	r3, [r7, #28]
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	2b0f      	cmp	r3, #15
 8000bfc:	f67f ae96 	bls.w	800092c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c00:	bf00      	nop
 8000c02:	3724      	adds	r7, #36	; 0x24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40013800 	.word	0x40013800
 8000c14:	40020000 	.word	0x40020000
 8000c18:	40020400 	.word	0x40020400
 8000c1c:	40020800 	.word	0x40020800
 8000c20:	40020c00 	.word	0x40020c00
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40021400 	.word	0x40021400
 8000c2c:	40021800 	.word	0x40021800
 8000c30:	40013c00 	.word	0x40013c00

08000c34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	691a      	ldr	r2, [r3, #16]
 8000c44:	887b      	ldrh	r3, [r7, #2]
 8000c46:	4013      	ands	r3, r2
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d002      	beq.n	8000c52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	73fb      	strb	r3, [r7, #15]
 8000c50:	e001      	b.n	8000c56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	807b      	strh	r3, [r7, #2]
 8000c70:	4613      	mov	r3, r2
 8000c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c74:	787b      	ldrb	r3, [r7, #1]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d003      	beq.n	8000c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c7a:	887a      	ldrh	r2, [r7, #2]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c80:	e003      	b.n	8000c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c82:	887b      	ldrh	r3, [r7, #2]
 8000c84:	041a      	lsls	r2, r3, #16
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	619a      	str	r2, [r3, #24]
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d101      	bne.n	8000cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e0ca      	b.n	8000e42 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000cac:	4b67      	ldr	r3, [pc, #412]	; (8000e4c <HAL_RCC_ClockConfig+0x1b4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 020f 	and.w	r2, r3, #15
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d20c      	bcs.n	8000cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cba:	4b64      	ldr	r3, [pc, #400]	; (8000e4c <HAL_RCC_ClockConfig+0x1b4>)
 8000cbc:	683a      	ldr	r2, [r7, #0]
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cc2:	4b62      	ldr	r3, [pc, #392]	; (8000e4c <HAL_RCC_ClockConfig+0x1b4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 020f 	and.w	r2, r3, #15
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d001      	beq.n	8000cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e0b6      	b.n	8000e42 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d020      	beq.n	8000d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d005      	beq.n	8000cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cec:	4a58      	ldr	r2, [pc, #352]	; (8000e50 <HAL_RCC_ClockConfig+0x1b8>)
 8000cee:	4b58      	ldr	r3, [pc, #352]	; (8000e50 <HAL_RCC_ClockConfig+0x1b8>)
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f003 0308 	and.w	r3, r3, #8
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d005      	beq.n	8000d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d04:	4a52      	ldr	r2, [pc, #328]	; (8000e50 <HAL_RCC_ClockConfig+0x1b8>)
 8000d06:	4b52      	ldr	r3, [pc, #328]	; (8000e50 <HAL_RCC_ClockConfig+0x1b8>)
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d10:	494f      	ldr	r1, [pc, #316]	; (8000e50 <HAL_RCC_ClockConfig+0x1b8>)
 8000d12:	4b4f      	ldr	r3, [pc, #316]	; (8000e50 <HAL_RCC_ClockConfig+0x1b8>)
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d044      	beq.n	8000db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d107      	bne.n	8000d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d36:	4b46      	ldr	r3, [pc, #280]	; (8000e50 <HAL_RCC_ClockConfig+0x1b8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d119      	bne.n	8000d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e07d      	b.n	8000e42 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d003      	beq.n	8000d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	d107      	bne.n	8000d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d56:	4b3e      	ldr	r3, [pc, #248]	; (8000e50 <HAL_RCC_ClockConfig+0x1b8>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d109      	bne.n	8000d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e06d      	b.n	8000e42 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d66:	4b3a      	ldr	r3, [pc, #232]	; (8000e50 <HAL_RCC_ClockConfig+0x1b8>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e065      	b.n	8000e42 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d76:	4936      	ldr	r1, [pc, #216]	; (8000e50 <HAL_RCC_ClockConfig+0x1b8>)
 8000d78:	4b35      	ldr	r3, [pc, #212]	; (8000e50 <HAL_RCC_ClockConfig+0x1b8>)
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f023 0203 	bic.w	r2, r3, #3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d88:	f7ff fc88 	bl	800069c <HAL_GetTick>
 8000d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d8e:	e00a      	b.n	8000da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d90:	f7ff fc84 	bl	800069c <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d901      	bls.n	8000da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000da2:	2303      	movs	r3, #3
 8000da4:	e04d      	b.n	8000e42 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000da6:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <HAL_RCC_ClockConfig+0x1b8>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f003 020c 	and.w	r2, r3, #12
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d1eb      	bne.n	8000d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000db8:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <HAL_RCC_ClockConfig+0x1b4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 020f 	and.w	r2, r3, #15
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d90c      	bls.n	8000de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <HAL_RCC_ClockConfig+0x1b4>)
 8000dc8:	683a      	ldr	r2, [r7, #0]
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dce:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <HAL_RCC_ClockConfig+0x1b4>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 020f 	and.w	r2, r3, #15
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d001      	beq.n	8000de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e030      	b.n	8000e42 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d008      	beq.n	8000dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dec:	4918      	ldr	r1, [pc, #96]	; (8000e50 <HAL_RCC_ClockConfig+0x1b8>)
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_RCC_ClockConfig+0x1b8>)
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d009      	beq.n	8000e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e0a:	4911      	ldr	r1, [pc, #68]	; (8000e50 <HAL_RCC_ClockConfig+0x1b8>)
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_RCC_ClockConfig+0x1b8>)
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e1e:	f000 f851 	bl	8000ec4 <HAL_RCC_GetSysClockFreq>
 8000e22:	4601      	mov	r1, r0
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_RCC_ClockConfig+0x1b8>)
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	091b      	lsrs	r3, r3, #4
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <HAL_RCC_ClockConfig+0x1bc>)
 8000e30:	5cd3      	ldrb	r3, [r2, r3]
 8000e32:	fa21 f303 	lsr.w	r3, r1, r3
 8000e36:	4a08      	ldr	r2, [pc, #32]	; (8000e58 <HAL_RCC_ClockConfig+0x1c0>)
 8000e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff fbea 	bl	8000614 <HAL_InitTick>

  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023c00 	.word	0x40023c00
 8000e50:	40023800 	.word	0x40023800
 8000e54:	080046a0 	.word	0x080046a0
 8000e58:	20000008 	.word	0x20000008

08000e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008

08000e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000e78:	f7ff fff0 	bl	8000e5c <HAL_RCC_GetHCLKFreq>
 8000e7c:	4601      	mov	r1, r0
 8000e7e:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	0a9b      	lsrs	r3, r3, #10
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	4a03      	ldr	r2, [pc, #12]	; (8000e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e8a:	5cd3      	ldrb	r3, [r2, r3]
 8000e8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40023800 	.word	0x40023800
 8000e98:	080046b0 	.word	0x080046b0

08000e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000ea0:	f7ff ffdc 	bl	8000e5c <HAL_RCC_GetHCLKFreq>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	0b5b      	lsrs	r3, r3, #13
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	4a03      	ldr	r2, [pc, #12]	; (8000ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000eb2:	5cd3      	ldrb	r3, [r2, r3]
 8000eb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	080046b0 	.word	0x080046b0

08000ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ec8:	b0a1      	sub	sp, #132	; 0x84
 8000eca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ee0:	4ba0      	ldr	r3, [pc, #640]	; (8001164 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f003 030c 	and.w	r3, r3, #12
 8000ee8:	2b0c      	cmp	r3, #12
 8000eea:	f200 8193 	bhi.w	8001214 <HAL_RCC_GetSysClockFreq+0x350>
 8000eee:	a201      	add	r2, pc, #4	; (adr r2, 8000ef4 <HAL_RCC_GetSysClockFreq+0x30>)
 8000ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef4:	08000f29 	.word	0x08000f29
 8000ef8:	08001215 	.word	0x08001215
 8000efc:	08001215 	.word	0x08001215
 8000f00:	08001215 	.word	0x08001215
 8000f04:	08000f2f 	.word	0x08000f2f
 8000f08:	08001215 	.word	0x08001215
 8000f0c:	08001215 	.word	0x08001215
 8000f10:	08001215 	.word	0x08001215
 8000f14:	08000f35 	.word	0x08000f35
 8000f18:	08001215 	.word	0x08001215
 8000f1c:	08001215 	.word	0x08001215
 8000f20:	08001215 	.word	0x08001215
 8000f24:	080010b1 	.word	0x080010b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000f28:	4b8f      	ldr	r3, [pc, #572]	; (8001168 <HAL_RCC_GetSysClockFreq+0x2a4>)
 8000f2a:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 8000f2c:	e175      	b.n	800121a <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000f2e:	4b8f      	ldr	r3, [pc, #572]	; (800116c <HAL_RCC_GetSysClockFreq+0x2a8>)
 8000f30:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8000f32:	e172      	b.n	800121a <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f34:	4b8b      	ldr	r3, [pc, #556]	; (8001164 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f3c:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f3e:	4b89      	ldr	r3, [pc, #548]	; (8001164 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d056      	beq.n	8000ff8 <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f4a:	4b86      	ldr	r3, [pc, #536]	; (8001164 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	099b      	lsrs	r3, r3, #6
 8000f50:	f04f 0400 	mov.w	r4, #0
 8000f54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000f58:	f04f 0200 	mov.w	r2, #0
 8000f5c:	ea01 0103 	and.w	r1, r1, r3
 8000f60:	ea02 0204 	and.w	r2, r2, r4
 8000f64:	460b      	mov	r3, r1
 8000f66:	4614      	mov	r4, r2
 8000f68:	0160      	lsls	r0, r4, #5
 8000f6a:	6678      	str	r0, [r7, #100]	; 0x64
 8000f6c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000f6e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8000f72:	6678      	str	r0, [r7, #100]	; 0x64
 8000f74:	015b      	lsls	r3, r3, #5
 8000f76:	663b      	str	r3, [r7, #96]	; 0x60
 8000f78:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8000f7c:	1a5b      	subs	r3, r3, r1
 8000f7e:	eb64 0402 	sbc.w	r4, r4, r2
 8000f82:	01a0      	lsls	r0, r4, #6
 8000f84:	65f8      	str	r0, [r7, #92]	; 0x5c
 8000f86:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000f88:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 8000f8c:	65f8      	str	r0, [r7, #92]	; 0x5c
 8000f8e:	0198      	lsls	r0, r3, #6
 8000f90:	65b8      	str	r0, [r7, #88]	; 0x58
 8000f92:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8000f96:	1aed      	subs	r5, r5, r3
 8000f98:	eb66 0604 	sbc.w	r6, r6, r4
 8000f9c:	4633      	mov	r3, r6
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	657b      	str	r3, [r7, #84]	; 0x54
 8000fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fa4:	4628      	mov	r0, r5
 8000fa6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000faa:	657b      	str	r3, [r7, #84]	; 0x54
 8000fac:	462b      	mov	r3, r5
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	653b      	str	r3, [r7, #80]	; 0x50
 8000fb2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8000fb6:	461d      	mov	r5, r3
 8000fb8:	4626      	mov	r6, r4
 8000fba:	186b      	adds	r3, r5, r1
 8000fbc:	eb46 0402 	adc.w	r4, r6, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	4621      	mov	r1, r4
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	025b      	lsls	r3, r3, #9
 8000fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fcc:	4602      	mov	r2, r0
 8000fce:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 8000fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	025b      	lsls	r3, r3, #9
 8000fd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8000fda:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8000fde:	4618      	mov	r0, r3
 8000fe0:	4621      	mov	r1, r4
 8000fe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fe4:	f04f 0400 	mov.w	r4, #0
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4623      	mov	r3, r4
 8000fec:	f7ff f968 	bl	80002c0 <__aeabi_uldivmod>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	460c      	mov	r4, r1
 8000ff4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000ff6:	e04d      	b.n	8001094 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ff8:	4b5a      	ldr	r3, [pc, #360]	; (8001164 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	099b      	lsrs	r3, r3, #6
 8000ffe:	f04f 0400 	mov.w	r4, #0
 8001002:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	ea01 0103 	and.w	r1, r1, r3
 800100e:	ea02 0204 	and.w	r2, r2, r4
 8001012:	460b      	mov	r3, r1
 8001014:	4614      	mov	r4, r2
 8001016:	0160      	lsls	r0, r4, #5
 8001018:	6478      	str	r0, [r7, #68]	; 0x44
 800101a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800101c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001020:	6478      	str	r0, [r7, #68]	; 0x44
 8001022:	015b      	lsls	r3, r3, #5
 8001024:	643b      	str	r3, [r7, #64]	; 0x40
 8001026:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800102a:	1a5b      	subs	r3, r3, r1
 800102c:	eb64 0402 	sbc.w	r4, r4, r2
 8001030:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 8001034:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 8001038:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 800103c:	ebba 0a03 	subs.w	sl, sl, r3
 8001040:	eb6b 0b04 	sbc.w	fp, fp, r4
 8001044:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001048:	63fb      	str	r3, [r7, #60]	; 0x3c
 800104a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800104c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001050:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001052:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8001056:	63bb      	str	r3, [r7, #56]	; 0x38
 8001058:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 800105c:	eb1a 0a01 	adds.w	sl, sl, r1
 8001060:	eb4b 0b02 	adc.w	fp, fp, r2
 8001064:	ea4f 238b 	mov.w	r3, fp, lsl #10
 8001068:	637b      	str	r3, [r7, #52]	; 0x34
 800106a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106c:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 8001070:	637b      	str	r3, [r7, #52]	; 0x34
 8001072:	ea4f 238a 	mov.w	r3, sl, lsl #10
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
 8001078:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800107c:	4650      	mov	r0, sl
 800107e:	4659      	mov	r1, fp
 8001080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001082:	f04f 0400 	mov.w	r4, #0
 8001086:	461a      	mov	r2, r3
 8001088:	4623      	mov	r3, r4
 800108a:	f7ff f919 	bl	80002c0 <__aeabi_uldivmod>
 800108e:	4603      	mov	r3, r0
 8001090:	460c      	mov	r4, r1
 8001092:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001094:	4b33      	ldr	r3, [pc, #204]	; (8001164 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	0c1b      	lsrs	r3, r3, #16
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	3301      	adds	r3, #1
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 80010a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80010a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ac:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80010ae:	e0b4      	b.n	800121a <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010b0:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010b8:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010ba:	4b2a      	ldr	r3, [pc, #168]	; (8001164 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d054      	beq.n	8001170 <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010c6:	4b27      	ldr	r3, [pc, #156]	; (8001164 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	099b      	lsrs	r3, r3, #6
 80010cc:	f04f 0400 	mov.w	r4, #0
 80010d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	ea01 0103 	and.w	r1, r1, r3
 80010dc:	ea02 0204 	and.w	r2, r2, r4
 80010e0:	460b      	mov	r3, r1
 80010e2:	4614      	mov	r4, r2
 80010e4:	0160      	lsls	r0, r4, #5
 80010e6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80010e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010ea:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80010ee:	62f8      	str	r0, [r7, #44]	; 0x2c
 80010f0:	015b      	lsls	r3, r3, #5
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80010f4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80010f8:	1a5b      	subs	r3, r3, r1
 80010fa:	eb64 0402 	sbc.w	r4, r4, r2
 80010fe:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001102:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001106:	ea4f 1883 	mov.w	r8, r3, lsl #6
 800110a:	ebb8 0803 	subs.w	r8, r8, r3
 800110e:	eb69 0904 	sbc.w	r9, r9, r4
 8001112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
 8001118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
 8001120:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001124:	623b      	str	r3, [r7, #32]
 8001126:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800112a:	eb18 0801 	adds.w	r8, r8, r1
 800112e:	eb49 0902 	adc.w	r9, r9, r2
 8001132:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001136:	61fb      	str	r3, [r7, #28]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800113e:	61fb      	str	r3, [r7, #28]
 8001140:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800114a:	4640      	mov	r0, r8
 800114c:	4649      	mov	r1, r9
 800114e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001150:	f04f 0400 	mov.w	r4, #0
 8001154:	461a      	mov	r2, r3
 8001156:	4623      	mov	r3, r4
 8001158:	f7ff f8b2 	bl	80002c0 <__aeabi_uldivmod>
 800115c:	4603      	mov	r3, r0
 800115e:	460c      	mov	r4, r1
 8001160:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001162:	e04b      	b.n	80011fc <HAL_RCC_GetSysClockFreq+0x338>
 8001164:	40023800 	.word	0x40023800
 8001168:	00f42400 	.word	0x00f42400
 800116c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001170:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <HAL_RCC_GetSysClockFreq+0x364>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	099b      	lsrs	r3, r3, #6
 8001176:	f04f 0400 	mov.w	r4, #0
 800117a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	ea01 0103 	and.w	r1, r1, r3
 8001186:	ea02 0204 	and.w	r2, r2, r4
 800118a:	460b      	mov	r3, r1
 800118c:	4614      	mov	r4, r2
 800118e:	0160      	lsls	r0, r4, #5
 8001190:	6178      	str	r0, [r7, #20]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001198:	6178      	str	r0, [r7, #20]
 800119a:	015b      	lsls	r3, r3, #5
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80011a2:	1a5b      	subs	r3, r3, r1
 80011a4:	eb64 0402 	sbc.w	r4, r4, r2
 80011a8:	01a6      	lsls	r6, r4, #6
 80011aa:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80011ae:	019d      	lsls	r5, r3, #6
 80011b0:	1aed      	subs	r5, r5, r3
 80011b2:	eb66 0604 	sbc.w	r6, r6, r4
 80011b6:	00f3      	lsls	r3, r6, #3
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	00eb      	lsls	r3, r5, #3
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80011ca:	186d      	adds	r5, r5, r1
 80011cc:	eb46 0602 	adc.w	r6, r6, r2
 80011d0:	02b3      	lsls	r3, r6, #10
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	02ab      	lsls	r3, r5, #10
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	e897 0060 	ldmia.w	r7, {r5, r6}
 80011e4:	4628      	mov	r0, r5
 80011e6:	4631      	mov	r1, r6
 80011e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011ea:	f04f 0400 	mov.w	r4, #0
 80011ee:	461a      	mov	r2, r3
 80011f0:	4623      	mov	r3, r4
 80011f2:	f7ff f865 	bl	80002c0 <__aeabi_uldivmod>
 80011f6:	4603      	mov	r3, r0
 80011f8:	460c      	mov	r4, r1
 80011fa:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_RCC_GetSysClockFreq+0x364>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	0f1b      	lsrs	r3, r3, #28
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 8001208:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800120a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800120c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001210:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001212:	e002      	b.n	800121a <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_RCC_GetSysClockFreq+0x368>)
 8001216:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800121a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 800121c:	4618      	mov	r0, r3
 800121e:	3784      	adds	r7, #132	; 0x84
 8001220:	46bd      	mov	sp, r7
 8001222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800
 800122c:	00f42400 	.word	0x00f42400

08001230 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 8083 	beq.w	8001350 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800124a:	4b95      	ldr	r3, [pc, #596]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 030c 	and.w	r3, r3, #12
 8001252:	2b04      	cmp	r3, #4
 8001254:	d019      	beq.n	800128a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001256:	4b92      	ldr	r3, [pc, #584]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800125e:	2b08      	cmp	r3, #8
 8001260:	d106      	bne.n	8001270 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001262:	4b8f      	ldr	r3, [pc, #572]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800126e:	d00c      	beq.n	800128a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001270:	4b8b      	ldr	r3, [pc, #556]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001278:	2b0c      	cmp	r3, #12
 800127a:	d112      	bne.n	80012a2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127c:	4b88      	ldr	r3, [pc, #544]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001288:	d10b      	bne.n	80012a2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128a:	4b85      	ldr	r3, [pc, #532]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d05b      	beq.n	800134e <HAL_RCC_OscConfig+0x11e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d157      	bne.n	800134e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e216      	b.n	80016d0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012aa:	d106      	bne.n	80012ba <HAL_RCC_OscConfig+0x8a>
 80012ac:	4a7c      	ldr	r2, [pc, #496]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80012ae:	4b7c      	ldr	r3, [pc, #496]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	e01d      	b.n	80012f6 <HAL_RCC_OscConfig+0xc6>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c2:	d10c      	bne.n	80012de <HAL_RCC_OscConfig+0xae>
 80012c4:	4a76      	ldr	r2, [pc, #472]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80012c6:	4b76      	ldr	r3, [pc, #472]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4a73      	ldr	r2, [pc, #460]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80012d2:	4b73      	ldr	r3, [pc, #460]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	e00b      	b.n	80012f6 <HAL_RCC_OscConfig+0xc6>
 80012de:	4a70      	ldr	r2, [pc, #448]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80012e0:	4b6f      	ldr	r3, [pc, #444]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	4a6d      	ldr	r2, [pc, #436]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80012ec:	4b6c      	ldr	r3, [pc, #432]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d013      	beq.n	8001326 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fe:	f7ff f9cd 	bl	800069c <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001306:	f7ff f9c9 	bl	800069c <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b64      	cmp	r3, #100	; 0x64
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e1db      	b.n	80016d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001318:	4b61      	ldr	r3, [pc, #388]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0xd6>
 8001324:	e014      	b.n	8001350 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001326:	f7ff f9b9 	bl	800069c <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800132e:	f7ff f9b5 	bl	800069c <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b64      	cmp	r3, #100	; 0x64
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e1c7      	b.n	80016d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001340:	4b57      	ldr	r3, [pc, #348]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1f0      	bne.n	800132e <HAL_RCC_OscConfig+0xfe>
 800134c:	e000      	b.n	8001350 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d06f      	beq.n	800143c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800135c:	4b50      	ldr	r3, [pc, #320]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 030c 	and.w	r3, r3, #12
 8001364:	2b00      	cmp	r3, #0
 8001366:	d017      	beq.n	8001398 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001368:	4b4d      	ldr	r3, [pc, #308]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001370:	2b08      	cmp	r3, #8
 8001372:	d105      	bne.n	8001380 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001374:	4b4a      	ldr	r3, [pc, #296]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00b      	beq.n	8001398 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001380:	4b47      	ldr	r3, [pc, #284]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001388:	2b0c      	cmp	r3, #12
 800138a:	d11c      	bne.n	80013c6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800138c:	4b44      	ldr	r3, [pc, #272]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d116      	bne.n	80013c6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001398:	4b41      	ldr	r3, [pc, #260]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d005      	beq.n	80013b0 <HAL_RCC_OscConfig+0x180>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d001      	beq.n	80013b0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e18f      	b.n	80016d0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b0:	493b      	ldr	r1, [pc, #236]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80013b2:	4b3b      	ldr	r3, [pc, #236]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c4:	e03a      	b.n	800143c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d020      	beq.n	8001410 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ce:	4b35      	ldr	r3, [pc, #212]	; (80014a4 <HAL_RCC_OscConfig+0x274>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d4:	f7ff f962 	bl	800069c <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013dc:	f7ff f95e 	bl	800069c <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e170      	b.n	80016d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ee:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fa:	4929      	ldr	r1, [pc, #164]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80013fc:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
 800140e:	e015      	b.n	800143c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <HAL_RCC_OscConfig+0x274>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001416:	f7ff f941 	bl	800069c <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800141e:	f7ff f93d 	bl	800069c <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e14f      	b.n	80016d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f0      	bne.n	800141e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	2b00      	cmp	r3, #0
 8001446:	d037      	beq.n	80014b8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d016      	beq.n	800147e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 8001452:	2201      	movs	r2, #1
 8001454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001456:	f7ff f921 	bl	800069c <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145e:	f7ff f91d 	bl	800069c <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e12f      	b.n	80016d0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 8001472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x22e>
 800147c:	e01c      	b.n	80014b8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001484:	f7ff f90a 	bl	800069c <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148a:	e00f      	b.n	80014ac <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148c:	f7ff f906 	bl	800069c <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d908      	bls.n	80014ac <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e118      	b.n	80016d0 <HAL_RCC_OscConfig+0x4a0>
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	42470000 	.word	0x42470000
 80014a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ac:	4b8a      	ldr	r3, [pc, #552]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 80014ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1e9      	bne.n	800148c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 8097 	beq.w	80015f4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ca:	4b83      	ldr	r3, [pc, #524]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10f      	bne.n	80014f6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4a7f      	ldr	r2, [pc, #508]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 80014dc:	4b7e      	ldr	r3, [pc, #504]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b7c      	ldr	r3, [pc, #496]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014f2:	2301      	movs	r3, #1
 80014f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f6:	4b79      	ldr	r3, [pc, #484]	; (80016dc <HAL_RCC_OscConfig+0x4ac>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d118      	bne.n	8001534 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001502:	4a76      	ldr	r2, [pc, #472]	; (80016dc <HAL_RCC_OscConfig+0x4ac>)
 8001504:	4b75      	ldr	r3, [pc, #468]	; (80016dc <HAL_RCC_OscConfig+0x4ac>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800150e:	f7ff f8c5 	bl	800069c <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001516:	f7ff f8c1 	bl	800069c <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e0d3      	b.n	80016d0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001528:	4b6c      	ldr	r3, [pc, #432]	; (80016dc <HAL_RCC_OscConfig+0x4ac>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d106      	bne.n	800154a <HAL_RCC_OscConfig+0x31a>
 800153c:	4a66      	ldr	r2, [pc, #408]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 800153e:	4b66      	ldr	r3, [pc, #408]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6713      	str	r3, [r2, #112]	; 0x70
 8001548:	e01c      	b.n	8001584 <HAL_RCC_OscConfig+0x354>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b05      	cmp	r3, #5
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0x33c>
 8001552:	4a61      	ldr	r2, [pc, #388]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 8001554:	4b60      	ldr	r3, [pc, #384]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6713      	str	r3, [r2, #112]	; 0x70
 800155e:	4a5e      	ldr	r2, [pc, #376]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 8001560:	4b5d      	ldr	r3, [pc, #372]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6713      	str	r3, [r2, #112]	; 0x70
 800156a:	e00b      	b.n	8001584 <HAL_RCC_OscConfig+0x354>
 800156c:	4a5a      	ldr	r2, [pc, #360]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 800156e:	4b5a      	ldr	r3, [pc, #360]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001572:	f023 0301 	bic.w	r3, r3, #1
 8001576:	6713      	str	r3, [r2, #112]	; 0x70
 8001578:	4a57      	ldr	r2, [pc, #348]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 800157a:	4b57      	ldr	r3, [pc, #348]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157e:	f023 0304 	bic.w	r3, r3, #4
 8001582:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d015      	beq.n	80015b8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158c:	f7ff f886 	bl	800069c <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001592:	e00a      	b.n	80015aa <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001594:	f7ff f882 	bl	800069c <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e092      	b.n	80016d0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015aa:	4b4b      	ldr	r3, [pc, #300]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0ee      	beq.n	8001594 <HAL_RCC_OscConfig+0x364>
 80015b6:	e014      	b.n	80015e2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b8:	f7ff f870 	bl	800069c <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015be:	e00a      	b.n	80015d6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c0:	f7ff f86c 	bl	800069c <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e07c      	b.n	80016d0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d6:	4b40      	ldr	r3, [pc, #256]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1ee      	bne.n	80015c0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d105      	bne.n	80015f4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e8:	4a3b      	ldr	r2, [pc, #236]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 80015ea:	4b3b      	ldr	r3, [pc, #236]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d068      	beq.n	80016ce <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015fc:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 030c 	and.w	r3, r3, #12
 8001604:	2b08      	cmp	r3, #8
 8001606:	d060      	beq.n	80016ca <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d145      	bne.n	800169c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001610:	4b33      	ldr	r3, [pc, #204]	; (80016e0 <HAL_RCC_OscConfig+0x4b0>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001616:	f7ff f841 	bl	800069c <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161e:	f7ff f83d 	bl	800069c <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e04f      	b.n	80016d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001630:	4b29      	ldr	r3, [pc, #164]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f0      	bne.n	800161e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800163c:	4926      	ldr	r1, [pc, #152]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69da      	ldr	r2, [r3, #28]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	019b      	lsls	r3, r3, #6
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	085b      	lsrs	r3, r3, #1
 8001656:	3b01      	subs	r3, #1
 8001658:	041b      	lsls	r3, r3, #16
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	061b      	lsls	r3, r3, #24
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	071b      	lsls	r3, r3, #28
 800166a:	4313      	orrs	r3, r2
 800166c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <HAL_RCC_OscConfig+0x4b0>)
 8001670:	2201      	movs	r2, #1
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff f812 	bl	800069c <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff f80e 	bl	800069c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e020      	b.n	80016d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x44c>
 800169a:	e018      	b.n	80016ce <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169c:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <HAL_RCC_OscConfig+0x4b0>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a2:	f7fe fffb 	bl	800069c <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016aa:	f7fe fff7 	bl	800069c <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e009      	b.n	80016d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_RCC_OscConfig+0x4a8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f0      	bne.n	80016aa <HAL_RCC_OscConfig+0x47a>
 80016c8:	e001      	b.n	80016ce <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40007000 	.word	0x40007000
 80016e0:	42470060 	.word	0x42470060

080016e4 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e01d      	b.n	8001732 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d106      	bne.n	8001710 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f002 fa2e 	bl	8003b6c <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2202      	movs	r2, #2
 8001714:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3304      	adds	r3, #4
 8001720:	4619      	mov	r1, r3
 8001722:	4610      	mov	r0, r2
 8001724:	f000 fbd4 	bl	8001ed0 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e01d      	b.n	8001788 <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d106      	bne.n	8001766 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f002 f9b7 	bl	8003ad4 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2202      	movs	r2, #2
 800176a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3304      	adds	r3, #4
 8001776:	4619      	mov	r1, r3
 8001778:	4610      	mov	r0, r2
 800177a:	f000 fba9 	bl	8001ed0 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}  
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2201      	movs	r2, #1
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 fcb6 	bl	8002114 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a10      	ldr	r2, [pc, #64]	; (80017f0 <HAL_TIM_PWM_Start+0x60>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d004      	beq.n	80017bc <HAL_TIM_PWM_Start+0x2c>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a0f      	ldr	r2, [pc, #60]	; (80017f4 <HAL_TIM_PWM_Start+0x64>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d101      	bne.n	80017c0 <HAL_TIM_PWM_Start+0x30>
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <HAL_TIM_PWM_Start+0x32>
 80017c0:	2300      	movs	r3, #0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d007      	beq.n	80017d6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017d4:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	f042 0201 	orr.w	r2, r2, #1
 80017e4:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
} 
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40010000 	.word	0x40010000
 80017f4:	40010400 	.word	0x40010400

080017f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2200      	movs	r2, #0
 8001808:	6839      	ldr	r1, [r7, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fc82 	bl	8002114 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a22      	ldr	r2, [pc, #136]	; (80018a0 <HAL_TIM_PWM_Stop+0xa8>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d004      	beq.n	8001824 <HAL_TIM_PWM_Stop+0x2c>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a21      	ldr	r2, [pc, #132]	; (80018a4 <HAL_TIM_PWM_Stop+0xac>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d101      	bne.n	8001828 <HAL_TIM_PWM_Stop+0x30>
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <HAL_TIM_PWM_Stop+0x32>
 8001828:	2300      	movs	r3, #0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d017      	beq.n	800185e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6a1a      	ldr	r2, [r3, #32]
 8001834:	f241 1311 	movw	r3, #4369	; 0x1111
 8001838:	4013      	ands	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10f      	bne.n	800185e <HAL_TIM_PWM_Stop+0x66>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6a1a      	ldr	r2, [r3, #32]
 8001844:	f240 4344 	movw	r3, #1092	; 0x444
 8001848:	4013      	ands	r3, r2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d107      	bne.n	800185e <HAL_TIM_PWM_Stop+0x66>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001858:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800185c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6a1a      	ldr	r2, [r3, #32]
 8001864:	f241 1311 	movw	r3, #4369	; 0x1111
 8001868:	4013      	ands	r3, r2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10f      	bne.n	800188e <HAL_TIM_PWM_Stop+0x96>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6a1a      	ldr	r2, [r3, #32]
 8001874:	f240 4344 	movw	r3, #1092	; 0x444
 8001878:	4013      	ands	r3, r2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d107      	bne.n	800188e <HAL_TIM_PWM_Stop+0x96>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	f022 0201 	bic.w	r2, r2, #1
 800188c:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
} 
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40010000 	.word	0x40010000
 80018a4:	40010400 	.word	0x40010400

080018a8 <HAL_TIM_Encoder_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e081      	b.n	80019cc <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d106      	bne.n	80018e2 <HAL_TIM_Encoder_Init+0x3a>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f002 f841 	bl	8003964 <HAL_TIM_Encoder_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2202      	movs	r2, #2
 80018e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6812      	ldr	r2, [r2, #0]
 80018f2:	6892      	ldr	r2, [r2, #8]
 80018f4:	f022 0207 	bic.w	r2, r2, #7
 80018f8:	609a      	str	r2, [r3, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3304      	adds	r3, #4
 8001902:	4619      	mov	r1, r3
 8001904:	4610      	mov	r0, r2
 8001906:	f000 fae3 	bl	8001ed0 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	4313      	orrs	r3, r2
 800192a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001932:	f023 0303 	bic.w	r3, r3, #3
 8001936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	4313      	orrs	r3, r2
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001950:	f023 030c 	bic.w	r3, r3, #12
 8001954:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800195c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001960:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	4313      	orrs	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	011a      	lsls	r2, r3, #4
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	031b      	lsls	r3, r3, #12
 8001980:	4313      	orrs	r3, r2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800198e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8001996:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	4313      	orrs	r3, r2
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	621a      	str	r2, [r3, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <HAL_TIM_Encoder_Start+0x16>
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d008      	beq.n	80019fa <HAL_TIM_Encoder_Start+0x26>
 80019e8:	e00f      	b.n	8001a0a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2201      	movs	r2, #1
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 fb8e 	bl	8002114 <TIM_CCxChannelCmd>
      break; 
 80019f8:	e016      	b.n	8001a28 <HAL_TIM_Encoder_Start+0x54>
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2201      	movs	r2, #1
 8001a00:	2104      	movs	r1, #4
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 fb86 	bl	8002114 <TIM_CCxChannelCmd>
      break;
 8001a08:	e00e      	b.n	8001a28 <HAL_TIM_Encoder_Start+0x54>
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 fb7e 	bl	8002114 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	2104      	movs	r1, #4
 8001a20:	4618      	mov	r0, r3
 8001a22:	f000 fb77 	bl	8002114 <TIM_CCxChannelCmd>
     break; 
 8001a26:	bf00      	nop
    }
  }  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    
   /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */ 
  switch (Channel)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d002      	beq.n	8001a58 <HAL_TIM_Encoder_Stop+0x16>
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d008      	beq.n	8001a68 <HAL_TIM_Encoder_Stop+0x26>
 8001a56:	e00f      	b.n	8001a78 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 fb57 	bl	8002114 <TIM_CCxChannelCmd>
      break; 
 8001a66:	e016      	b.n	8001a96 <HAL_TIM_Encoder_Stop+0x54>
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE); 
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2104      	movs	r1, #4
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 fb4f 	bl	8002114 <TIM_CCxChannelCmd>
      break;
 8001a76:	e00e      	b.n	8001a96 <HAL_TIM_Encoder_Stop+0x54>
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 fb47 	bl	8002114 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2104      	movs	r1, #4
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 fb40 	bl	8002114 <TIM_CCxChannelCmd>
     break; 
 8001a94:	bf00      	nop
    }
  }  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6a1a      	ldr	r2, [r3, #32]
 8001a9c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10f      	bne.n	8001ac6 <HAL_TIM_Encoder_Stop+0x84>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6a1a      	ldr	r2, [r3, #32]
 8001aac:	f240 4344 	movw	r3, #1092	; 0x444
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d107      	bne.n	8001ac6 <HAL_TIM_Encoder_Stop+0x84>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	f022 0201 	bic.w	r2, r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d122      	bne.n	8001b2c <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d11b      	bne.n	8001b2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f06f 0202 	mvn.w	r2, #2
 8001afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f9be 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
 8001b18:	e005      	b.n	8001b26 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f9b0 	bl	8001e80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f9c1 	bl	8001ea8 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d122      	bne.n	8001b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d11b      	bne.n	8001b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f06f 0204 	mvn.w	r2, #4
 8001b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2202      	movs	r2, #2
 8001b56:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f994 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
 8001b6c:	e005      	b.n	8001b7a <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f986 	bl	8001e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f997 	bl	8001ea8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d122      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d11b      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0208 	mvn.w	r2, #8
 8001ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2204      	movs	r2, #4
 8001baa:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f96a 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
 8001bc0:	e005      	b.n	8001bce <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f95c 	bl	8001e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f96d 	bl	8001ea8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f003 0310 	and.w	r3, r3, #16
 8001bde:	2b10      	cmp	r3, #16
 8001be0:	d122      	bne.n	8001c28 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 0310 	and.w	r3, r3, #16
 8001bec:	2b10      	cmp	r3, #16
 8001bee:	d11b      	bne.n	8001c28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0210 	mvn.w	r2, #16
 8001bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f940 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
 8001c14:	e005      	b.n	8001c22 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f932 	bl	8001e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f943 	bl	8001ea8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d10e      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d107      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f06f 0201 	mvn.w	r2, #1
 8001c4c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f90c 	bl	8001e6c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5e:	2b80      	cmp	r3, #128	; 0x80
 8001c60:	d10e      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6c:	2b80      	cmp	r3, #128	; 0x80
 8001c6e:	d107      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c78:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 fc09 	bl	8002492 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8a:	2b40      	cmp	r3, #64	; 0x40
 8001c8c:	d10e      	bne.n	8001cac <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c98:	2b40      	cmp	r3, #64	; 0x40
 8001c9a:	d107      	bne.n	8001cac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ca4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f908 	bl	8001ebc <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	2b20      	cmp	r3, #32
 8001cb8:	d10e      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0320 	and.w	r3, r3, #32
 8001cc4:	2b20      	cmp	r3, #32
 8001cc6:	d107      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0220 	mvn.w	r2, #32
 8001cd0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fbd3 	bl	800247e <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d101      	bne.n	8001cfa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e0b4      	b.n	8001e64 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2202      	movs	r2, #2
 8001d06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b0c      	cmp	r3, #12
 8001d0e:	f200 809f 	bhi.w	8001e50 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001d12:	a201      	add	r2, pc, #4	; (adr r2, 8001d18 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d18:	08001d4d 	.word	0x08001d4d
 8001d1c:	08001e51 	.word	0x08001e51
 8001d20:	08001e51 	.word	0x08001e51
 8001d24:	08001e51 	.word	0x08001e51
 8001d28:	08001d8d 	.word	0x08001d8d
 8001d2c:	08001e51 	.word	0x08001e51
 8001d30:	08001e51 	.word	0x08001e51
 8001d34:	08001e51 	.word	0x08001e51
 8001d38:	08001dcf 	.word	0x08001dcf
 8001d3c:	08001e51 	.word	0x08001e51
 8001d40:	08001e51 	.word	0x08001e51
 8001d44:	08001e51 	.word	0x08001e51
 8001d48:	08001e0f 	.word	0x08001e0f
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 fa02 	bl	800215c <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	6992      	ldr	r2, [r2, #24]
 8001d62:	f042 0208 	orr.w	r2, r2, #8
 8001d66:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	6992      	ldr	r2, [r2, #24]
 8001d72:	f022 0204 	bic.w	r2, r2, #4
 8001d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	6991      	ldr	r1, [r2, #24]
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	6912      	ldr	r2, [r2, #16]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	619a      	str	r2, [r3, #24]
    }
    break;
 8001d8a:	e062      	b.n	8001e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 f946 	bl	8002024 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	6992      	ldr	r2, [r2, #24]
 8001da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001da6:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	6992      	ldr	r2, [r2, #24]
 8001db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	6991      	ldr	r1, [r2, #24]
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	6912      	ldr	r2, [r2, #16]
 8001dc6:	0212      	lsls	r2, r2, #8
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	619a      	str	r2, [r3, #24]
    }
    break;
 8001dcc:	e041      	b.n	8001e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68b9      	ldr	r1, [r7, #8]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 fa35 	bl	8002244 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	69d2      	ldr	r2, [r2, #28]
 8001de4:	f042 0208 	orr.w	r2, r2, #8
 8001de8:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	69d2      	ldr	r2, [r2, #28]
 8001df4:	f022 0204 	bic.w	r2, r2, #4
 8001df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	69d1      	ldr	r1, [r2, #28]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	6912      	ldr	r2, [r2, #16]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	61da      	str	r2, [r3, #28]
    }
    break;
 8001e0c:	e021      	b.n	8001e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68b9      	ldr	r1, [r7, #8]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 fa8d 	bl	8002334 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	69d2      	ldr	r2, [r2, #28]
 8001e24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e28:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	69d2      	ldr	r2, [r2, #28]
 8001e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	69d1      	ldr	r1, [r2, #28]
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	6912      	ldr	r2, [r2, #16]
 8001e48:	0212      	lsls	r2, r2, #8
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	61da      	str	r2, [r3, #28]
    }
    break;
 8001e4e:	e000      	b.n	8001e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 8001e50:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a44      	ldr	r2, [pc, #272]	; (8001ff8 <TIM_Base_SetConfig+0x128>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d013      	beq.n	8001f14 <TIM_Base_SetConfig+0x44>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef2:	d00f      	beq.n	8001f14 <TIM_Base_SetConfig+0x44>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a41      	ldr	r2, [pc, #260]	; (8001ffc <TIM_Base_SetConfig+0x12c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d00b      	beq.n	8001f14 <TIM_Base_SetConfig+0x44>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a40      	ldr	r2, [pc, #256]	; (8002000 <TIM_Base_SetConfig+0x130>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d007      	beq.n	8001f14 <TIM_Base_SetConfig+0x44>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a3f      	ldr	r2, [pc, #252]	; (8002004 <TIM_Base_SetConfig+0x134>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d003      	beq.n	8001f14 <TIM_Base_SetConfig+0x44>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a3e      	ldr	r2, [pc, #248]	; (8002008 <TIM_Base_SetConfig+0x138>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d101      	bne.n	8001f18 <TIM_Base_SetConfig+0x48>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <TIM_Base_SetConfig+0x4a>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d008      	beq.n	8001f30 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a31      	ldr	r2, [pc, #196]	; (8001ff8 <TIM_Base_SetConfig+0x128>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d02b      	beq.n	8001f90 <TIM_Base_SetConfig+0xc0>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3e:	d027      	beq.n	8001f90 <TIM_Base_SetConfig+0xc0>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a2e      	ldr	r2, [pc, #184]	; (8001ffc <TIM_Base_SetConfig+0x12c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d023      	beq.n	8001f90 <TIM_Base_SetConfig+0xc0>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a2d      	ldr	r2, [pc, #180]	; (8002000 <TIM_Base_SetConfig+0x130>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d01f      	beq.n	8001f90 <TIM_Base_SetConfig+0xc0>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a2c      	ldr	r2, [pc, #176]	; (8002004 <TIM_Base_SetConfig+0x134>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d01b      	beq.n	8001f90 <TIM_Base_SetConfig+0xc0>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a2b      	ldr	r2, [pc, #172]	; (8002008 <TIM_Base_SetConfig+0x138>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d017      	beq.n	8001f90 <TIM_Base_SetConfig+0xc0>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a2a      	ldr	r2, [pc, #168]	; (800200c <TIM_Base_SetConfig+0x13c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d013      	beq.n	8001f90 <TIM_Base_SetConfig+0xc0>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a29      	ldr	r2, [pc, #164]	; (8002010 <TIM_Base_SetConfig+0x140>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d00f      	beq.n	8001f90 <TIM_Base_SetConfig+0xc0>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a28      	ldr	r2, [pc, #160]	; (8002014 <TIM_Base_SetConfig+0x144>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d00b      	beq.n	8001f90 <TIM_Base_SetConfig+0xc0>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a27      	ldr	r2, [pc, #156]	; (8002018 <TIM_Base_SetConfig+0x148>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d007      	beq.n	8001f90 <TIM_Base_SetConfig+0xc0>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a26      	ldr	r2, [pc, #152]	; (800201c <TIM_Base_SetConfig+0x14c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d003      	beq.n	8001f90 <TIM_Base_SetConfig+0xc0>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a25      	ldr	r2, [pc, #148]	; (8002020 <TIM_Base_SetConfig+0x150>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d101      	bne.n	8001f94 <TIM_Base_SetConfig+0xc4>
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <TIM_Base_SetConfig+0xc6>
 8001f94:	2300      	movs	r3, #0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d008      	beq.n	8001fac <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a0c      	ldr	r2, [pc, #48]	; (8001ff8 <TIM_Base_SetConfig+0x128>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d003      	beq.n	8001fd2 <TIM_Base_SetConfig+0x102>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a0e      	ldr	r2, [pc, #56]	; (8002008 <TIM_Base_SetConfig+0x138>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d101      	bne.n	8001fd6 <TIM_Base_SetConfig+0x106>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <TIM_Base_SetConfig+0x108>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	615a      	str	r2, [r3, #20]
}
 8001fea:	bf00      	nop
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40010000 	.word	0x40010000
 8001ffc:	40000400 	.word	0x40000400
 8002000:	40000800 	.word	0x40000800
 8002004:	40000c00 	.word	0x40000c00
 8002008:	40010400 	.word	0x40010400
 800200c:	40014000 	.word	0x40014000
 8002010:	40014400 	.word	0x40014400
 8002014:	40014800 	.word	0x40014800
 8002018:	40001800 	.word	0x40001800
 800201c:	40001c00 	.word	0x40001c00
 8002020:	40002000 	.word	0x40002000

08002024 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	f023 0210 	bic.w	r2, r3, #16
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800205e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002066:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	021b      	lsls	r3, r3, #8
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f023 0320 	bic.w	r3, r3, #32
 800207a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4313      	orrs	r3, r2
 8002086:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a20      	ldr	r2, [pc, #128]	; (800210c <TIM_OC2_SetConfig+0xe8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d003      	beq.n	8002098 <TIM_OC2_SetConfig+0x74>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a1f      	ldr	r2, [pc, #124]	; (8002110 <TIM_OC2_SetConfig+0xec>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d101      	bne.n	800209c <TIM_OC2_SetConfig+0x78>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <TIM_OC2_SetConfig+0x7a>
 800209c:	2300      	movs	r3, #0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d021      	beq.n	80020e6 <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	011b      	lsls	r3, r3, #4
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020bc:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	621a      	str	r2, [r3, #32]
}
 8002100:	bf00      	nop
 8002102:	371c      	adds	r7, #28
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	40010000 	.word	0x40010000
 8002110:	40010400 	.word	0x40010400

08002114 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002114:	b480      	push	{r7}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002124:	2201      	movs	r2, #1
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a1a      	ldr	r2, [r3, #32]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	43db      	mvns	r3, r3
 8002136:	401a      	ands	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a1a      	ldr	r2, [r3, #32]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	fa01 f303 	lsl.w	r3, r1, r3
 8002148:	431a      	orrs	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	621a      	str	r2, [r3, #32]
}
 800214e:	bf00      	nop
 8002150:	371c      	adds	r7, #28
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	f023 0201 	bic.w	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0303 	bic.w	r3, r3, #3
 800219e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f023 0302 	bic.w	r3, r3, #2
 80021b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a1f      	ldr	r2, [pc, #124]	; (800223c <TIM_OC1_SetConfig+0xe0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d003      	beq.n	80021cc <TIM_OC1_SetConfig+0x70>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a1e      	ldr	r2, [pc, #120]	; (8002240 <TIM_OC1_SetConfig+0xe4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d101      	bne.n	80021d0 <TIM_OC1_SetConfig+0x74>
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <TIM_OC1_SetConfig+0x76>
 80021d0:	2300      	movs	r3, #0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d01e      	beq.n	8002214 <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f023 0308 	bic.w	r3, r3, #8
 80021dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f023 0304 	bic.w	r3, r3, #4
 80021ee:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	621a      	str	r2, [r3, #32]
} 
 800222e:	bf00      	nop
 8002230:	371c      	adds	r7, #28
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40010000 	.word	0x40010000
 8002240:	40010400 	.word	0x40010400

08002244 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800227e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f023 0303 	bic.w	r3, r3, #3
 8002286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a20      	ldr	r2, [pc, #128]	; (800232c <TIM_OC3_SetConfig+0xe8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d003      	beq.n	80022b6 <TIM_OC3_SetConfig+0x72>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a1f      	ldr	r2, [pc, #124]	; (8002330 <TIM_OC3_SetConfig+0xec>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <TIM_OC3_SetConfig+0x76>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <TIM_OC3_SetConfig+0x78>
 80022ba:	2300      	movs	r3, #0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d021      	beq.n	8002304 <TIM_OC3_SetConfig+0xc0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	021b      	lsls	r3, r3, #8
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022da:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	621a      	str	r2, [r3, #32]
}
 800231e:	bf00      	nop
 8002320:	371c      	adds	r7, #28
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40010000 	.word	0x40010000
 8002330:	40010400 	.word	0x40010400

08002334 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800236e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002376:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800238a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	031b      	lsls	r3, r3, #12
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4313      	orrs	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a14      	ldr	r2, [pc, #80]	; (80023ec <TIM_OC4_SetConfig+0xb8>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d003      	beq.n	80023a8 <TIM_OC4_SetConfig+0x74>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a13      	ldr	r2, [pc, #76]	; (80023f0 <TIM_OC4_SetConfig+0xbc>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d101      	bne.n	80023ac <TIM_OC4_SetConfig+0x78>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <TIM_OC4_SetConfig+0x7a>
 80023ac:	2300      	movs	r3, #0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d009      	beq.n	80023c6 <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	019b      	lsls	r3, r3, #6
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	621a      	str	r2, [r3, #32]
}
 80023e0:	bf00      	nop
 80023e2:	371c      	adds	r7, #28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	40010000 	.word	0x40010000
 80023f0:	40010400 	.word	0x40010400

080023f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002408:	2302      	movs	r3, #2
 800240a:	e032      	b.n	8002472 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	6852      	ldr	r2, [r2, #4]
 8002426:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800242a:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	6851      	ldr	r1, [r2, #4]
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	6892      	ldr	r2, [r2, #8]
 8002448:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800244c:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	6891      	ldr	r1, [r2, #8]
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	6852      	ldr	r2, [r2, #4]
 800245c:	430a      	orrs	r2, r1
 800245e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
} 
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e03f      	b.n	8002538 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d106      	bne.n	80024d2 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f001 fc09 	bl	8003ce4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2224      	movs	r2, #36	; 0x24
 80024d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	68d2      	ldr	r2, [r2, #12]
 80024e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024e8:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f90a 	bl	8002704 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	6912      	ldr	r2, [r2, #16]
 80024fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	6952      	ldr	r2, [r2, #20]
 800250a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800250e:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	68d2      	ldr	r2, [r2, #12]
 800251a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800251e:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2220      	movs	r2, #32
 8002532:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af02      	add	r7, sp, #8
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	4613      	mov	r3, r2
 800254e:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b20      	cmp	r3, #32
 800255e:	f040 8082 	bne.w	8002666 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <HAL_UART_Transmit+0x2e>
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e07a      	b.n	8002668 <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_UART_Transmit+0x40>
 800257c:	2302      	movs	r3, #2
 800257e:	e073      	b.n	8002668 <HAL_UART_Transmit+0x128>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2221      	movs	r2, #33	; 0x21
 8002592:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002596:	f7fe f881 	bl	800069c <HAL_GetTick>
 800259a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	88fa      	ldrh	r2, [r7, #6]
 80025a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	88fa      	ldrh	r2, [r7, #6]
 80025a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80025a8:	e041      	b.n	800262e <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c0:	d121      	bne.n	8002606 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2200      	movs	r2, #0
 80025ca:	2180      	movs	r1, #128	; 0x80
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 f84f 	bl	8002670 <UART_WaitOnFlagUntilTimeout>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e045      	b.n	8002668 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	8812      	ldrh	r2, [r2, #0]
 80025e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025ec:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d103      	bne.n	80025fe <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	3302      	adds	r3, #2
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	e017      	b.n	800262e <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	3301      	adds	r3, #1
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	e013      	b.n	800262e <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2200      	movs	r2, #0
 800260e:	2180      	movs	r1, #128	; 0x80
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 f82d 	bl	8002670 <UART_WaitOnFlagUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e023      	b.n	8002668 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	1c59      	adds	r1, r3, #1
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002632:	b29b      	uxth	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1b8      	bne.n	80025aa <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2200      	movs	r2, #0
 8002640:	2140      	movs	r1, #64	; 0x40
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f814 	bl	8002670 <UART_WaitOnFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e00a      	b.n	8002668 <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2220      	movs	r2, #32
 8002656:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e000      	b.n	8002668 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8002666:	2302      	movs	r3, #2
  }
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	4613      	mov	r3, r2
 800267e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002680:	e02c      	b.n	80026dc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002688:	d028      	beq.n	80026dc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d007      	beq.n	80026a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002690:	f7fe f804 	bl	800069c <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	1ad2      	subs	r2, r2, r3
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	429a      	cmp	r2, r3
 800269e:	d91d      	bls.n	80026dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	68d2      	ldr	r2, [r2, #12]
 80026aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80026ae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	6952      	ldr	r2, [r2, #20]
 80026ba:	f022 0201 	bic.w	r2, r2, #1
 80026be:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e00f      	b.n	80026fc <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	401a      	ands	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d0c3      	beq.n	8002682 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800271e:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002740:	f023 030c 	bic.w	r3, r3, #12
 8002744:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	4313      	orrs	r3, r2
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002778:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4313      	orrs	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002794:	f040 80e4 	bne.w	8002960 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4aab      	ldr	r2, [pc, #684]	; (8002a4c <UART_SetConfig+0x348>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d004      	beq.n	80027ac <UART_SetConfig+0xa8>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4aaa      	ldr	r2, [pc, #680]	; (8002a50 <UART_SetConfig+0x34c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d16c      	bne.n	8002886 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681c      	ldr	r4, [r3, #0]
 80027b0:	f7fe fb74 	bl	8000e9c <HAL_RCC_GetPCLK2Freq>
 80027b4:	4602      	mov	r2, r0
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	009a      	lsls	r2, r3, #2
 80027be:	441a      	add	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ca:	4aa2      	ldr	r2, [pc, #648]	; (8002a54 <UART_SetConfig+0x350>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	011d      	lsls	r5, r3, #4
 80027d4:	f7fe fb62 	bl	8000e9c <HAL_RCC_GetPCLK2Freq>
 80027d8:	4602      	mov	r2, r0
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	009a      	lsls	r2, r3, #2
 80027e2:	441a      	add	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80027ee:	f7fe fb55 	bl	8000e9c <HAL_RCC_GetPCLK2Freq>
 80027f2:	4602      	mov	r2, r0
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	009a      	lsls	r2, r3, #2
 80027fc:	441a      	add	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	4a92      	ldr	r2, [pc, #584]	; (8002a54 <UART_SetConfig+0x350>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2264      	movs	r2, #100	; 0x64
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	1af3      	subs	r3, r6, r3
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	3332      	adds	r3, #50	; 0x32
 800281c:	4a8d      	ldr	r2, [pc, #564]	; (8002a54 <UART_SetConfig+0x350>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800282a:	441d      	add	r5, r3
 800282c:	f7fe fb36 	bl	8000e9c <HAL_RCC_GetPCLK2Freq>
 8002830:	4602      	mov	r2, r0
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	009a      	lsls	r2, r3, #2
 800283a:	441a      	add	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	fbb2 f6f3 	udiv	r6, r2, r3
 8002846:	f7fe fb29 	bl	8000e9c <HAL_RCC_GetPCLK2Freq>
 800284a:	4602      	mov	r2, r0
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	009a      	lsls	r2, r3, #2
 8002854:	441a      	add	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	4a7c      	ldr	r2, [pc, #496]	; (8002a54 <UART_SetConfig+0x350>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	2264      	movs	r2, #100	; 0x64
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	1af3      	subs	r3, r6, r3
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	3332      	adds	r3, #50	; 0x32
 8002874:	4a77      	ldr	r2, [pc, #476]	; (8002a54 <UART_SetConfig+0x350>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	442b      	add	r3, r5
 8002882:	60a3      	str	r3, [r4, #8]
 8002884:	e154      	b.n	8002b30 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681c      	ldr	r4, [r3, #0]
 800288a:	f7fe faf3 	bl	8000e74 <HAL_RCC_GetPCLK1Freq>
 800288e:	4602      	mov	r2, r0
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	009a      	lsls	r2, r3, #2
 8002898:	441a      	add	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a4:	4a6b      	ldr	r2, [pc, #428]	; (8002a54 <UART_SetConfig+0x350>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	011d      	lsls	r5, r3, #4
 80028ae:	f7fe fae1 	bl	8000e74 <HAL_RCC_GetPCLK1Freq>
 80028b2:	4602      	mov	r2, r0
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	009a      	lsls	r2, r3, #2
 80028bc:	441a      	add	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80028c8:	f7fe fad4 	bl	8000e74 <HAL_RCC_GetPCLK1Freq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	009a      	lsls	r2, r3, #2
 80028d6:	441a      	add	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e2:	4a5c      	ldr	r2, [pc, #368]	; (8002a54 <UART_SetConfig+0x350>)
 80028e4:	fba2 2303 	umull	r2, r3, r2, r3
 80028e8:	095b      	lsrs	r3, r3, #5
 80028ea:	2264      	movs	r2, #100	; 0x64
 80028ec:	fb02 f303 	mul.w	r3, r2, r3
 80028f0:	1af3      	subs	r3, r6, r3
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	3332      	adds	r3, #50	; 0x32
 80028f6:	4a57      	ldr	r2, [pc, #348]	; (8002a54 <UART_SetConfig+0x350>)
 80028f8:	fba2 2303 	umull	r2, r3, r2, r3
 80028fc:	095b      	lsrs	r3, r3, #5
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002904:	441d      	add	r5, r3
 8002906:	f7fe fab5 	bl	8000e74 <HAL_RCC_GetPCLK1Freq>
 800290a:	4602      	mov	r2, r0
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	009a      	lsls	r2, r3, #2
 8002914:	441a      	add	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	fbb2 f6f3 	udiv	r6, r2, r3
 8002920:	f7fe faa8 	bl	8000e74 <HAL_RCC_GetPCLK1Freq>
 8002924:	4602      	mov	r2, r0
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	009a      	lsls	r2, r3, #2
 800292e:	441a      	add	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	fbb2 f3f3 	udiv	r3, r2, r3
 800293a:	4a46      	ldr	r2, [pc, #280]	; (8002a54 <UART_SetConfig+0x350>)
 800293c:	fba2 2303 	umull	r2, r3, r2, r3
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	2264      	movs	r2, #100	; 0x64
 8002944:	fb02 f303 	mul.w	r3, r2, r3
 8002948:	1af3      	subs	r3, r6, r3
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	3332      	adds	r3, #50	; 0x32
 800294e:	4a41      	ldr	r2, [pc, #260]	; (8002a54 <UART_SetConfig+0x350>)
 8002950:	fba2 2303 	umull	r2, r3, r2, r3
 8002954:	095b      	lsrs	r3, r3, #5
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	442b      	add	r3, r5
 800295c:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800295e:	e0e7      	b.n	8002b30 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a39      	ldr	r2, [pc, #228]	; (8002a4c <UART_SetConfig+0x348>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d004      	beq.n	8002974 <UART_SetConfig+0x270>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a38      	ldr	r2, [pc, #224]	; (8002a50 <UART_SetConfig+0x34c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d171      	bne.n	8002a58 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681c      	ldr	r4, [r3, #0]
 8002978:	f7fe fa90 	bl	8000e9c <HAL_RCC_GetPCLK2Freq>
 800297c:	4602      	mov	r2, r0
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	009a      	lsls	r2, r3, #2
 8002986:	441a      	add	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002992:	4a30      	ldr	r2, [pc, #192]	; (8002a54 <UART_SetConfig+0x350>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	095b      	lsrs	r3, r3, #5
 800299a:	011d      	lsls	r5, r3, #4
 800299c:	f7fe fa7e 	bl	8000e9c <HAL_RCC_GetPCLK2Freq>
 80029a0:	4602      	mov	r2, r0
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	009a      	lsls	r2, r3, #2
 80029aa:	441a      	add	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	fbb2 f6f3 	udiv	r6, r2, r3
 80029b6:	f7fe fa71 	bl	8000e9c <HAL_RCC_GetPCLK2Freq>
 80029ba:	4602      	mov	r2, r0
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	009a      	lsls	r2, r3, #2
 80029c4:	441a      	add	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d0:	4a20      	ldr	r2, [pc, #128]	; (8002a54 <UART_SetConfig+0x350>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	2264      	movs	r2, #100	; 0x64
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	1af3      	subs	r3, r6, r3
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	3332      	adds	r3, #50	; 0x32
 80029e4:	4a1b      	ldr	r2, [pc, #108]	; (8002a54 <UART_SetConfig+0x350>)
 80029e6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029f0:	441d      	add	r5, r3
 80029f2:	f7fe fa53 	bl	8000e9c <HAL_RCC_GetPCLK2Freq>
 80029f6:	4602      	mov	r2, r0
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	009a      	lsls	r2, r3, #2
 8002a00:	441a      	add	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	fbb2 f6f3 	udiv	r6, r2, r3
 8002a0c:	f7fe fa46 	bl	8000e9c <HAL_RCC_GetPCLK2Freq>
 8002a10:	4602      	mov	r2, r0
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	009a      	lsls	r2, r3, #2
 8002a1a:	441a      	add	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a26:	4a0b      	ldr	r2, [pc, #44]	; (8002a54 <UART_SetConfig+0x350>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	095b      	lsrs	r3, r3, #5
 8002a2e:	2264      	movs	r2, #100	; 0x64
 8002a30:	fb02 f303 	mul.w	r3, r2, r3
 8002a34:	1af3      	subs	r3, r6, r3
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	3332      	adds	r3, #50	; 0x32
 8002a3a:	4a06      	ldr	r2, [pc, #24]	; (8002a54 <UART_SetConfig+0x350>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	442b      	add	r3, r5
 8002a48:	60a3      	str	r3, [r4, #8]
 8002a4a:	e071      	b.n	8002b30 <UART_SetConfig+0x42c>
 8002a4c:	40011000 	.word	0x40011000
 8002a50:	40011400 	.word	0x40011400
 8002a54:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681c      	ldr	r4, [r3, #0]
 8002a5c:	f7fe fa0a 	bl	8000e74 <HAL_RCC_GetPCLK1Freq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	009a      	lsls	r2, r3, #2
 8002a6a:	441a      	add	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a76:	4a30      	ldr	r2, [pc, #192]	; (8002b38 <UART_SetConfig+0x434>)
 8002a78:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7c:	095b      	lsrs	r3, r3, #5
 8002a7e:	011d      	lsls	r5, r3, #4
 8002a80:	f7fe f9f8 	bl	8000e74 <HAL_RCC_GetPCLK1Freq>
 8002a84:	4602      	mov	r2, r0
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009a      	lsls	r2, r3, #2
 8002a8e:	441a      	add	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	fbb2 f6f3 	udiv	r6, r2, r3
 8002a9a:	f7fe f9eb 	bl	8000e74 <HAL_RCC_GetPCLK1Freq>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009a      	lsls	r2, r3, #2
 8002aa8:	441a      	add	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab4:	4a20      	ldr	r2, [pc, #128]	; (8002b38 <UART_SetConfig+0x434>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	2264      	movs	r2, #100	; 0x64
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	1af3      	subs	r3, r6, r3
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	3332      	adds	r3, #50	; 0x32
 8002ac8:	4a1b      	ldr	r2, [pc, #108]	; (8002b38 <UART_SetConfig+0x434>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad4:	441d      	add	r5, r3
 8002ad6:	f7fe f9cd 	bl	8000e74 <HAL_RCC_GetPCLK1Freq>
 8002ada:	4602      	mov	r2, r0
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009a      	lsls	r2, r3, #2
 8002ae4:	441a      	add	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	fbb2 f6f3 	udiv	r6, r2, r3
 8002af0:	f7fe f9c0 	bl	8000e74 <HAL_RCC_GetPCLK1Freq>
 8002af4:	4602      	mov	r2, r0
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	009a      	lsls	r2, r3, #2
 8002afe:	441a      	add	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0a:	4a0b      	ldr	r2, [pc, #44]	; (8002b38 <UART_SetConfig+0x434>)
 8002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b10:	095b      	lsrs	r3, r3, #5
 8002b12:	2264      	movs	r2, #100	; 0x64
 8002b14:	fb02 f303 	mul.w	r3, r2, r3
 8002b18:	1af3      	subs	r3, r6, r3
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	3332      	adds	r3, #50	; 0x32
 8002b1e:	4a06      	ldr	r2, [pc, #24]	; (8002b38 <UART_SetConfig+0x434>)
 8002b20:	fba2 2303 	umull	r2, r3, r2, r3
 8002b24:	095b      	lsrs	r3, r3, #5
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	442b      	add	r3, r5
 8002b2c:	60a3      	str	r3, [r4, #8]
}
 8002b2e:	e7ff      	b.n	8002b30 <UART_SetConfig+0x42c>
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b38:	51eb851f 	.word	0x51eb851f

08002b3c <app_run>:
-   Returns:
-     void 
-   Description:
-    	Our main loop for the application code.
-----------------------------------------------------------------------*/
void app_run(void) {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b096      	sub	sp, #88	; 0x58
 8002b40:	af00      	add	r7, sp, #0
	char printer[64];

	motors_init();
 8002b42:	f000 f85d 	bl	8002c00 <motors_init>
	float pwm_val = .5;
 8002b46:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002b4a:	653b      	str	r3, [r7, #80]	; 0x50
	direction_t change_dir = FORWARD;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	set_mtr_pwm(MTR1, pwm_val);
 8002b52:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8002b56:	2000      	movs	r0, #0
 8002b58:	f000 f8fc 	bl	8002d54 <set_mtr_pwm>
	set_mtr_dir(MTR1, change_dir);
 8002b5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002b60:	4619      	mov	r1, r3
 8002b62:	2000      	movs	r0, #0
 8002b64:	f000 f8ca 	bl	8002cfc <set_mtr_dir>

	pwm_on_off(MTR_ALL, MTR_ON);
 8002b68:	2101      	movs	r1, #1
 8002b6a:	2004      	movs	r0, #4
 8002b6c:	f000 f990 	bl	8002e90 <pwm_on_off>
	encoder_on_off(MTR_ALL, MTR_ON);
 8002b70:	2101      	movs	r1, #1
 8002b72:	2004      	movs	r0, #4
 8002b74:	f000 f9b1 	bl	8002eda <encoder_on_off>

	uint16_t counter = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	while (1) {
		if (counter++ == 1000) {
 8002b7e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8002b88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b8c:	d121      	bne.n	8002bd2 <app_run+0x96>
			uint16_t rpm = (uint16_t)get_mtr_rpm(MTR1);
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f000 f8cd 	bl	8002d2e <get_mtr_rpm>
 8002b94:	eef0 7a40 	vmov.f32	s15, s0
 8002b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b9c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002ba0:	88bb      	ldrh	r3, [r7, #4]
 8002ba2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			sprintf(printer, "RPM: %d\n", rpm);
 8002ba6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002baa:	f107 030c 	add.w	r3, r7, #12
 8002bae:	490f      	ldr	r1, [pc, #60]	; (8002bec <app_run+0xb0>)
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f001 f91f 	bl	8003df4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)printer, strlen(printer), 0xFFFF);
 8002bb6:	f107 030c 	add.w	r3, r7, #12
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fd fb28 	bl	8000210 <strlen>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	f107 010c 	add.w	r1, r7, #12
 8002bc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bcc:	4808      	ldr	r0, [pc, #32]	; (8002bf0 <app_run+0xb4>)
 8002bce:	f7ff fcb7 	bl	8002540 <HAL_UART_Transmit>
		}
		set_mtr_dir(MTR1, change_dir);
 8002bd2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f000 f88f 	bl	8002cfc <set_mtr_dir>
		set_mtr_pwm(MTR1, pwm_val);
 8002bde:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8002be2:	2000      	movs	r0, #0
 8002be4:	f000 f8b6 	bl	8002d54 <set_mtr_pwm>
		if (counter++ == 1000) {
 8002be8:	e7c9      	b.n	8002b7e <app_run+0x42>
 8002bea:	bf00      	nop
 8002bec:	08004664 	.word	0x08004664
 8002bf0:	20000300 	.word	0x20000300

08002bf4 <HAL_SYSTICK_Callback>:
}

/*-----------------------------------------------------------------------
- Private Functions
-----------------------------------------------------------------------*/
void HAL_SYSTICK_Callback(void) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
	// Called every 1 ms, use this as time base for updating motor velocity
	mtr_1ms_timeout();
 8002bf8:	f000 f994 	bl	8002f24 <mtr_1ms_timeout>
}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <motors_init>:
-     void
-   Description:
-    	Initializes all motor structs with their respective pwm timer,
-			encoder timer, and direction pin.
-----------------------------------------------------------------------*/
void motors_init(void) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
	memset(&motor_1, 0, sizeof(motor_t));
 8002c04:	2220      	movs	r2, #32
 8002c06:	2100      	movs	r1, #0
 8002c08:	482e      	ldr	r0, [pc, #184]	; (8002cc4 <motors_init+0xc4>)
 8002c0a:	f001 f8eb 	bl	8003de4 <memset>
	motor_1.dir_ctrl.gpio_port = MTR1_DIR_GPIO_Port;
 8002c0e:	4b2d      	ldr	r3, [pc, #180]	; (8002cc4 <motors_init+0xc4>)
 8002c10:	4a2d      	ldr	r2, [pc, #180]	; (8002cc8 <motors_init+0xc8>)
 8002c12:	601a      	str	r2, [r3, #0]
	motor_1.dir_ctrl.gpio_pin  = MTR1_DIR_Pin;
 8002c14:	4b2b      	ldr	r3, [pc, #172]	; (8002cc4 <motors_init+0xc4>)
 8002c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c1a:	809a      	strh	r2, [r3, #4]
	motor_1.position.hencoder = &htim4;
 8002c1c:	4b29      	ldr	r3, [pc, #164]	; (8002cc4 <motors_init+0xc4>)
 8002c1e:	4a2b      	ldr	r2, [pc, #172]	; (8002ccc <motors_init+0xcc>)
 8002c20:	611a      	str	r2, [r3, #16]
	motor_1.position.channel = TIM_CHANNEL_1;
 8002c22:	4b28      	ldr	r3, [pc, #160]	; (8002cc4 <motors_init+0xc4>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	61da      	str	r2, [r3, #28]
	motor_1.pwm.hpwm = &htim10;
 8002c28:	4b26      	ldr	r3, [pc, #152]	; (8002cc4 <motors_init+0xc4>)
 8002c2a:	4a29      	ldr	r2, [pc, #164]	; (8002cd0 <motors_init+0xd0>)
 8002c2c:	609a      	str	r2, [r3, #8]
	motor_1.pwm.channel = TIM_CHANNEL_1;
 8002c2e:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <motors_init+0xc4>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	60da      	str	r2, [r3, #12]

	memset(&motor_2, 0, sizeof(motor_2));
 8002c34:	2220      	movs	r2, #32
 8002c36:	2100      	movs	r1, #0
 8002c38:	4826      	ldr	r0, [pc, #152]	; (8002cd4 <motors_init+0xd4>)
 8002c3a:	f001 f8d3 	bl	8003de4 <memset>
	motor_2.dir_ctrl.gpio_port = MTR2_DIR_GPIO_Port;
 8002c3e:	4b25      	ldr	r3, [pc, #148]	; (8002cd4 <motors_init+0xd4>)
 8002c40:	4a25      	ldr	r2, [pc, #148]	; (8002cd8 <motors_init+0xd8>)
 8002c42:	601a      	str	r2, [r3, #0]
	motor_2.dir_ctrl.gpio_pin  = MTR2_DIR_Pin;
 8002c44:	4b23      	ldr	r3, [pc, #140]	; (8002cd4 <motors_init+0xd4>)
 8002c46:	2220      	movs	r2, #32
 8002c48:	809a      	strh	r2, [r3, #4]
	motor_2.position.hencoder = &htim3;
 8002c4a:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <motors_init+0xd4>)
 8002c4c:	4a23      	ldr	r2, [pc, #140]	; (8002cdc <motors_init+0xdc>)
 8002c4e:	611a      	str	r2, [r3, #16]
	motor_2.position.channel = TIM_CHANNEL_2;
 8002c50:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <motors_init+0xd4>)
 8002c52:	2204      	movs	r2, #4
 8002c54:	61da      	str	r2, [r3, #28]
	motor_2.pwm.hpwm = &htim5;
 8002c56:	4b1f      	ldr	r3, [pc, #124]	; (8002cd4 <motors_init+0xd4>)
 8002c58:	4a21      	ldr	r2, [pc, #132]	; (8002ce0 <motors_init+0xe0>)
 8002c5a:	609a      	str	r2, [r3, #8]
	motor_2.pwm.channel = TIM_CHANNEL_2;
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <motors_init+0xd4>)
 8002c5e:	2204      	movs	r2, #4
 8002c60:	60da      	str	r2, [r3, #12]

	memset(&motor_3, 0, sizeof(motor_t));
 8002c62:	2220      	movs	r2, #32
 8002c64:	2100      	movs	r1, #0
 8002c66:	481f      	ldr	r0, [pc, #124]	; (8002ce4 <motors_init+0xe4>)
 8002c68:	f001 f8bc 	bl	8003de4 <memset>
	motor_3.dir_ctrl.gpio_port = MTR2_DIR_GPIO_Port;
 8002c6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <motors_init+0xe4>)
 8002c6e:	4a1a      	ldr	r2, [pc, #104]	; (8002cd8 <motors_init+0xd8>)
 8002c70:	601a      	str	r2, [r3, #0]
	motor_3.dir_ctrl.gpio_pin  = MTR2_DIR_Pin;
 8002c72:	4b1c      	ldr	r3, [pc, #112]	; (8002ce4 <motors_init+0xe4>)
 8002c74:	2220      	movs	r2, #32
 8002c76:	809a      	strh	r2, [r3, #4]
	motor_3.position.hencoder = &htim8;
 8002c78:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <motors_init+0xe4>)
 8002c7a:	4a1b      	ldr	r2, [pc, #108]	; (8002ce8 <motors_init+0xe8>)
 8002c7c:	611a      	str	r2, [r3, #16]
	motor_3.position.channel = TIM_CHANNEL_2;
 8002c7e:	4b19      	ldr	r3, [pc, #100]	; (8002ce4 <motors_init+0xe4>)
 8002c80:	2204      	movs	r2, #4
 8002c82:	61da      	str	r2, [r3, #28]
	motor_3.pwm.hpwm = &htim2;
 8002c84:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <motors_init+0xe4>)
 8002c86:	4a19      	ldr	r2, [pc, #100]	; (8002cec <motors_init+0xec>)
 8002c88:	609a      	str	r2, [r3, #8]
	motor_3.pwm.channel = TIM_CHANNEL_4;
 8002c8a:	4b16      	ldr	r3, [pc, #88]	; (8002ce4 <motors_init+0xe4>)
 8002c8c:	220c      	movs	r2, #12
 8002c8e:	60da      	str	r2, [r3, #12]

	memset(&motor_4, 0, sizeof(motor_t));
 8002c90:	2220      	movs	r2, #32
 8002c92:	2100      	movs	r1, #0
 8002c94:	4816      	ldr	r0, [pc, #88]	; (8002cf0 <motors_init+0xf0>)
 8002c96:	f001 f8a5 	bl	8003de4 <memset>
	motor_4.dir_ctrl.gpio_port = MTR2_DIR_GPIO_Port;
 8002c9a:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <motors_init+0xf0>)
 8002c9c:	4a0e      	ldr	r2, [pc, #56]	; (8002cd8 <motors_init+0xd8>)
 8002c9e:	601a      	str	r2, [r3, #0]
	motor_4.dir_ctrl.gpio_pin  = MTR2_DIR_Pin;
 8002ca0:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <motors_init+0xf0>)
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	809a      	strh	r2, [r3, #4]
	motor_4.position.hencoder = &htim1;
 8002ca6:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <motors_init+0xf0>)
 8002ca8:	4a12      	ldr	r2, [pc, #72]	; (8002cf4 <motors_init+0xf4>)
 8002caa:	611a      	str	r2, [r3, #16]
	motor_4.position.channel = TIM_CHANNEL_2;
 8002cac:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <motors_init+0xf0>)
 8002cae:	2204      	movs	r2, #4
 8002cb0:	61da      	str	r2, [r3, #28]
	motor_4.pwm.hpwm = &htim12;
 8002cb2:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <motors_init+0xf0>)
 8002cb4:	4a10      	ldr	r2, [pc, #64]	; (8002cf8 <motors_init+0xf8>)
 8002cb6:	609a      	str	r2, [r3, #8]
	motor_4.pwm.channel = TIM_CHANNEL_2;
 8002cb8:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <motors_init+0xf0>)
 8002cba:	2204      	movs	r2, #4
 8002cbc:	60da      	str	r2, [r3, #12]
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	2000008c 	.word	0x2000008c
 8002cc8:	40020400 	.word	0x40020400
 8002ccc:	2000015c 	.word	0x2000015c
 8002cd0:	20000198 	.word	0x20000198
 8002cd4:	200000ac 	.word	0x200000ac
 8002cd8:	40020000 	.word	0x40020000
 8002cdc:	20000210 	.word	0x20000210
 8002ce0:	200001d4 	.word	0x200001d4
 8002ce4:	200000cc 	.word	0x200000cc
 8002ce8:	20000120 	.word	0x20000120
 8002cec:	20000288 	.word	0x20000288
 8002cf0:	200000ec 	.word	0x200000ec
 8002cf4:	2000024c 	.word	0x2000024c
 8002cf8:	200002c4 	.word	0x200002c4

08002cfc <set_mtr_dir>:
-   Returns:
-     void
-   Description:
-    	Set the motor to go forward or backwards
-----------------------------------------------------------------------*/
void set_mtr_dir(mtr_id_t mtr_id, direction_t dir) {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	460a      	mov	r2, r1
 8002d06:	71fb      	strb	r3, [r7, #7]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	71bb      	strb	r3, [r7, #6]
	motor_t * motor = get_mtr(mtr_id);
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 f92a 	bl	8002f68 <get_mtr>
 8002d14:	60f8      	str	r0, [r7, #12]
	HAL_GPIO_WritePin(motor->dir_ctrl.gpio_port, motor->dir_ctrl.gpio_pin, dir);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	889b      	ldrh	r3, [r3, #4]
 8002d1e:	79ba      	ldrb	r2, [r7, #6]
 8002d20:	4619      	mov	r1, r3
 8002d22:	f7fd ff9f 	bl	8000c64 <HAL_GPIO_WritePin>
}
 8002d26:	bf00      	nop
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <get_mtr_rpm>:
-   Returns:
-     float: motor's rpm in m/s
-   Description:
-    	Get a motors rpm.
-----------------------------------------------------------------------*/
float get_mtr_rpm(mtr_id_t mtr_id) {
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	4603      	mov	r3, r0
 8002d36:	71fb      	strb	r3, [r7, #7]
	return get_mtr(mtr_id)->position.rpm;
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f914 	bl	8002f68 <get_mtr>
 8002d40:	4603      	mov	r3, r0
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	ee07 3a90 	vmov	s15, r3
}
 8002d48:	eeb0 0a67 	vmov.f32	s0, s15
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <set_mtr_pwm>:
-   Description:
-    	Set the timers CCR register to a percentage of its ARR register.
-			Timer count 0 to CCR specifies PWM high, CCR to ARR specifies PWM
-			low.
-----------------------------------------------------------------------*/
void set_mtr_pwm(mtr_id_t mtr_id, float pwm) {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	ed87 0a00 	vstr	s0, [r7]
 8002d60:	71fb      	strb	r3, [r7, #7]
	motor_t * motor = get_mtr(mtr_id);
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 f8ff 	bl	8002f68 <get_mtr>
 8002d6a:	60f8      	str	r0, [r7, #12]

	if (pwm < 0) {
 8002d6c:	edd7 7a00 	vldr	s15, [r7]
 8002d70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d78:	d503      	bpl.n	8002d82 <set_mtr_pwm+0x2e>
		pwm = 0;
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	e00b      	b.n	8002d9a <set_mtr_pwm+0x46>
	}
	else if (pwm > 1.0) {
 8002d82:	edd7 7a00 	vldr	s15, [r7]
 8002d86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d92:	dd02      	ble.n	8002d9a <set_mtr_pwm+0x46>
		pwm = 1;
 8002d94:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002d98:	603b      	str	r3, [r7, #0]
	}

	switch (motor->pwm.channel) {
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b0c      	cmp	r3, #12
 8002da0:	d870      	bhi.n	8002e84 <set_mtr_pwm+0x130>
 8002da2:	a201      	add	r2, pc, #4	; (adr r2, 8002da8 <set_mtr_pwm+0x54>)
 8002da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da8:	08002ddd 	.word	0x08002ddd
 8002dac:	08002e85 	.word	0x08002e85
 8002db0:	08002e85 	.word	0x08002e85
 8002db4:	08002e85 	.word	0x08002e85
 8002db8:	08002e07 	.word	0x08002e07
 8002dbc:	08002e85 	.word	0x08002e85
 8002dc0:	08002e85 	.word	0x08002e85
 8002dc4:	08002e85 	.word	0x08002e85
 8002dc8:	08002e31 	.word	0x08002e31
 8002dcc:	08002e85 	.word	0x08002e85
 8002dd0:	08002e85 	.word	0x08002e85
 8002dd4:	08002e85 	.word	0x08002e85
 8002dd8:	08002e5b 	.word	0x08002e5b
	case TIM_CHANNEL_1: {
		motor->pwm.hpwm->Instance->CCR1 = motor->pwm.hpwm->Instance->ARR * pwm;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	6892      	ldr	r2, [r2, #8]
 8002de6:	6812      	ldr	r2, [r2, #0]
 8002de8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002dea:	ee07 2a90 	vmov	s15, r2
 8002dee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002df2:	edd7 7a00 	vldr	s15, [r7]
 8002df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dfe:	ee17 2a90 	vmov	r2, s15
 8002e02:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8002e04:	e03f      	b.n	8002e86 <set_mtr_pwm+0x132>
	}
	case TIM_CHANNEL_2: {
		motor->pwm.hpwm->Instance->CCR2 = motor->pwm.hpwm->Instance->ARR * pwm;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	6892      	ldr	r2, [r2, #8]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e14:	ee07 2a90 	vmov	s15, r2
 8002e18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e1c:	edd7 7a00 	vldr	s15, [r7]
 8002e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e28:	ee17 2a90 	vmov	r2, s15
 8002e2c:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8002e2e:	e02a      	b.n	8002e86 <set_mtr_pwm+0x132>
	}
	case TIM_CHANNEL_3: {
		motor->pwm.hpwm->Instance->CCR3 = motor->pwm.hpwm->Instance->ARR * pwm;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	6892      	ldr	r2, [r2, #8]
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e3e:	ee07 2a90 	vmov	s15, r2
 8002e42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e46:	edd7 7a00 	vldr	s15, [r7]
 8002e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e52:	ee17 2a90 	vmov	r2, s15
 8002e56:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8002e58:	e015      	b.n	8002e86 <set_mtr_pwm+0x132>
	}
	case TIM_CHANNEL_4: {
		motor->pwm.hpwm->Instance->CCR4 = motor->pwm.hpwm->Instance->ARR * pwm;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	6892      	ldr	r2, [r2, #8]
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e68:	ee07 2a90 	vmov	s15, r2
 8002e6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e70:	edd7 7a00 	vldr	s15, [r7]
 8002e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e7c:	ee17 2a90 	vmov	r2, s15
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002e82:	e000      	b.n	8002e86 <set_mtr_pwm+0x132>
	}
	default:
		break;
 8002e84:	bf00      	nop
	}
}
 8002e86:	bf00      	nop
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop

08002e90 <pwm_on_off>:
-   Returns:
-     void
-   Description:
-    	Turns the pwm timer on/off.
-----------------------------------------------------------------------*/
void pwm_on_off(mtr_id_t mtr_id, mtr_status_t mtr_status) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	460a      	mov	r2, r1
 8002e9a:	71fb      	strb	r3, [r7, #7]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	71bb      	strb	r3, [r7, #6]
	if (mtr_id == MTR_ALL) {
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d10f      	bne.n	8002ec6 <pwm_on_off+0x36>
		for (uint8_t i = 0; i < MTR_ALL; i++) {
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	73fb      	strb	r3, [r7, #15]
 8002eaa:	e008      	b.n	8002ebe <pwm_on_off+0x2e>
			pwm_on_off_helper(MTR1 + i, mtr_status);
 8002eac:	79ba      	ldrb	r2, [r7, #6]
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 f8f8 	bl	80030a8 <pwm_on_off_helper>
		for (uint8_t i = 0; i < MTR_ALL; i++) {
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d9f3      	bls.n	8002eac <pwm_on_off+0x1c>
		}
	}
	else {
		pwm_on_off_helper(mtr_id, mtr_status);
	}
}
 8002ec4:	e005      	b.n	8002ed2 <pwm_on_off+0x42>
		pwm_on_off_helper(mtr_id, mtr_status);
 8002ec6:	79ba      	ldrb	r2, [r7, #6]
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 f8eb 	bl	80030a8 <pwm_on_off_helper>
}
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <encoder_on_off>:
-   Returns:
-     void
-   Description:
-    	Turns the encoder timer on/off.
-----------------------------------------------------------------------*/
void encoder_on_off(mtr_id_t mtr_id, mtr_status_t mtr_status) {
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	460a      	mov	r2, r1
 8002ee4:	71fb      	strb	r3, [r7, #7]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	71bb      	strb	r3, [r7, #6]
	if (mtr_id == MTR_ALL) {
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d10f      	bne.n	8002f10 <encoder_on_off+0x36>
		for (uint8_t i = 0; i < MTR_ALL; i++) {
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	73fb      	strb	r3, [r7, #15]
 8002ef4:	e008      	b.n	8002f08 <encoder_on_off+0x2e>
			encoder_on_off_helper(MTR1 + i, mtr_status);
 8002ef6:	79ba      	ldrb	r2, [r7, #6]
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 f8fb 	bl	80030f8 <encoder_on_off_helper>
		for (uint8_t i = 0; i < MTR_ALL; i++) {
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	3301      	adds	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d9f3      	bls.n	8002ef6 <encoder_on_off+0x1c>
		}
	}
	else {
		encoder_on_off_helper(mtr_id, mtr_status);
	}
}
 8002f0e:	e005      	b.n	8002f1c <encoder_on_off+0x42>
		encoder_on_off_helper(mtr_id, mtr_status);
 8002f10:	79ba      	ldrb	r2, [r7, #6]
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 f8ee 	bl	80030f8 <encoder_on_off_helper>
}
 8002f1c:	bf00      	nop
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <mtr_1ms_timeout>:
-   Description:
-    	This function gets called every 1 ms by the SysTick timer. Once
-			MTR_RPM_TIMESCALE time has passed, we will update the rpm
-			of each of the motors.
-----------------------------------------------------------------------*/
void mtr_1ms_timeout(void) {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
	static uint16_t time_passed = 0;

	if (time_passed++ == MTR_RPM_TIMESCALE) {
 8002f2a:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <mtr_1ms_timeout+0x40>)
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	b291      	uxth	r1, r2
 8002f32:	4a0c      	ldr	r2, [pc, #48]	; (8002f64 <mtr_1ms_timeout+0x40>)
 8002f34:	8011      	strh	r1, [r2, #0]
 8002f36:	2b32      	cmp	r3, #50	; 0x32
 8002f38:	d10f      	bne.n	8002f5a <mtr_1ms_timeout+0x36>
		for (uint8_t i = 0; i < MTR_ALL; i++) {
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	71fb      	strb	r3, [r7, #7]
 8002f3e:	e006      	b.n	8002f4e <mtr_1ms_timeout+0x2a>
			update_mtr_rpm(i);
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f832 	bl	8002fac <update_mtr_rpm>
		for (uint8_t i = 0; i < MTR_ALL; i++) {
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	71fb      	strb	r3, [r7, #7]
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d9f5      	bls.n	8002f40 <mtr_1ms_timeout+0x1c>
		}
		time_passed = 0;
 8002f54:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <mtr_1ms_timeout+0x40>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	801a      	strh	r2, [r3, #0]
	}
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	2000010c 	.word	0x2000010c

08002f68 <get_mtr>:
-   Returns:
-     motor_t *: Pointer to motor struct.
-   Description:
-    	Get the pointer to a motor struct
-----------------------------------------------------------------------*/
static motor_t * get_mtr(mtr_id_t mtr_id) {
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	71fb      	strb	r3, [r7, #7]
	switch (mtr_id) {
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d005      	beq.n	8002f84 <get_mtr+0x1c>
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d005      	beq.n	8002f88 <get_mtr+0x20>
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d105      	bne.n	8002f8c <get_mtr+0x24>
	case MTR1:
		return &motor_1;
 8002f80:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <get_mtr+0x34>)
 8002f82:	e004      	b.n	8002f8e <get_mtr+0x26>
	case MTR2:
		return &motor_2;
 8002f84:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <get_mtr+0x38>)
 8002f86:	e002      	b.n	8002f8e <get_mtr+0x26>
	case MTR3:
		return &motor_3;
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <get_mtr+0x3c>)
 8002f8a:	e000      	b.n	8002f8e <get_mtr+0x26>
	case MTR4:
	default:
		return &motor_4;
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <get_mtr+0x40>)
	}
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	2000008c 	.word	0x2000008c
 8002fa0:	200000ac 	.word	0x200000ac
 8002fa4:	200000cc 	.word	0x200000cc
 8002fa8:	200000ec 	.word	0x200000ec

08002fac <update_mtr_rpm>:
-     void
-   Description:
-    	Updates the rpm of the motor based off of current and previous
-			encoder counts and the circumference of our wheels.
-----------------------------------------------------------------------*/
static void update_mtr_rpm(mtr_id_t mtr_id) {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	71fb      	strb	r3, [r7, #7]
	motor_t * motor = get_mtr(mtr_id);
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff ffd5 	bl	8002f68 <get_mtr>
 8002fbe:	61b8      	str	r0, [r7, #24]
	int16_t change_in_encoder;
	uint32_t current_count = motor->position.hencoder->Instance->CNT;
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	617b      	str	r3, [r7, #20]
	uint32_t prev_count = motor->position.prev_encoder_cnt;
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	613b      	str	r3, [r7, #16]
	// Stop encoder before reading so it doesn't change during calculations
	encoder_on_off(mtr_id, MTR_OFF);
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff80 	bl	8002eda <encoder_on_off>

	// Need to account for possible roll over, check if direction is reverse
	if (HAL_GPIO_ReadPin(motor->dir_ctrl.gpio_port, motor->dir_ctrl.gpio_pin) == GPIO_PIN_RESET) {
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	889b      	ldrh	r3, [r3, #4]
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	f7fd fe25 	bl	8000c34 <HAL_GPIO_ReadPin>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d116      	bne.n	800301e <update_mtr_rpm+0x72>
		// Check if we rolled over if CNT is greater than prev_encoder_cnt when going reverse
		if (current_count > prev_count) {
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d90a      	bls.n	800300e <update_mtr_rpm+0x62>
			change_in_encoder = prev_count + ENCODER_TICKS_PER_REV - current_count;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	b29b      	uxth	r3, r3
 8003004:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003008:	b29b      	uxth	r3, r3
 800300a:	83fb      	strh	r3, [r7, #30]
 800300c:	e021      	b.n	8003052 <update_mtr_rpm+0xa6>
		}
		else {
			change_in_encoder = current_count - prev_count;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	b29a      	uxth	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	b29b      	uxth	r3, r3
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	b29b      	uxth	r3, r3
 800301a:	83fb      	strh	r3, [r7, #30]
 800301c:	e019      	b.n	8003052 <update_mtr_rpm+0xa6>
		}
	}
	// Direction is forward
	else {
		// Check if we rolled over if CNT is less than our prev_encoder_cnt when going forward
		if (motor->position.hencoder->Instance->CNT < motor->position.prev_encoder_cnt) {
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	429a      	cmp	r2, r3
 800302c:	d20a      	bcs.n	8003044 <update_mtr_rpm+0x98>
			change_in_encoder = current_count + ENCODER_TICKS_PER_REV - prev_count;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	b29a      	uxth	r2, r3
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	b29b      	uxth	r3, r3
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	b29b      	uxth	r3, r3
 800303a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800303e:	b29b      	uxth	r3, r3
 8003040:	83fb      	strh	r3, [r7, #30]
 8003042:	e006      	b.n	8003052 <update_mtr_rpm+0xa6>
		}
		else {
			change_in_encoder = current_count - prev_count;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	b29a      	uxth	r2, r3
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	b29b      	uxth	r3, r3
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	b29b      	uxth	r3, r3
 8003050:	83fb      	strh	r3, [r7, #30]
		}
	}
	motor->position.prev_encoder_cnt = current_count;
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	615a      	str	r2, [r3, #20]

	encoder_on_off(mtr_id, MTR_ON);
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	2101      	movs	r1, #1
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff ff3c 	bl	8002eda <encoder_on_off>
	float rotations =  change_in_encoder / (float)(ENCODER_TICKS_PER_REV - 1);
 8003062:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800306e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800309c <update_mtr_rpm+0xf0>
 8003072:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003076:	edc7 7a03 	vstr	s15, [r7, #12]
	// Rotations per ms multiplied by ms per min
	motor->position.rpm = (rotations / MTR_RPM_TIMESCALE) * 60000;
 800307a:	ed97 7a03 	vldr	s14, [r7, #12]
 800307e:	eddf 6a08 	vldr	s13, [pc, #32]	; 80030a0 <update_mtr_rpm+0xf4>
 8003082:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003086:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80030a4 <update_mtr_rpm+0xf8>
 800308a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8003094:	bf00      	nop
 8003096:	3720      	adds	r7, #32
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	447fc000 	.word	0x447fc000
 80030a0:	42480000 	.word	0x42480000
 80030a4:	476a6000 	.word	0x476a6000

080030a8 <pwm_on_off_helper>:

/** See pwm_on_off, helper function to write cleaner code **/
static void pwm_on_off_helper(mtr_id_t mtr_id, mtr_status_t mtr_status) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	460a      	mov	r2, r1
 80030b2:	71fb      	strb	r3, [r7, #7]
 80030b4:	4613      	mov	r3, r2
 80030b6:	71bb      	strb	r3, [r7, #6]
	motor_t * mtr = get_mtr(mtr_id);
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff ff54 	bl	8002f68 <get_mtr>
 80030c0:	60f8      	str	r0, [r7, #12]
	if (mtr_status == MTR_OFF) {
 80030c2:	79bb      	ldrb	r3, [r7, #6]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d108      	bne.n	80030da <pwm_on_off_helper+0x32>
		HAL_TIM_PWM_Stop(mtr->pwm.hpwm, mtr->pwm.channel);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4619      	mov	r1, r3
 80030d2:	4610      	mov	r0, r2
 80030d4:	f7fe fb90 	bl	80017f8 <HAL_TIM_PWM_Stop>
	}
	else if (mtr_status == MTR_ON) {
		HAL_TIM_PWM_Start(mtr->pwm.hpwm, mtr->pwm.channel);
	}
}
 80030d8:	e00a      	b.n	80030f0 <pwm_on_off_helper+0x48>
	else if (mtr_status == MTR_ON) {
 80030da:	79bb      	ldrb	r3, [r7, #6]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d107      	bne.n	80030f0 <pwm_on_off_helper+0x48>
		HAL_TIM_PWM_Start(mtr->pwm.hpwm, mtr->pwm.channel);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f7fe fb50 	bl	8001790 <HAL_TIM_PWM_Start>
}
 80030f0:	bf00      	nop
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <encoder_on_off_helper>:

/** See encoder_on_off, helper function to write cleaner code **/
static void encoder_on_off_helper(mtr_id_t mtr_id, mtr_status_t mtr_status) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	460a      	mov	r2, r1
 8003102:	71fb      	strb	r3, [r7, #7]
 8003104:	4613      	mov	r3, r2
 8003106:	71bb      	strb	r3, [r7, #6]
	motor_t * mtr = get_mtr(mtr_id);
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff ff2c 	bl	8002f68 <get_mtr>
 8003110:	60f8      	str	r0, [r7, #12]
	if (mtr_status == MTR_OFF) {
 8003112:	79bb      	ldrb	r3, [r7, #6]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d108      	bne.n	800312a <encoder_on_off_helper+0x32>
		HAL_TIM_Encoder_Stop(mtr->position.hencoder, mtr->position.channel);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4619      	mov	r1, r3
 8003122:	4610      	mov	r0, r2
 8003124:	f7fe fc8d 	bl	8001a42 <HAL_TIM_Encoder_Stop>
	}
	else if (mtr_status == MTR_ON) {
		HAL_TIM_Encoder_Start(mtr->position.hencoder, mtr->position.channel);
	}
}
 8003128:	e00a      	b.n	8003140 <encoder_on_off_helper+0x48>
	else if (mtr_status == MTR_ON) {
 800312a:	79bb      	ldrb	r3, [r7, #6]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d107      	bne.n	8003140 <encoder_on_off_helper+0x48>
		HAL_TIM_Encoder_Start(mtr->position.hencoder, mtr->position.channel);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	4619      	mov	r1, r3
 800313a:	4610      	mov	r0, r2
 800313c:	f7fe fc4a 	bl	80019d4 <HAL_TIM_Encoder_Start>
}
 8003140:	bf00      	nop
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08a      	sub	sp, #40	; 0x28
 800314c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	4a3b      	ldr	r2, [pc, #236]	; (8003240 <MX_GPIO_Init+0xf8>)
 8003154:	4b3a      	ldr	r3, [pc, #232]	; (8003240 <MX_GPIO_Init+0xf8>)
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800315c:	6313      	str	r3, [r2, #48]	; 0x30
 800315e:	4b38      	ldr	r3, [pc, #224]	; (8003240 <MX_GPIO_Init+0xf8>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	4a34      	ldr	r2, [pc, #208]	; (8003240 <MX_GPIO_Init+0xf8>)
 8003170:	4b33      	ldr	r3, [pc, #204]	; (8003240 <MX_GPIO_Init+0xf8>)
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6313      	str	r3, [r2, #48]	; 0x30
 800317a:	4b31      	ldr	r3, [pc, #196]	; (8003240 <MX_GPIO_Init+0xf8>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	4a2d      	ldr	r2, [pc, #180]	; (8003240 <MX_GPIO_Init+0xf8>)
 800318c:	4b2c      	ldr	r3, [pc, #176]	; (8003240 <MX_GPIO_Init+0xf8>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	f043 0302 	orr.w	r3, r3, #2
 8003194:	6313      	str	r3, [r2, #48]	; 0x30
 8003196:	4b2a      	ldr	r3, [pc, #168]	; (8003240 <MX_GPIO_Init+0xf8>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	607b      	str	r3, [r7, #4]
 80031a6:	4a26      	ldr	r2, [pc, #152]	; (8003240 <MX_GPIO_Init+0xf8>)
 80031a8:	4b25      	ldr	r3, [pc, #148]	; (8003240 <MX_GPIO_Init+0xf8>)
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	f043 0304 	orr.w	r3, r3, #4
 80031b0:	6313      	str	r3, [r2, #48]	; 0x30
 80031b2:	4b23      	ldr	r3, [pc, #140]	; (8003240 <MX_GPIO_Init+0xf8>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	607b      	str	r3, [r7, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MTR2_DIR_GPIO_Port, MTR2_DIR_Pin, GPIO_PIN_RESET);
 80031be:	2200      	movs	r2, #0
 80031c0:	2120      	movs	r1, #32
 80031c2:	4820      	ldr	r0, [pc, #128]	; (8003244 <MX_GPIO_Init+0xfc>)
 80031c4:	f7fd fd4e 	bl	8000c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MTR3_DIR_Pin|MTR1_DIR_Pin, GPIO_PIN_RESET);
 80031c8:	2200      	movs	r2, #0
 80031ca:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 80031ce:	481e      	ldr	r0, [pc, #120]	; (8003248 <MX_GPIO_Init+0x100>)
 80031d0:	f7fd fd48 	bl	8000c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MTR4_DIR_GPIO_Port, MTR4_DIR_Pin, GPIO_PIN_RESET);
 80031d4:	2200      	movs	r2, #0
 80031d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031da:	481c      	ldr	r0, [pc, #112]	; (800324c <MX_GPIO_Init+0x104>)
 80031dc:	f7fd fd42 	bl	8000c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MTR2_DIR_Pin;
 80031e0:	2320      	movs	r3, #32
 80031e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031e4:	2301      	movs	r3, #1
 80031e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ec:	2300      	movs	r3, #0
 80031ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MTR2_DIR_GPIO_Port, &GPIO_InitStruct);
 80031f0:	f107 0314 	add.w	r3, r7, #20
 80031f4:	4619      	mov	r1, r3
 80031f6:	4813      	ldr	r0, [pc, #76]	; (8003244 <MX_GPIO_Init+0xfc>)
 80031f8:	f7fd fb8a 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MTR3_DIR_Pin|MTR1_DIR_Pin;
 80031fc:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8003200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003202:	2301      	movs	r3, #1
 8003204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320a:	2300      	movs	r3, #0
 800320c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800320e:	f107 0314 	add.w	r3, r7, #20
 8003212:	4619      	mov	r1, r3
 8003214:	480c      	ldr	r0, [pc, #48]	; (8003248 <MX_GPIO_Init+0x100>)
 8003216:	f7fd fb7b 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MTR4_DIR_Pin;
 800321a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800321e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003220:	2301      	movs	r3, #1
 8003222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003224:	2300      	movs	r3, #0
 8003226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003228:	2300      	movs	r3, #0
 800322a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MTR4_DIR_GPIO_Port, &GPIO_InitStruct);
 800322c:	f107 0314 	add.w	r3, r7, #20
 8003230:	4619      	mov	r1, r3
 8003232:	4806      	ldr	r0, [pc, #24]	; (800324c <MX_GPIO_Init+0x104>)
 8003234:	f7fd fb6c 	bl	8000910 <HAL_GPIO_Init>

}
 8003238:	bf00      	nop
 800323a:	3728      	adds	r7, #40	; 0x28
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40023800 	.word	0x40023800
 8003244:	40020000 	.word	0x40020000
 8003248:	40020400 	.word	0x40020400
 800324c:	40020800 	.word	0x40020800

08003250 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003254:	f7fd f9bc 	bl	80005d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003258:	f000 f818 	bl	800328c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800325c:	f7ff ff74 	bl	8003148 <MX_GPIO_Init>
  MX_TIM1_Init();
 8003260:	f000 f918 	bl	8003494 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003264:	f000 f9b6 	bl	80035d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003268:	f000 fa00 	bl	800366c <MX_TIM4_Init>
  MX_TIM8_Init();
 800326c:	f000 fa9a 	bl	80037a4 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8003270:	f000 fd0a 	bl	8003c88 <MX_USART2_UART_Init>
//  MX_CAN1_Init();
  MX_TIM2_Init();
 8003274:	f000 f95e 	bl	8003534 <MX_TIM2_Init>
  MX_TIM5_Init();
 8003278:	f000 fa44 	bl	8003704 <MX_TIM5_Init>
  MX_TIM10_Init();
 800327c:	f000 fae2 	bl	8003844 <MX_TIM10_Init>
  MX_TIM12_Init();
 8003280:	f000 fb2e 	bl	80038e0 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  /** Don't want to write code in this mess, run in application.c **/
  app_run();
 8003284:	f7ff fc5a 	bl	8002b3c <app_run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003288:	e7fe      	b.n	8003288 <main+0x38>
	...

0800328c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b094      	sub	sp, #80	; 0x50
 8003290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	4a36      	ldr	r2, [pc, #216]	; (8003370 <SystemClock_Config+0xe4>)
 8003298:	4b35      	ldr	r3, [pc, #212]	; (8003370 <SystemClock_Config+0xe4>)
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a0:	6413      	str	r3, [r2, #64]	; 0x40
 80032a2:	4b33      	ldr	r3, [pc, #204]	; (8003370 <SystemClock_Config+0xe4>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032aa:	607b      	str	r3, [r7, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80032ae:	2300      	movs	r3, #0
 80032b0:	603b      	str	r3, [r7, #0]
 80032b2:	4a30      	ldr	r2, [pc, #192]	; (8003374 <SystemClock_Config+0xe8>)
 80032b4:	4b2f      	ldr	r3, [pc, #188]	; (8003374 <SystemClock_Config+0xe8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80032bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	4b2c      	ldr	r3, [pc, #176]	; (8003374 <SystemClock_Config+0xe8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80032ce:	2302      	movs	r3, #2
 80032d0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032d2:	2301      	movs	r3, #1
 80032d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80032d6:	2310      	movs	r3, #16
 80032d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032da:	2302      	movs	r3, #2
 80032dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80032de:	2300      	movs	r3, #0
 80032e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80032e2:	2310      	movs	r3, #16
 80032e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80032e6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80032ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80032ec:	2304      	movs	r3, #4
 80032ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80032f0:	2302      	movs	r3, #2
 80032f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80032f4:	2302      	movs	r3, #2
 80032f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032f8:	f107 031c 	add.w	r3, r7, #28
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fd ff97 	bl	8001230 <HAL_RCC_OscConfig>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <SystemClock_Config+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003308:	21a0      	movs	r1, #160	; 0xa0
 800330a:	481b      	ldr	r0, [pc, #108]	; (8003378 <SystemClock_Config+0xec>)
 800330c:	f000 f838 	bl	8003380 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003310:	230f      	movs	r3, #15
 8003312:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003314:	2302      	movs	r3, #2
 8003316:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003318:	2300      	movs	r3, #0
 800331a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800331c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003320:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003322:	2300      	movs	r3, #0
 8003324:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003326:	f107 0308 	add.w	r3, r7, #8
 800332a:	2102      	movs	r1, #2
 800332c:	4618      	mov	r0, r3
 800332e:	f7fd fcb3 	bl	8000c98 <HAL_RCC_ClockConfig>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <SystemClock_Config+0xb4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003338:	21ae      	movs	r1, #174	; 0xae
 800333a:	480f      	ldr	r0, [pc, #60]	; (8003378 <SystemClock_Config+0xec>)
 800333c:	f000 f820 	bl	8003380 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003340:	f7fd fd8c 	bl	8000e5c <HAL_RCC_GetHCLKFreq>
 8003344:	4602      	mov	r2, r0
 8003346:	4b0d      	ldr	r3, [pc, #52]	; (800337c <SystemClock_Config+0xf0>)
 8003348:	fba3 2302 	umull	r2, r3, r3, r2
 800334c:	099b      	lsrs	r3, r3, #6
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd faaf 	bl	80008b2 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003354:	2004      	movs	r0, #4
 8003356:	f7fd fab9 	bl	80008cc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800335a:	2200      	movs	r2, #0
 800335c:	2100      	movs	r1, #0
 800335e:	f04f 30ff 	mov.w	r0, #4294967295
 8003362:	f7fd fa7c 	bl	800085e <HAL_NVIC_SetPriority>
}
 8003366:	bf00      	nop
 8003368:	3750      	adds	r7, #80	; 0x50
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40023800 	.word	0x40023800
 8003374:	40007000 	.word	0x40007000
 8003378:	08004670 	.word	0x08004670
 800337c:	10624dd3 	.word	0x10624dd3

08003380 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800338a:	e7fe      	b.n	800338a <_Error_Handler+0xa>

0800338c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003390:	2007      	movs	r0, #7
 8003392:	f7fd fa59 	bl	8000848 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003396:	2200      	movs	r2, #0
 8003398:	2100      	movs	r1, #0
 800339a:	f06f 000b 	mvn.w	r0, #11
 800339e:	f7fd fa5e 	bl	800085e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80033a2:	2200      	movs	r2, #0
 80033a4:	2100      	movs	r1, #0
 80033a6:	f06f 000a 	mvn.w	r0, #10
 80033aa:	f7fd fa58 	bl	800085e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80033ae:	2200      	movs	r2, #0
 80033b0:	2100      	movs	r1, #0
 80033b2:	f06f 0009 	mvn.w	r0, #9
 80033b6:	f7fd fa52 	bl	800085e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80033ba:	2200      	movs	r2, #0
 80033bc:	2100      	movs	r1, #0
 80033be:	f06f 0004 	mvn.w	r0, #4
 80033c2:	f7fd fa4c 	bl	800085e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80033c6:	2200      	movs	r2, #0
 80033c8:	2100      	movs	r1, #0
 80033ca:	f06f 0003 	mvn.w	r0, #3
 80033ce:	f7fd fa46 	bl	800085e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80033d2:	2200      	movs	r2, #0
 80033d4:	2100      	movs	r1, #0
 80033d6:	f06f 0001 	mvn.w	r0, #1
 80033da:	f7fd fa40 	bl	800085e <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80033de:	2200      	movs	r2, #0
 80033e0:	2100      	movs	r1, #0
 80033e2:	f04f 30ff 	mov.w	r0, #4294967295
 80033e6:	f7fd fa3a 	bl	800085e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}

080033ee <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033f2:	f7fd f93f 	bl	8000674 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80033f6:	f7fd fa85 	bl	8000904 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <TIM8_UP_TIM13_IRQHandler>:

/**
* @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
*/
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003404:	4802      	ldr	r0, [pc, #8]	; (8003410 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003406:	f7fe fb63 	bl	8001ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000120 	.word	0x20000120

08003414 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
* @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
*/
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003418:	4802      	ldr	r0, [pc, #8]	; (8003424 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800341a:	f7fe fb59 	bl	8001ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800341e:	bf00      	nop
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000120 	.word	0x20000120

08003428 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800342c:	4a16      	ldr	r2, [pc, #88]	; (8003488 <SystemInit+0x60>)
 800342e:	4b16      	ldr	r3, [pc, #88]	; (8003488 <SystemInit+0x60>)
 8003430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800343c:	4a13      	ldr	r2, [pc, #76]	; (800348c <SystemInit+0x64>)
 800343e:	4b13      	ldr	r3, [pc, #76]	; (800348c <SystemInit+0x64>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003448:	4b10      	ldr	r3, [pc, #64]	; (800348c <SystemInit+0x64>)
 800344a:	2200      	movs	r2, #0
 800344c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800344e:	4a0f      	ldr	r2, [pc, #60]	; (800348c <SystemInit+0x64>)
 8003450:	4b0e      	ldr	r3, [pc, #56]	; (800348c <SystemInit+0x64>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800345e:	4b0b      	ldr	r3, [pc, #44]	; (800348c <SystemInit+0x64>)
 8003460:	4a0b      	ldr	r2, [pc, #44]	; (8003490 <SystemInit+0x68>)
 8003462:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003464:	4a09      	ldr	r2, [pc, #36]	; (800348c <SystemInit+0x64>)
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <SystemInit+0x64>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800346e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003470:	4b06      	ldr	r3, [pc, #24]	; (800348c <SystemInit+0x64>)
 8003472:	2200      	movs	r2, #0
 8003474:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003476:	4b04      	ldr	r3, [pc, #16]	; (8003488 <SystemInit+0x60>)
 8003478:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800347c:	609a      	str	r2, [r3, #8]
#endif
}
 800347e:	bf00      	nop
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	e000ed00 	.word	0xe000ed00
 800348c:	40023800 	.word	0x40023800
 8003490:	24003010 	.word	0x24003010

08003494 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08c      	sub	sp, #48	; 0x30
 8003498:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
 800349a:	4b23      	ldr	r3, [pc, #140]	; (8003528 <MX_TIM1_Init+0x94>)
 800349c:	4a23      	ldr	r2, [pc, #140]	; (800352c <MX_TIM1_Init+0x98>)
 800349e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80034a0:	4b21      	ldr	r3, [pc, #132]	; (8003528 <MX_TIM1_Init+0x94>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034a6:	4b20      	ldr	r3, [pc, #128]	; (8003528 <MX_TIM1_Init+0x94>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 80034ac:	4b1e      	ldr	r3, [pc, #120]	; (8003528 <MX_TIM1_Init+0x94>)
 80034ae:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80034b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034b4:	4b1c      	ldr	r3, [pc, #112]	; (8003528 <MX_TIM1_Init+0x94>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80034ba:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <MX_TIM1_Init+0x94>)
 80034bc:	2200      	movs	r2, #0
 80034be:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80034c0:	2301      	movs	r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80034c4:	2300      	movs	r3, #0
 80034c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80034c8:	2301      	movs	r3, #1
 80034ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80034d4:	2300      	movs	r3, #0
 80034d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80034d8:	2301      	movs	r3, #1
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80034dc:	2300      	movs	r3, #0
 80034de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80034e4:	f107 030c 	add.w	r3, r7, #12
 80034e8:	4619      	mov	r1, r3
 80034ea:	480f      	ldr	r0, [pc, #60]	; (8003528 <MX_TIM1_Init+0x94>)
 80034ec:	f7fe f9dc 	bl	80018a8 <HAL_TIM_Encoder_Init>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <MX_TIM1_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80034f6:	2151      	movs	r1, #81	; 0x51
 80034f8:	480d      	ldr	r0, [pc, #52]	; (8003530 <MX_TIM1_Init+0x9c>)
 80034fa:	f7ff ff41 	bl	8003380 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034fe:	2300      	movs	r3, #0
 8003500:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003502:	2300      	movs	r3, #0
 8003504:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003506:	1d3b      	adds	r3, r7, #4
 8003508:	4619      	mov	r1, r3
 800350a:	4807      	ldr	r0, [pc, #28]	; (8003528 <MX_TIM1_Init+0x94>)
 800350c:	f7fe ff72 	bl	80023f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <MX_TIM1_Init+0x8a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003516:	2158      	movs	r1, #88	; 0x58
 8003518:	4805      	ldr	r0, [pc, #20]	; (8003530 <MX_TIM1_Init+0x9c>)
 800351a:	f7ff ff31 	bl	8003380 <_Error_Handler>
  }

}
 800351e:	bf00      	nop
 8003520:	3730      	adds	r7, #48	; 0x30
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	2000024c 	.word	0x2000024c
 800352c:	40010000 	.word	0x40010000
 8003530:	08004680 	.word	0x08004680

08003534 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08a      	sub	sp, #40	; 0x28
 8003538:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 800353a:	4b24      	ldr	r3, [pc, #144]	; (80035cc <MX_TIM2_Init+0x98>)
 800353c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003540:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003542:	4b22      	ldr	r3, [pc, #136]	; (80035cc <MX_TIM2_Init+0x98>)
 8003544:	2200      	movs	r2, #0
 8003546:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003548:	4b20      	ldr	r3, [pc, #128]	; (80035cc <MX_TIM2_Init+0x98>)
 800354a:	2200      	movs	r2, #0
 800354c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8399;
 800354e:	4b1f      	ldr	r3, [pc, #124]	; (80035cc <MX_TIM2_Init+0x98>)
 8003550:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003554:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003556:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <MX_TIM2_Init+0x98>)
 8003558:	2200      	movs	r2, #0
 800355a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800355c:	481b      	ldr	r0, [pc, #108]	; (80035cc <MX_TIM2_Init+0x98>)
 800355e:	f7fe f8ec 	bl	800173a <HAL_TIM_PWM_Init>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <MX_TIM2_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003568:	2169      	movs	r1, #105	; 0x69
 800356a:	4819      	ldr	r0, [pc, #100]	; (80035d0 <MX_TIM2_Init+0x9c>)
 800356c:	f7ff ff08 	bl	8003380 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003570:	2300      	movs	r3, #0
 8003572:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003574:	2300      	movs	r3, #0
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003578:	f107 0320 	add.w	r3, r7, #32
 800357c:	4619      	mov	r1, r3
 800357e:	4813      	ldr	r0, [pc, #76]	; (80035cc <MX_TIM2_Init+0x98>)
 8003580:	f7fe ff38 	bl	80023f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <MX_TIM2_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800358a:	2170      	movs	r1, #112	; 0x70
 800358c:	4810      	ldr	r0, [pc, #64]	; (80035d0 <MX_TIM2_Init+0x9c>)
 800358e:	f7ff fef7 	bl	8003380 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003592:	2360      	movs	r3, #96	; 0x60
 8003594:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003596:	2300      	movs	r3, #0
 8003598:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80035a2:	1d3b      	adds	r3, r7, #4
 80035a4:	220c      	movs	r2, #12
 80035a6:	4619      	mov	r1, r3
 80035a8:	4808      	ldr	r0, [pc, #32]	; (80035cc <MX_TIM2_Init+0x98>)
 80035aa:	f7fe fb99 	bl	8001ce0 <HAL_TIM_PWM_ConfigChannel>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <MX_TIM2_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 80035b4:	2179      	movs	r1, #121	; 0x79
 80035b6:	4806      	ldr	r0, [pc, #24]	; (80035d0 <MX_TIM2_Init+0x9c>)
 80035b8:	f7ff fee2 	bl	8003380 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 80035bc:	4803      	ldr	r0, [pc, #12]	; (80035cc <MX_TIM2_Init+0x98>)
 80035be:	f000 faf7 	bl	8003bb0 <HAL_TIM_MspPostInit>

}
 80035c2:	bf00      	nop
 80035c4:	3728      	adds	r7, #40	; 0x28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000288 	.word	0x20000288
 80035d0:	08004680 	.word	0x08004680

080035d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08c      	sub	sp, #48	; 0x30
 80035d8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 80035da:	4b21      	ldr	r3, [pc, #132]	; (8003660 <MX_TIM3_Init+0x8c>)
 80035dc:	4a21      	ldr	r2, [pc, #132]	; (8003664 <MX_TIM3_Init+0x90>)
 80035de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80035e0:	4b1f      	ldr	r3, [pc, #124]	; (8003660 <MX_TIM3_Init+0x8c>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035e6:	4b1e      	ldr	r3, [pc, #120]	; (8003660 <MX_TIM3_Init+0x8c>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1023;
 80035ec:	4b1c      	ldr	r3, [pc, #112]	; (8003660 <MX_TIM3_Init+0x8c>)
 80035ee:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80035f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035f4:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <MX_TIM3_Init+0x8c>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	611a      	str	r2, [r3, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80035fa:	2301      	movs	r3, #1
 80035fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80035fe:	2300      	movs	r3, #0
 8003600:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003602:	2301      	movs	r3, #1
 8003604:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003606:	2300      	movs	r3, #0
 8003608:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800360e:	2300      	movs	r3, #0
 8003610:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003612:	2301      	movs	r3, #1
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003616:	2300      	movs	r3, #0
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800361e:	f107 030c 	add.w	r3, r7, #12
 8003622:	4619      	mov	r1, r3
 8003624:	480e      	ldr	r0, [pc, #56]	; (8003660 <MX_TIM3_Init+0x8c>)
 8003626:	f7fe f93f 	bl	80018a8 <HAL_TIM_Encoder_Init>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <MX_TIM3_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003630:	2195      	movs	r1, #149	; 0x95
 8003632:	480d      	ldr	r0, [pc, #52]	; (8003668 <MX_TIM3_Init+0x94>)
 8003634:	f7ff fea4 	bl	8003380 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003638:	2300      	movs	r3, #0
 800363a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800363c:	2300      	movs	r3, #0
 800363e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003640:	1d3b      	adds	r3, r7, #4
 8003642:	4619      	mov	r1, r3
 8003644:	4806      	ldr	r0, [pc, #24]	; (8003660 <MX_TIM3_Init+0x8c>)
 8003646:	f7fe fed5 	bl	80023f4 <HAL_TIMEx_MasterConfigSynchronization>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <MX_TIM3_Init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003650:	219c      	movs	r1, #156	; 0x9c
 8003652:	4805      	ldr	r0, [pc, #20]	; (8003668 <MX_TIM3_Init+0x94>)
 8003654:	f7ff fe94 	bl	8003380 <_Error_Handler>
  }

}
 8003658:	bf00      	nop
 800365a:	3730      	adds	r7, #48	; 0x30
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000210 	.word	0x20000210
 8003664:	40000400 	.word	0x40000400
 8003668:	08004680 	.word	0x08004680

0800366c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08c      	sub	sp, #48	; 0x30
 8003670:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 8003672:	4b21      	ldr	r3, [pc, #132]	; (80036f8 <MX_TIM4_Init+0x8c>)
 8003674:	4a21      	ldr	r2, [pc, #132]	; (80036fc <MX_TIM4_Init+0x90>)
 8003676:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003678:	4b1f      	ldr	r3, [pc, #124]	; (80036f8 <MX_TIM4_Init+0x8c>)
 800367a:	2200      	movs	r2, #0
 800367c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800367e:	4b1e      	ldr	r3, [pc, #120]	; (80036f8 <MX_TIM4_Init+0x8c>)
 8003680:	2200      	movs	r2, #0
 8003682:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1023;
 8003684:	4b1c      	ldr	r3, [pc, #112]	; (80036f8 <MX_TIM4_Init+0x8c>)
 8003686:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800368a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800368c:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <MX_TIM4_Init+0x8c>)
 800368e:	2200      	movs	r2, #0
 8003690:	611a      	str	r2, [r3, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003692:	2301      	movs	r3, #1
 8003694:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003696:	2300      	movs	r3, #0
 8003698:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800369a:	2301      	movs	r3, #1
 800369c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800369e:	2300      	movs	r3, #0
 80036a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80036a2:	2300      	movs	r3, #0
 80036a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80036a6:	2300      	movs	r3, #0
 80036a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80036aa:	2301      	movs	r3, #1
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80036ae:	2300      	movs	r3, #0
 80036b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80036b6:	f107 030c 	add.w	r3, r7, #12
 80036ba:	4619      	mov	r1, r3
 80036bc:	480e      	ldr	r0, [pc, #56]	; (80036f8 <MX_TIM4_Init+0x8c>)
 80036be:	f7fe f8f3 	bl	80018a8 <HAL_TIM_Encoder_Init>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <MX_TIM4_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 80036c8:	21b6      	movs	r1, #182	; 0xb6
 80036ca:	480d      	ldr	r0, [pc, #52]	; (8003700 <MX_TIM4_Init+0x94>)
 80036cc:	f7ff fe58 	bl	8003380 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036d0:	2300      	movs	r3, #0
 80036d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	4619      	mov	r1, r3
 80036dc:	4806      	ldr	r0, [pc, #24]	; (80036f8 <MX_TIM4_Init+0x8c>)
 80036de:	f7fe fe89 	bl	80023f4 <HAL_TIMEx_MasterConfigSynchronization>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <MX_TIM4_Init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 80036e8:	21bd      	movs	r1, #189	; 0xbd
 80036ea:	4805      	ldr	r0, [pc, #20]	; (8003700 <MX_TIM4_Init+0x94>)
 80036ec:	f7ff fe48 	bl	8003380 <_Error_Handler>
  }

}
 80036f0:	bf00      	nop
 80036f2:	3730      	adds	r7, #48	; 0x30
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	2000015c 	.word	0x2000015c
 80036fc:	40000800 	.word	0x40000800
 8003700:	08004680 	.word	0x08004680

08003704 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08a      	sub	sp, #40	; 0x28
 8003708:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim5.Instance = TIM5;
 800370a:	4b23      	ldr	r3, [pc, #140]	; (8003798 <MX_TIM5_Init+0x94>)
 800370c:	4a23      	ldr	r2, [pc, #140]	; (800379c <MX_TIM5_Init+0x98>)
 800370e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003710:	4b21      	ldr	r3, [pc, #132]	; (8003798 <MX_TIM5_Init+0x94>)
 8003712:	2200      	movs	r2, #0
 8003714:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003716:	4b20      	ldr	r3, [pc, #128]	; (8003798 <MX_TIM5_Init+0x94>)
 8003718:	2200      	movs	r2, #0
 800371a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 8399;
 800371c:	4b1e      	ldr	r3, [pc, #120]	; (8003798 <MX_TIM5_Init+0x94>)
 800371e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003722:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003724:	4b1c      	ldr	r3, [pc, #112]	; (8003798 <MX_TIM5_Init+0x94>)
 8003726:	2200      	movs	r2, #0
 8003728:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800372a:	481b      	ldr	r0, [pc, #108]	; (8003798 <MX_TIM5_Init+0x94>)
 800372c:	f7fe f805 	bl	800173a <HAL_TIM_PWM_Init>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <MX_TIM5_Init+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003736:	21ce      	movs	r1, #206	; 0xce
 8003738:	4819      	ldr	r0, [pc, #100]	; (80037a0 <MX_TIM5_Init+0x9c>)
 800373a:	f7ff fe21 	bl	8003380 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800373e:	2300      	movs	r3, #0
 8003740:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003742:	2300      	movs	r3, #0
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003746:	f107 0320 	add.w	r3, r7, #32
 800374a:	4619      	mov	r1, r3
 800374c:	4812      	ldr	r0, [pc, #72]	; (8003798 <MX_TIM5_Init+0x94>)
 800374e:	f7fe fe51 	bl	80023f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <MX_TIM5_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003758:	21d5      	movs	r1, #213	; 0xd5
 800375a:	4811      	ldr	r0, [pc, #68]	; (80037a0 <MX_TIM5_Init+0x9c>)
 800375c:	f7ff fe10 	bl	8003380 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003760:	2360      	movs	r3, #96	; 0x60
 8003762:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003770:	1d3b      	adds	r3, r7, #4
 8003772:	2204      	movs	r2, #4
 8003774:	4619      	mov	r1, r3
 8003776:	4808      	ldr	r0, [pc, #32]	; (8003798 <MX_TIM5_Init+0x94>)
 8003778:	f7fe fab2 	bl	8001ce0 <HAL_TIM_PWM_ConfigChannel>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <MX_TIM5_Init+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003782:	21de      	movs	r1, #222	; 0xde
 8003784:	4806      	ldr	r0, [pc, #24]	; (80037a0 <MX_TIM5_Init+0x9c>)
 8003786:	f7ff fdfb 	bl	8003380 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim5);
 800378a:	4803      	ldr	r0, [pc, #12]	; (8003798 <MX_TIM5_Init+0x94>)
 800378c:	f000 fa10 	bl	8003bb0 <HAL_TIM_MspPostInit>

}
 8003790:	bf00      	nop
 8003792:	3728      	adds	r7, #40	; 0x28
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	200001d4 	.word	0x200001d4
 800379c:	40000c00 	.word	0x40000c00
 80037a0:	08004680 	.word	0x08004680

080037a4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08c      	sub	sp, #48	; 0x30
 80037a8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim8.Instance = TIM8;
 80037aa:	4b23      	ldr	r3, [pc, #140]	; (8003838 <MX_TIM8_Init+0x94>)
 80037ac:	4a23      	ldr	r2, [pc, #140]	; (800383c <MX_TIM8_Init+0x98>)
 80037ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80037b0:	4b21      	ldr	r3, [pc, #132]	; (8003838 <MX_TIM8_Init+0x94>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037b6:	4b20      	ldr	r3, [pc, #128]	; (8003838 <MX_TIM8_Init+0x94>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1023;
 80037bc:	4b1e      	ldr	r3, [pc, #120]	; (8003838 <MX_TIM8_Init+0x94>)
 80037be:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80037c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037c4:	4b1c      	ldr	r3, [pc, #112]	; (8003838 <MX_TIM8_Init+0x94>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80037ca:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <MX_TIM8_Init+0x94>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80037d0:	2301      	movs	r3, #1
 80037d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80037d4:	2300      	movs	r3, #0
 80037d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037d8:	2301      	movs	r3, #1
 80037da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037dc:	2300      	movs	r3, #0
 80037de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037e4:	2300      	movs	r3, #0
 80037e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037e8:	2301      	movs	r3, #1
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037ec:	2300      	movs	r3, #0
 80037ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80037f4:	f107 030c 	add.w	r3, r7, #12
 80037f8:	4619      	mov	r1, r3
 80037fa:	480f      	ldr	r0, [pc, #60]	; (8003838 <MX_TIM8_Init+0x94>)
 80037fc:	f7fe f854 	bl	80018a8 <HAL_TIM_Encoder_Init>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <MX_TIM8_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003806:	21fb      	movs	r1, #251	; 0xfb
 8003808:	480d      	ldr	r0, [pc, #52]	; (8003840 <MX_TIM8_Init+0x9c>)
 800380a:	f7ff fdb9 	bl	8003380 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800380e:	2300      	movs	r3, #0
 8003810:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003812:	2300      	movs	r3, #0
 8003814:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003816:	1d3b      	adds	r3, r7, #4
 8003818:	4619      	mov	r1, r3
 800381a:	4807      	ldr	r0, [pc, #28]	; (8003838 <MX_TIM8_Init+0x94>)
 800381c:	f7fe fdea 	bl	80023f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d004      	beq.n	8003830 <MX_TIM8_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003826:	f44f 7181 	mov.w	r1, #258	; 0x102
 800382a:	4805      	ldr	r0, [pc, #20]	; (8003840 <MX_TIM8_Init+0x9c>)
 800382c:	f7ff fda8 	bl	8003380 <_Error_Handler>
  }

}
 8003830:	bf00      	nop
 8003832:	3730      	adds	r7, #48	; 0x30
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	20000120 	.word	0x20000120
 800383c:	40010400 	.word	0x40010400
 8003840:	08004680 	.word	0x08004680

08003844 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC;

  htim10.Instance = TIM10;
 800384a:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <MX_TIM10_Init+0x90>)
 800384c:	4a22      	ldr	r2, [pc, #136]	; (80038d8 <MX_TIM10_Init+0x94>)
 800384e:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8003850:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <MX_TIM10_Init+0x90>)
 8003852:	2200      	movs	r2, #0
 8003854:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003856:	4b1f      	ldr	r3, [pc, #124]	; (80038d4 <MX_TIM10_Init+0x90>)
 8003858:	2200      	movs	r2, #0
 800385a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8399;
 800385c:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <MX_TIM10_Init+0x90>)
 800385e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003862:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <MX_TIM10_Init+0x90>)
 8003866:	2200      	movs	r2, #0
 8003868:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800386a:	481a      	ldr	r0, [pc, #104]	; (80038d4 <MX_TIM10_Init+0x90>)
 800386c:	f7fd ff3a 	bl	80016e4 <HAL_TIM_Base_Init>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d004      	beq.n	8003880 <MX_TIM10_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003876:	f44f 7189 	mov.w	r1, #274	; 0x112
 800387a:	4818      	ldr	r0, [pc, #96]	; (80038dc <MX_TIM10_Init+0x98>)
 800387c:	f7ff fd80 	bl	8003380 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8003880:	4814      	ldr	r0, [pc, #80]	; (80038d4 <MX_TIM10_Init+0x90>)
 8003882:	f7fd ff5a 	bl	800173a <HAL_TIM_PWM_Init>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d004      	beq.n	8003896 <MX_TIM10_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 800388c:	f240 1117 	movw	r1, #279	; 0x117
 8003890:	4812      	ldr	r0, [pc, #72]	; (80038dc <MX_TIM10_Init+0x98>)
 8003892:	f7ff fd75 	bl	8003380 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003896:	2360      	movs	r3, #96	; 0x60
 8003898:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3999;
 800389a:	f640 739f 	movw	r3, #3999	; 0xf9f
 800389e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038a8:	1d3b      	adds	r3, r7, #4
 80038aa:	2200      	movs	r2, #0
 80038ac:	4619      	mov	r1, r3
 80038ae:	4809      	ldr	r0, [pc, #36]	; (80038d4 <MX_TIM10_Init+0x90>)
 80038b0:	f7fe fa16 	bl	8001ce0 <HAL_TIM_PWM_ConfigChannel>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d004      	beq.n	80038c4 <MX_TIM10_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 80038ba:	f44f 7190 	mov.w	r1, #288	; 0x120
 80038be:	4807      	ldr	r0, [pc, #28]	; (80038dc <MX_TIM10_Init+0x98>)
 80038c0:	f7ff fd5e 	bl	8003380 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim10);
 80038c4:	4803      	ldr	r0, [pc, #12]	; (80038d4 <MX_TIM10_Init+0x90>)
 80038c6:	f000 f973 	bl	8003bb0 <HAL_TIM_MspPostInit>

}
 80038ca:	bf00      	nop
 80038cc:	3720      	adds	r7, #32
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20000198 	.word	0x20000198
 80038d8:	40014400 	.word	0x40014400
 80038dc:	08004680 	.word	0x08004680

080038e0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC;

  htim12.Instance = TIM12;
 80038e6:	4b1c      	ldr	r3, [pc, #112]	; (8003958 <MX_TIM12_Init+0x78>)
 80038e8:	4a1c      	ldr	r2, [pc, #112]	; (800395c <MX_TIM12_Init+0x7c>)
 80038ea:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80038ec:	4b1a      	ldr	r3, [pc, #104]	; (8003958 <MX_TIM12_Init+0x78>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f2:	4b19      	ldr	r3, [pc, #100]	; (8003958 <MX_TIM12_Init+0x78>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 8399;
 80038f8:	4b17      	ldr	r3, [pc, #92]	; (8003958 <MX_TIM12_Init+0x78>)
 80038fa:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80038fe:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003900:	4b15      	ldr	r3, [pc, #84]	; (8003958 <MX_TIM12_Init+0x78>)
 8003902:	2200      	movs	r2, #0
 8003904:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003906:	4814      	ldr	r0, [pc, #80]	; (8003958 <MX_TIM12_Init+0x78>)
 8003908:	f7fd ff17 	bl	800173a <HAL_TIM_PWM_Init>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d004      	beq.n	800391c <MX_TIM12_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003912:	f44f 7199 	mov.w	r1, #306	; 0x132
 8003916:	4812      	ldr	r0, [pc, #72]	; (8003960 <MX_TIM12_Init+0x80>)
 8003918:	f7ff fd32 	bl	8003380 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800391c:	2360      	movs	r3, #96	; 0x60
 800391e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003920:	2300      	movs	r3, #0
 8003922:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800392c:	1d3b      	adds	r3, r7, #4
 800392e:	2204      	movs	r2, #4
 8003930:	4619      	mov	r1, r3
 8003932:	4809      	ldr	r0, [pc, #36]	; (8003958 <MX_TIM12_Init+0x78>)
 8003934:	f7fe f9d4 	bl	8001ce0 <HAL_TIM_PWM_ConfigChannel>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d004      	beq.n	8003948 <MX_TIM12_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 800393e:	f240 113b 	movw	r1, #315	; 0x13b
 8003942:	4807      	ldr	r0, [pc, #28]	; (8003960 <MX_TIM12_Init+0x80>)
 8003944:	f7ff fd1c 	bl	8003380 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim12);
 8003948:	4803      	ldr	r0, [pc, #12]	; (8003958 <MX_TIM12_Init+0x78>)
 800394a:	f000 f931 	bl	8003bb0 <HAL_TIM_MspPostInit>

}
 800394e:	bf00      	nop
 8003950:	3720      	adds	r7, #32
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	200002c4 	.word	0x200002c4
 800395c:	40001800 	.word	0x40001800
 8003960:	08004680 	.word	0x08004680

08003964 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08c      	sub	sp, #48	; 0x30
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_encoderHandle->Instance==TIM1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a50      	ldr	r2, [pc, #320]	; (8003ab4 <HAL_TIM_Encoder_MspInit+0x150>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d11f      	bne.n	80039b6 <HAL_TIM_Encoder_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	61bb      	str	r3, [r7, #24]
 800397a:	4a4f      	ldr	r2, [pc, #316]	; (8003ab8 <HAL_TIM_Encoder_MspInit+0x154>)
 800397c:	4b4e      	ldr	r3, [pc, #312]	; (8003ab8 <HAL_TIM_Encoder_MspInit+0x154>)
 800397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6453      	str	r3, [r2, #68]	; 0x44
 8003986:	4b4c      	ldr	r3, [pc, #304]	; (8003ab8 <HAL_TIM_Encoder_MspInit+0x154>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	61bb      	str	r3, [r7, #24]
 8003990:	69bb      	ldr	r3, [r7, #24]
  
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = MTR4_A_Pin|MTR4_B_Pin;
 8003992:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003998:	2302      	movs	r3, #2
 800399a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399c:	2300      	movs	r3, #0
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039a0:	2300      	movs	r3, #0
 80039a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80039a4:	2301      	movs	r3, #1
 80039a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a8:	f107 031c 	add.w	r3, r7, #28
 80039ac:	4619      	mov	r1, r3
 80039ae:	4843      	ldr	r0, [pc, #268]	; (8003abc <HAL_TIM_Encoder_MspInit+0x158>)
 80039b0:	f7fc ffae 	bl	8000910 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80039b4:	e07a      	b.n	8003aac <HAL_TIM_Encoder_MspInit+0x148>
  else if(tim_encoderHandle->Instance==TIM3)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a41      	ldr	r2, [pc, #260]	; (8003ac0 <HAL_TIM_Encoder_MspInit+0x15c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d11e      	bne.n	80039fe <HAL_TIM_Encoder_MspInit+0x9a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039c0:	2300      	movs	r3, #0
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	4a3c      	ldr	r2, [pc, #240]	; (8003ab8 <HAL_TIM_Encoder_MspInit+0x154>)
 80039c6:	4b3c      	ldr	r3, [pc, #240]	; (8003ab8 <HAL_TIM_Encoder_MspInit+0x154>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f043 0302 	orr.w	r3, r3, #2
 80039ce:	6413      	str	r3, [r2, #64]	; 0x40
 80039d0:	4b39      	ldr	r3, [pc, #228]	; (8003ab8 <HAL_TIM_Encoder_MspInit+0x154>)
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MTR2_A_Pin|MTR2_B_Pin;
 80039dc:	23c0      	movs	r3, #192	; 0xc0
 80039de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e0:	2302      	movs	r3, #2
 80039e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e8:	2300      	movs	r3, #0
 80039ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80039ec:	2302      	movs	r3, #2
 80039ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f0:	f107 031c 	add.w	r3, r7, #28
 80039f4:	4619      	mov	r1, r3
 80039f6:	4831      	ldr	r0, [pc, #196]	; (8003abc <HAL_TIM_Encoder_MspInit+0x158>)
 80039f8:	f7fc ff8a 	bl	8000910 <HAL_GPIO_Init>
}
 80039fc:	e056      	b.n	8003aac <HAL_TIM_Encoder_MspInit+0x148>
  else if(tim_encoderHandle->Instance==TIM4)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a30      	ldr	r2, [pc, #192]	; (8003ac4 <HAL_TIM_Encoder_MspInit+0x160>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d11e      	bne.n	8003a46 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a08:	2300      	movs	r3, #0
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	4a2a      	ldr	r2, [pc, #168]	; (8003ab8 <HAL_TIM_Encoder_MspInit+0x154>)
 8003a0e:	4b2a      	ldr	r3, [pc, #168]	; (8003ab8 <HAL_TIM_Encoder_MspInit+0x154>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f043 0304 	orr.w	r3, r3, #4
 8003a16:	6413      	str	r3, [r2, #64]	; 0x40
 8003a18:	4b27      	ldr	r3, [pc, #156]	; (8003ab8 <HAL_TIM_Encoder_MspInit+0x154>)
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MTR1_B_Pin|MTR1_A_Pin;
 8003a24:	23c0      	movs	r3, #192	; 0xc0
 8003a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a30:	2300      	movs	r3, #0
 8003a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a34:	2302      	movs	r3, #2
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a38:	f107 031c 	add.w	r3, r7, #28
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4822      	ldr	r0, [pc, #136]	; (8003ac8 <HAL_TIM_Encoder_MspInit+0x164>)
 8003a40:	f7fc ff66 	bl	8000910 <HAL_GPIO_Init>
}
 8003a44:	e032      	b.n	8003aac <HAL_TIM_Encoder_MspInit+0x148>
  else if(tim_encoderHandle->Instance==TIM8)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a20      	ldr	r2, [pc, #128]	; (8003acc <HAL_TIM_Encoder_MspInit+0x168>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d12d      	bne.n	8003aac <HAL_TIM_Encoder_MspInit+0x148>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	4a18      	ldr	r2, [pc, #96]	; (8003ab8 <HAL_TIM_Encoder_MspInit+0x154>)
 8003a56:	4b18      	ldr	r3, [pc, #96]	; (8003ab8 <HAL_TIM_Encoder_MspInit+0x154>)
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	f043 0302 	orr.w	r3, r3, #2
 8003a5e:	6453      	str	r3, [r2, #68]	; 0x44
 8003a60:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <HAL_TIM_Encoder_MspInit+0x154>)
 8003a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MTR3_A_Pin|MTR3_B_Pin;
 8003a6c:	23c0      	movs	r3, #192	; 0xc0
 8003a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a70:	2302      	movs	r3, #2
 8003a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a80:	f107 031c 	add.w	r3, r7, #28
 8003a84:	4619      	mov	r1, r3
 8003a86:	4812      	ldr	r0, [pc, #72]	; (8003ad0 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003a88:	f7fc ff42 	bl	8000910 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2100      	movs	r1, #0
 8003a90:	202c      	movs	r0, #44	; 0x2c
 8003a92:	f7fc fee4 	bl	800085e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003a96:	202c      	movs	r0, #44	; 0x2c
 8003a98:	f7fc fefd 	bl	8000896 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	202d      	movs	r0, #45	; 0x2d
 8003aa2:	f7fc fedc 	bl	800085e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003aa6:	202d      	movs	r0, #45	; 0x2d
 8003aa8:	f7fc fef5 	bl	8000896 <HAL_NVIC_EnableIRQ>
}
 8003aac:	bf00      	nop
 8003aae:	3730      	adds	r7, #48	; 0x30
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40010000 	.word	0x40010000
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	40020000 	.word	0x40020000
 8003ac0:	40000400 	.word	0x40000400
 8003ac4:	40000800 	.word	0x40000800
 8003ac8:	40020400 	.word	0x40020400
 8003acc:	40010400 	.word	0x40010400
 8003ad0:	40020800 	.word	0x40020800

08003ad4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae4:	d10e      	bne.n	8003b04 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]
 8003aea:	4a1d      	ldr	r2, [pc, #116]	; (8003b60 <HAL_TIM_PWM_MspInit+0x8c>)
 8003aec:	4b1c      	ldr	r3, [pc, #112]	; (8003b60 <HAL_TIM_PWM_MspInit+0x8c>)
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	6413      	str	r3, [r2, #64]	; 0x40
 8003af6:	4b1a      	ldr	r3, [pc, #104]	; (8003b60 <HAL_TIM_PWM_MspInit+0x8c>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8003b02:	e026      	b.n	8003b52 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM5)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a16      	ldr	r2, [pc, #88]	; (8003b64 <HAL_TIM_PWM_MspInit+0x90>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d10e      	bne.n	8003b2c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	4a13      	ldr	r2, [pc, #76]	; (8003b60 <HAL_TIM_PWM_MspInit+0x8c>)
 8003b14:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <HAL_TIM_PWM_MspInit+0x8c>)
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	f043 0308 	orr.w	r3, r3, #8
 8003b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <HAL_TIM_PWM_MspInit+0x8c>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	693b      	ldr	r3, [r7, #16]
}
 8003b2a:	e012      	b.n	8003b52 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM12)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a0d      	ldr	r2, [pc, #52]	; (8003b68 <HAL_TIM_PWM_MspInit+0x94>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d10d      	bne.n	8003b52 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	4a09      	ldr	r2, [pc, #36]	; (8003b60 <HAL_TIM_PWM_MspInit+0x8c>)
 8003b3c:	4b08      	ldr	r3, [pc, #32]	; (8003b60 <HAL_TIM_PWM_MspInit+0x8c>)
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b44:	6413      	str	r3, [r2, #64]	; 0x40
 8003b46:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <HAL_TIM_PWM_MspInit+0x8c>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	68fb      	ldr	r3, [r7, #12]
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40023800 	.word	0x40023800
 8003b64:	40000c00 	.word	0x40000c00
 8003b68:	40001800 	.word	0x40001800

08003b6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a0b      	ldr	r2, [pc, #44]	; (8003ba8 <HAL_TIM_Base_MspInit+0x3c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d10d      	bne.n	8003b9a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	4a0a      	ldr	r2, [pc, #40]	; (8003bac <HAL_TIM_Base_MspInit+0x40>)
 8003b84:	4b09      	ldr	r3, [pc, #36]	; (8003bac <HAL_TIM_Base_MspInit+0x40>)
 8003b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b8e:	4b07      	ldr	r3, [pc, #28]	; (8003bac <HAL_TIM_Base_MspInit+0x40>)
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8003b9a:	bf00      	nop
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40014400 	.word	0x40014400
 8003bac:	40023800 	.word	0x40023800

08003bb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM2)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc0:	d110      	bne.n	8003be4 <HAL_TIM_MspPostInit+0x34>

  /* USER CODE END TIM2_MspPostInit 0 */
    /**TIM2 GPIO Configuration    
    PB2     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = MTR3_PWM_Pin;
 8003bc2:	2304      	movs	r3, #4
 8003bc4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MTR3_PWM_GPIO_Port, &GPIO_InitStruct);
 8003bd6:	f107 030c 	add.w	r3, r7, #12
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4825      	ldr	r0, [pc, #148]	; (8003c74 <HAL_TIM_MspPostInit+0xc4>)
 8003bde:	f7fc fe97 	bl	8000910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003be2:	e042      	b.n	8003c6a <HAL_TIM_MspPostInit+0xba>
  else if(timHandle->Instance==TIM5)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a23      	ldr	r2, [pc, #140]	; (8003c78 <HAL_TIM_MspPostInit+0xc8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d110      	bne.n	8003c10 <HAL_TIM_MspPostInit+0x60>
    GPIO_InitStruct.Pin = MTR2_PWM_Pin;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MTR2_PWM_GPIO_Port, &GPIO_InitStruct);
 8003c02:	f107 030c 	add.w	r3, r7, #12
 8003c06:	4619      	mov	r1, r3
 8003c08:	481c      	ldr	r0, [pc, #112]	; (8003c7c <HAL_TIM_MspPostInit+0xcc>)
 8003c0a:	f7fc fe81 	bl	8000910 <HAL_GPIO_Init>
}
 8003c0e:	e02c      	b.n	8003c6a <HAL_TIM_MspPostInit+0xba>
  else if(timHandle->Instance==TIM10)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a1a      	ldr	r2, [pc, #104]	; (8003c80 <HAL_TIM_MspPostInit+0xd0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d111      	bne.n	8003c3e <HAL_TIM_MspPostInit+0x8e>
    GPIO_InitStruct.Pin = MTR1_PWM_Pin;
 8003c1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c20:	2302      	movs	r3, #2
 8003c22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MTR1_PWM_GPIO_Port, &GPIO_InitStruct);
 8003c30:	f107 030c 	add.w	r3, r7, #12
 8003c34:	4619      	mov	r1, r3
 8003c36:	480f      	ldr	r0, [pc, #60]	; (8003c74 <HAL_TIM_MspPostInit+0xc4>)
 8003c38:	f7fc fe6a 	bl	8000910 <HAL_GPIO_Init>
}
 8003c3c:	e015      	b.n	8003c6a <HAL_TIM_MspPostInit+0xba>
  else if(timHandle->Instance==TIM12)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a10      	ldr	r2, [pc, #64]	; (8003c84 <HAL_TIM_MspPostInit+0xd4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d110      	bne.n	8003c6a <HAL_TIM_MspPostInit+0xba>
    GPIO_InitStruct.Pin = MTR4_PWM_Pin;
 8003c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c4e:	2302      	movs	r3, #2
 8003c50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003c5a:	2309      	movs	r3, #9
 8003c5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MTR4_PWM_GPIO_Port, &GPIO_InitStruct);
 8003c5e:	f107 030c 	add.w	r3, r7, #12
 8003c62:	4619      	mov	r1, r3
 8003c64:	4803      	ldr	r0, [pc, #12]	; (8003c74 <HAL_TIM_MspPostInit+0xc4>)
 8003c66:	f7fc fe53 	bl	8000910 <HAL_GPIO_Init>
}
 8003c6a:	bf00      	nop
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40020400 	.word	0x40020400
 8003c78:	40000c00 	.word	0x40000c00
 8003c7c:	40020000 	.word	0x40020000
 8003c80:	40014400 	.word	0x40014400
 8003c84:	40001800 	.word	0x40001800

08003c88 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003c8c:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <MX_USART2_UART_Init+0x50>)
 8003c8e:	4a13      	ldr	r2, [pc, #76]	; (8003cdc <MX_USART2_UART_Init+0x54>)
 8003c90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003c92:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <MX_USART2_UART_Init+0x50>)
 8003c94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c9a:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <MX_USART2_UART_Init+0x50>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ca0:	4b0d      	ldr	r3, [pc, #52]	; (8003cd8 <MX_USART2_UART_Init+0x50>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <MX_USART2_UART_Init+0x50>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003cac:	4b0a      	ldr	r3, [pc, #40]	; (8003cd8 <MX_USART2_UART_Init+0x50>)
 8003cae:	220c      	movs	r2, #12
 8003cb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <MX_USART2_UART_Init+0x50>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cb8:	4b07      	ldr	r3, [pc, #28]	; (8003cd8 <MX_USART2_UART_Init+0x50>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003cbe:	4806      	ldr	r0, [pc, #24]	; (8003cd8 <MX_USART2_UART_Init+0x50>)
 8003cc0:	f7fe fbf1 	bl	80024a6 <HAL_UART_Init>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <MX_USART2_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003cca:	2142      	movs	r1, #66	; 0x42
 8003ccc:	4804      	ldr	r0, [pc, #16]	; (8003ce0 <MX_USART2_UART_Init+0x58>)
 8003cce:	f7ff fb57 	bl	8003380 <_Error_Handler>
  }

}
 8003cd2:	bf00      	nop
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000300 	.word	0x20000300
 8003cdc:	40004400 	.word	0x40004400
 8003ce0:	08004690 	.word	0x08004690

08003ce4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a12      	ldr	r2, [pc, #72]	; (8003d3c <HAL_UART_MspInit+0x58>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d11d      	bne.n	8003d32 <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	4a11      	ldr	r2, [pc, #68]	; (8003d40 <HAL_UART_MspInit+0x5c>)
 8003cfc:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <HAL_UART_MspInit+0x5c>)
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d04:	6413      	str	r3, [r2, #64]	; 0x40
 8003d06:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <HAL_UART_MspInit+0x5c>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0e:	60bb      	str	r3, [r7, #8]
 8003d10:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003d12:	230c      	movs	r3, #12
 8003d14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d16:	2302      	movs	r3, #2
 8003d18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d22:	2307      	movs	r3, #7
 8003d24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d26:	f107 030c 	add.w	r3, r7, #12
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4805      	ldr	r0, [pc, #20]	; (8003d44 <HAL_UART_MspInit+0x60>)
 8003d2e:	f7fc fdef 	bl	8000910 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003d32:	bf00      	nop
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40004400 	.word	0x40004400
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40020000 	.word	0x40020000

08003d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003d48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d4e:	e003      	b.n	8003d58 <LoopCopyDataInit>

08003d50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d56:	3104      	adds	r1, #4

08003d58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d58:	480b      	ldr	r0, [pc, #44]	; (8003d88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d60:	d3f6      	bcc.n	8003d50 <CopyDataInit>
  ldr  r2, =_sbss
 8003d62:	4a0b      	ldr	r2, [pc, #44]	; (8003d90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d64:	e002      	b.n	8003d6c <LoopFillZerobss>

08003d66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d68:	f842 3b04 	str.w	r3, [r2], #4

08003d6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d6c:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d70:	d3f9      	bcc.n	8003d66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d72:	f7ff fb59 	bl	8003428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d76:	f000 f811 	bl	8003d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d7a:	f7ff fa69 	bl	8003250 <main>
  bx  lr    
 8003d7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d80:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003d84:	080046fc 	.word	0x080046fc
  ldr  r0, =_sdata
 8003d88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d8c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003d90:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003d94:	20000344 	.word	0x20000344

08003d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d98:	e7fe      	b.n	8003d98 <ADC_IRQHandler>
	...

08003d9c <__libc_init_array>:
 8003d9c:	b570      	push	{r4, r5, r6, lr}
 8003d9e:	4e0d      	ldr	r6, [pc, #52]	; (8003dd4 <__libc_init_array+0x38>)
 8003da0:	4c0d      	ldr	r4, [pc, #52]	; (8003dd8 <__libc_init_array+0x3c>)
 8003da2:	1ba4      	subs	r4, r4, r6
 8003da4:	10a4      	asrs	r4, r4, #2
 8003da6:	2500      	movs	r5, #0
 8003da8:	42a5      	cmp	r5, r4
 8003daa:	d109      	bne.n	8003dc0 <__libc_init_array+0x24>
 8003dac:	4e0b      	ldr	r6, [pc, #44]	; (8003ddc <__libc_init_array+0x40>)
 8003dae:	4c0c      	ldr	r4, [pc, #48]	; (8003de0 <__libc_init_array+0x44>)
 8003db0:	f000 fc4c 	bl	800464c <_init>
 8003db4:	1ba4      	subs	r4, r4, r6
 8003db6:	10a4      	asrs	r4, r4, #2
 8003db8:	2500      	movs	r5, #0
 8003dba:	42a5      	cmp	r5, r4
 8003dbc:	d105      	bne.n	8003dca <__libc_init_array+0x2e>
 8003dbe:	bd70      	pop	{r4, r5, r6, pc}
 8003dc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003dc4:	4798      	blx	r3
 8003dc6:	3501      	adds	r5, #1
 8003dc8:	e7ee      	b.n	8003da8 <__libc_init_array+0xc>
 8003dca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003dce:	4798      	blx	r3
 8003dd0:	3501      	adds	r5, #1
 8003dd2:	e7f2      	b.n	8003dba <__libc_init_array+0x1e>
 8003dd4:	080046f4 	.word	0x080046f4
 8003dd8:	080046f4 	.word	0x080046f4
 8003ddc:	080046f4 	.word	0x080046f4
 8003de0:	080046f8 	.word	0x080046f8

08003de4 <memset>:
 8003de4:	4402      	add	r2, r0
 8003de6:	4603      	mov	r3, r0
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d100      	bne.n	8003dee <memset+0xa>
 8003dec:	4770      	bx	lr
 8003dee:	f803 1b01 	strb.w	r1, [r3], #1
 8003df2:	e7f9      	b.n	8003de8 <memset+0x4>

08003df4 <siprintf>:
 8003df4:	b40e      	push	{r1, r2, r3}
 8003df6:	b500      	push	{lr}
 8003df8:	b09c      	sub	sp, #112	; 0x70
 8003dfa:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003dfe:	ab1d      	add	r3, sp, #116	; 0x74
 8003e00:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003e04:	9002      	str	r0, [sp, #8]
 8003e06:	9006      	str	r0, [sp, #24]
 8003e08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e0c:	480a      	ldr	r0, [pc, #40]	; (8003e38 <siprintf+0x44>)
 8003e0e:	9104      	str	r1, [sp, #16]
 8003e10:	9107      	str	r1, [sp, #28]
 8003e12:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e16:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e1a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003e1e:	6800      	ldr	r0, [r0, #0]
 8003e20:	9301      	str	r3, [sp, #4]
 8003e22:	a902      	add	r1, sp, #8
 8003e24:	f000 f866 	bl	8003ef4 <_svfiprintf_r>
 8003e28:	9b02      	ldr	r3, [sp, #8]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	701a      	strb	r2, [r3, #0]
 8003e2e:	b01c      	add	sp, #112	; 0x70
 8003e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e34:	b003      	add	sp, #12
 8003e36:	4770      	bx	lr
 8003e38:	2000000c 	.word	0x2000000c

08003e3c <__ssputs_r>:
 8003e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e40:	688e      	ldr	r6, [r1, #8]
 8003e42:	429e      	cmp	r6, r3
 8003e44:	4682      	mov	sl, r0
 8003e46:	460c      	mov	r4, r1
 8003e48:	4691      	mov	r9, r2
 8003e4a:	4698      	mov	r8, r3
 8003e4c:	d835      	bhi.n	8003eba <__ssputs_r+0x7e>
 8003e4e:	898a      	ldrh	r2, [r1, #12]
 8003e50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e54:	d031      	beq.n	8003eba <__ssputs_r+0x7e>
 8003e56:	6825      	ldr	r5, [r4, #0]
 8003e58:	6909      	ldr	r1, [r1, #16]
 8003e5a:	1a6f      	subs	r7, r5, r1
 8003e5c:	6965      	ldr	r5, [r4, #20]
 8003e5e:	2302      	movs	r3, #2
 8003e60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e64:	fb95 f5f3 	sdiv	r5, r5, r3
 8003e68:	f108 0301 	add.w	r3, r8, #1
 8003e6c:	443b      	add	r3, r7
 8003e6e:	429d      	cmp	r5, r3
 8003e70:	bf38      	it	cc
 8003e72:	461d      	movcc	r5, r3
 8003e74:	0553      	lsls	r3, r2, #21
 8003e76:	d531      	bpl.n	8003edc <__ssputs_r+0xa0>
 8003e78:	4629      	mov	r1, r5
 8003e7a:	f000 fb39 	bl	80044f0 <_malloc_r>
 8003e7e:	4606      	mov	r6, r0
 8003e80:	b950      	cbnz	r0, 8003e98 <__ssputs_r+0x5c>
 8003e82:	230c      	movs	r3, #12
 8003e84:	f8ca 3000 	str.w	r3, [sl]
 8003e88:	89a3      	ldrh	r3, [r4, #12]
 8003e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e8e:	81a3      	strh	r3, [r4, #12]
 8003e90:	f04f 30ff 	mov.w	r0, #4294967295
 8003e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e98:	463a      	mov	r2, r7
 8003e9a:	6921      	ldr	r1, [r4, #16]
 8003e9c:	f000 fab4 	bl	8004408 <memcpy>
 8003ea0:	89a3      	ldrh	r3, [r4, #12]
 8003ea2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eaa:	81a3      	strh	r3, [r4, #12]
 8003eac:	6126      	str	r6, [r4, #16]
 8003eae:	6165      	str	r5, [r4, #20]
 8003eb0:	443e      	add	r6, r7
 8003eb2:	1bed      	subs	r5, r5, r7
 8003eb4:	6026      	str	r6, [r4, #0]
 8003eb6:	60a5      	str	r5, [r4, #8]
 8003eb8:	4646      	mov	r6, r8
 8003eba:	4546      	cmp	r6, r8
 8003ebc:	bf28      	it	cs
 8003ebe:	4646      	movcs	r6, r8
 8003ec0:	4632      	mov	r2, r6
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	6820      	ldr	r0, [r4, #0]
 8003ec6:	f000 faaa 	bl	800441e <memmove>
 8003eca:	68a3      	ldr	r3, [r4, #8]
 8003ecc:	1b9b      	subs	r3, r3, r6
 8003ece:	60a3      	str	r3, [r4, #8]
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	441e      	add	r6, r3
 8003ed4:	6026      	str	r6, [r4, #0]
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003edc:	462a      	mov	r2, r5
 8003ede:	f000 fb65 	bl	80045ac <_realloc_r>
 8003ee2:	4606      	mov	r6, r0
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d1e1      	bne.n	8003eac <__ssputs_r+0x70>
 8003ee8:	6921      	ldr	r1, [r4, #16]
 8003eea:	4650      	mov	r0, sl
 8003eec:	f000 fab2 	bl	8004454 <_free_r>
 8003ef0:	e7c7      	b.n	8003e82 <__ssputs_r+0x46>
	...

08003ef4 <_svfiprintf_r>:
 8003ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef8:	b09d      	sub	sp, #116	; 0x74
 8003efa:	4680      	mov	r8, r0
 8003efc:	9303      	str	r3, [sp, #12]
 8003efe:	898b      	ldrh	r3, [r1, #12]
 8003f00:	061c      	lsls	r4, r3, #24
 8003f02:	460d      	mov	r5, r1
 8003f04:	4616      	mov	r6, r2
 8003f06:	d50f      	bpl.n	8003f28 <_svfiprintf_r+0x34>
 8003f08:	690b      	ldr	r3, [r1, #16]
 8003f0a:	b96b      	cbnz	r3, 8003f28 <_svfiprintf_r+0x34>
 8003f0c:	2140      	movs	r1, #64	; 0x40
 8003f0e:	f000 faef 	bl	80044f0 <_malloc_r>
 8003f12:	6028      	str	r0, [r5, #0]
 8003f14:	6128      	str	r0, [r5, #16]
 8003f16:	b928      	cbnz	r0, 8003f24 <_svfiprintf_r+0x30>
 8003f18:	230c      	movs	r3, #12
 8003f1a:	f8c8 3000 	str.w	r3, [r8]
 8003f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f22:	e0c5      	b.n	80040b0 <_svfiprintf_r+0x1bc>
 8003f24:	2340      	movs	r3, #64	; 0x40
 8003f26:	616b      	str	r3, [r5, #20]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f2c:	2320      	movs	r3, #32
 8003f2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f32:	2330      	movs	r3, #48	; 0x30
 8003f34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f38:	f04f 0b01 	mov.w	fp, #1
 8003f3c:	4637      	mov	r7, r6
 8003f3e:	463c      	mov	r4, r7
 8003f40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d13c      	bne.n	8003fc2 <_svfiprintf_r+0xce>
 8003f48:	ebb7 0a06 	subs.w	sl, r7, r6
 8003f4c:	d00b      	beq.n	8003f66 <_svfiprintf_r+0x72>
 8003f4e:	4653      	mov	r3, sl
 8003f50:	4632      	mov	r2, r6
 8003f52:	4629      	mov	r1, r5
 8003f54:	4640      	mov	r0, r8
 8003f56:	f7ff ff71 	bl	8003e3c <__ssputs_r>
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	f000 80a3 	beq.w	80040a6 <_svfiprintf_r+0x1b2>
 8003f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f62:	4453      	add	r3, sl
 8003f64:	9309      	str	r3, [sp, #36]	; 0x24
 8003f66:	783b      	ldrb	r3, [r7, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 809c 	beq.w	80040a6 <_svfiprintf_r+0x1b2>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f04f 32ff 	mov.w	r2, #4294967295
 8003f74:	9304      	str	r3, [sp, #16]
 8003f76:	9307      	str	r3, [sp, #28]
 8003f78:	9205      	str	r2, [sp, #20]
 8003f7a:	9306      	str	r3, [sp, #24]
 8003f7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f80:	931a      	str	r3, [sp, #104]	; 0x68
 8003f82:	2205      	movs	r2, #5
 8003f84:	7821      	ldrb	r1, [r4, #0]
 8003f86:	4850      	ldr	r0, [pc, #320]	; (80040c8 <_svfiprintf_r+0x1d4>)
 8003f88:	f7fc f94a 	bl	8000220 <memchr>
 8003f8c:	1c67      	adds	r7, r4, #1
 8003f8e:	9b04      	ldr	r3, [sp, #16]
 8003f90:	b9d8      	cbnz	r0, 8003fca <_svfiprintf_r+0xd6>
 8003f92:	06d9      	lsls	r1, r3, #27
 8003f94:	bf44      	itt	mi
 8003f96:	2220      	movmi	r2, #32
 8003f98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f9c:	071a      	lsls	r2, r3, #28
 8003f9e:	bf44      	itt	mi
 8003fa0:	222b      	movmi	r2, #43	; 0x2b
 8003fa2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003fa6:	7822      	ldrb	r2, [r4, #0]
 8003fa8:	2a2a      	cmp	r2, #42	; 0x2a
 8003faa:	d016      	beq.n	8003fda <_svfiprintf_r+0xe6>
 8003fac:	9a07      	ldr	r2, [sp, #28]
 8003fae:	2100      	movs	r1, #0
 8003fb0:	200a      	movs	r0, #10
 8003fb2:	4627      	mov	r7, r4
 8003fb4:	3401      	adds	r4, #1
 8003fb6:	783b      	ldrb	r3, [r7, #0]
 8003fb8:	3b30      	subs	r3, #48	; 0x30
 8003fba:	2b09      	cmp	r3, #9
 8003fbc:	d951      	bls.n	8004062 <_svfiprintf_r+0x16e>
 8003fbe:	b1c9      	cbz	r1, 8003ff4 <_svfiprintf_r+0x100>
 8003fc0:	e011      	b.n	8003fe6 <_svfiprintf_r+0xf2>
 8003fc2:	2b25      	cmp	r3, #37	; 0x25
 8003fc4:	d0c0      	beq.n	8003f48 <_svfiprintf_r+0x54>
 8003fc6:	4627      	mov	r7, r4
 8003fc8:	e7b9      	b.n	8003f3e <_svfiprintf_r+0x4a>
 8003fca:	4a3f      	ldr	r2, [pc, #252]	; (80040c8 <_svfiprintf_r+0x1d4>)
 8003fcc:	1a80      	subs	r0, r0, r2
 8003fce:	fa0b f000 	lsl.w	r0, fp, r0
 8003fd2:	4318      	orrs	r0, r3
 8003fd4:	9004      	str	r0, [sp, #16]
 8003fd6:	463c      	mov	r4, r7
 8003fd8:	e7d3      	b.n	8003f82 <_svfiprintf_r+0x8e>
 8003fda:	9a03      	ldr	r2, [sp, #12]
 8003fdc:	1d11      	adds	r1, r2, #4
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	9103      	str	r1, [sp, #12]
 8003fe2:	2a00      	cmp	r2, #0
 8003fe4:	db01      	blt.n	8003fea <_svfiprintf_r+0xf6>
 8003fe6:	9207      	str	r2, [sp, #28]
 8003fe8:	e004      	b.n	8003ff4 <_svfiprintf_r+0x100>
 8003fea:	4252      	negs	r2, r2
 8003fec:	f043 0302 	orr.w	r3, r3, #2
 8003ff0:	9207      	str	r2, [sp, #28]
 8003ff2:	9304      	str	r3, [sp, #16]
 8003ff4:	783b      	ldrb	r3, [r7, #0]
 8003ff6:	2b2e      	cmp	r3, #46	; 0x2e
 8003ff8:	d10e      	bne.n	8004018 <_svfiprintf_r+0x124>
 8003ffa:	787b      	ldrb	r3, [r7, #1]
 8003ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8003ffe:	f107 0101 	add.w	r1, r7, #1
 8004002:	d132      	bne.n	800406a <_svfiprintf_r+0x176>
 8004004:	9b03      	ldr	r3, [sp, #12]
 8004006:	1d1a      	adds	r2, r3, #4
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	9203      	str	r2, [sp, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	bfb8      	it	lt
 8004010:	f04f 33ff 	movlt.w	r3, #4294967295
 8004014:	3702      	adds	r7, #2
 8004016:	9305      	str	r3, [sp, #20]
 8004018:	4c2c      	ldr	r4, [pc, #176]	; (80040cc <_svfiprintf_r+0x1d8>)
 800401a:	7839      	ldrb	r1, [r7, #0]
 800401c:	2203      	movs	r2, #3
 800401e:	4620      	mov	r0, r4
 8004020:	f7fc f8fe 	bl	8000220 <memchr>
 8004024:	b138      	cbz	r0, 8004036 <_svfiprintf_r+0x142>
 8004026:	2340      	movs	r3, #64	; 0x40
 8004028:	1b00      	subs	r0, r0, r4
 800402a:	fa03 f000 	lsl.w	r0, r3, r0
 800402e:	9b04      	ldr	r3, [sp, #16]
 8004030:	4303      	orrs	r3, r0
 8004032:	9304      	str	r3, [sp, #16]
 8004034:	3701      	adds	r7, #1
 8004036:	7839      	ldrb	r1, [r7, #0]
 8004038:	4825      	ldr	r0, [pc, #148]	; (80040d0 <_svfiprintf_r+0x1dc>)
 800403a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800403e:	2206      	movs	r2, #6
 8004040:	1c7e      	adds	r6, r7, #1
 8004042:	f7fc f8ed 	bl	8000220 <memchr>
 8004046:	2800      	cmp	r0, #0
 8004048:	d035      	beq.n	80040b6 <_svfiprintf_r+0x1c2>
 800404a:	4b22      	ldr	r3, [pc, #136]	; (80040d4 <_svfiprintf_r+0x1e0>)
 800404c:	b9fb      	cbnz	r3, 800408e <_svfiprintf_r+0x19a>
 800404e:	9b03      	ldr	r3, [sp, #12]
 8004050:	3307      	adds	r3, #7
 8004052:	f023 0307 	bic.w	r3, r3, #7
 8004056:	3308      	adds	r3, #8
 8004058:	9303      	str	r3, [sp, #12]
 800405a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800405c:	444b      	add	r3, r9
 800405e:	9309      	str	r3, [sp, #36]	; 0x24
 8004060:	e76c      	b.n	8003f3c <_svfiprintf_r+0x48>
 8004062:	fb00 3202 	mla	r2, r0, r2, r3
 8004066:	2101      	movs	r1, #1
 8004068:	e7a3      	b.n	8003fb2 <_svfiprintf_r+0xbe>
 800406a:	2300      	movs	r3, #0
 800406c:	9305      	str	r3, [sp, #20]
 800406e:	4618      	mov	r0, r3
 8004070:	240a      	movs	r4, #10
 8004072:	460f      	mov	r7, r1
 8004074:	3101      	adds	r1, #1
 8004076:	783a      	ldrb	r2, [r7, #0]
 8004078:	3a30      	subs	r2, #48	; 0x30
 800407a:	2a09      	cmp	r2, #9
 800407c:	d903      	bls.n	8004086 <_svfiprintf_r+0x192>
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0ca      	beq.n	8004018 <_svfiprintf_r+0x124>
 8004082:	9005      	str	r0, [sp, #20]
 8004084:	e7c8      	b.n	8004018 <_svfiprintf_r+0x124>
 8004086:	fb04 2000 	mla	r0, r4, r0, r2
 800408a:	2301      	movs	r3, #1
 800408c:	e7f1      	b.n	8004072 <_svfiprintf_r+0x17e>
 800408e:	ab03      	add	r3, sp, #12
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	462a      	mov	r2, r5
 8004094:	4b10      	ldr	r3, [pc, #64]	; (80040d8 <_svfiprintf_r+0x1e4>)
 8004096:	a904      	add	r1, sp, #16
 8004098:	4640      	mov	r0, r8
 800409a:	f3af 8000 	nop.w
 800409e:	f1b0 3fff 	cmp.w	r0, #4294967295
 80040a2:	4681      	mov	r9, r0
 80040a4:	d1d9      	bne.n	800405a <_svfiprintf_r+0x166>
 80040a6:	89ab      	ldrh	r3, [r5, #12]
 80040a8:	065b      	lsls	r3, r3, #25
 80040aa:	f53f af38 	bmi.w	8003f1e <_svfiprintf_r+0x2a>
 80040ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040b0:	b01d      	add	sp, #116	; 0x74
 80040b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b6:	ab03      	add	r3, sp, #12
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	462a      	mov	r2, r5
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <_svfiprintf_r+0x1e4>)
 80040be:	a904      	add	r1, sp, #16
 80040c0:	4640      	mov	r0, r8
 80040c2:	f000 f881 	bl	80041c8 <_printf_i>
 80040c6:	e7ea      	b.n	800409e <_svfiprintf_r+0x1aa>
 80040c8:	080046b8 	.word	0x080046b8
 80040cc:	080046be 	.word	0x080046be
 80040d0:	080046c2 	.word	0x080046c2
 80040d4:	00000000 	.word	0x00000000
 80040d8:	08003e3d 	.word	0x08003e3d

080040dc <_printf_common>:
 80040dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040e0:	4691      	mov	r9, r2
 80040e2:	461f      	mov	r7, r3
 80040e4:	688a      	ldr	r2, [r1, #8]
 80040e6:	690b      	ldr	r3, [r1, #16]
 80040e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040ec:	4293      	cmp	r3, r2
 80040ee:	bfb8      	it	lt
 80040f0:	4613      	movlt	r3, r2
 80040f2:	f8c9 3000 	str.w	r3, [r9]
 80040f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040fa:	4606      	mov	r6, r0
 80040fc:	460c      	mov	r4, r1
 80040fe:	b112      	cbz	r2, 8004106 <_printf_common+0x2a>
 8004100:	3301      	adds	r3, #1
 8004102:	f8c9 3000 	str.w	r3, [r9]
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	0699      	lsls	r1, r3, #26
 800410a:	bf42      	ittt	mi
 800410c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004110:	3302      	addmi	r3, #2
 8004112:	f8c9 3000 	strmi.w	r3, [r9]
 8004116:	6825      	ldr	r5, [r4, #0]
 8004118:	f015 0506 	ands.w	r5, r5, #6
 800411c:	d107      	bne.n	800412e <_printf_common+0x52>
 800411e:	f104 0a19 	add.w	sl, r4, #25
 8004122:	68e3      	ldr	r3, [r4, #12]
 8004124:	f8d9 2000 	ldr.w	r2, [r9]
 8004128:	1a9b      	subs	r3, r3, r2
 800412a:	429d      	cmp	r5, r3
 800412c:	db29      	blt.n	8004182 <_printf_common+0xa6>
 800412e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004132:	6822      	ldr	r2, [r4, #0]
 8004134:	3300      	adds	r3, #0
 8004136:	bf18      	it	ne
 8004138:	2301      	movne	r3, #1
 800413a:	0692      	lsls	r2, r2, #26
 800413c:	d42e      	bmi.n	800419c <_printf_common+0xc0>
 800413e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004142:	4639      	mov	r1, r7
 8004144:	4630      	mov	r0, r6
 8004146:	47c0      	blx	r8
 8004148:	3001      	adds	r0, #1
 800414a:	d021      	beq.n	8004190 <_printf_common+0xb4>
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	68e5      	ldr	r5, [r4, #12]
 8004150:	f8d9 2000 	ldr.w	r2, [r9]
 8004154:	f003 0306 	and.w	r3, r3, #6
 8004158:	2b04      	cmp	r3, #4
 800415a:	bf08      	it	eq
 800415c:	1aad      	subeq	r5, r5, r2
 800415e:	68a3      	ldr	r3, [r4, #8]
 8004160:	6922      	ldr	r2, [r4, #16]
 8004162:	bf0c      	ite	eq
 8004164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004168:	2500      	movne	r5, #0
 800416a:	4293      	cmp	r3, r2
 800416c:	bfc4      	itt	gt
 800416e:	1a9b      	subgt	r3, r3, r2
 8004170:	18ed      	addgt	r5, r5, r3
 8004172:	f04f 0900 	mov.w	r9, #0
 8004176:	341a      	adds	r4, #26
 8004178:	454d      	cmp	r5, r9
 800417a:	d11b      	bne.n	80041b4 <_printf_common+0xd8>
 800417c:	2000      	movs	r0, #0
 800417e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004182:	2301      	movs	r3, #1
 8004184:	4652      	mov	r2, sl
 8004186:	4639      	mov	r1, r7
 8004188:	4630      	mov	r0, r6
 800418a:	47c0      	blx	r8
 800418c:	3001      	adds	r0, #1
 800418e:	d103      	bne.n	8004198 <_printf_common+0xbc>
 8004190:	f04f 30ff 	mov.w	r0, #4294967295
 8004194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004198:	3501      	adds	r5, #1
 800419a:	e7c2      	b.n	8004122 <_printf_common+0x46>
 800419c:	18e1      	adds	r1, r4, r3
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	2030      	movs	r0, #48	; 0x30
 80041a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041a6:	4422      	add	r2, r4
 80041a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041b0:	3302      	adds	r3, #2
 80041b2:	e7c4      	b.n	800413e <_printf_common+0x62>
 80041b4:	2301      	movs	r3, #1
 80041b6:	4622      	mov	r2, r4
 80041b8:	4639      	mov	r1, r7
 80041ba:	4630      	mov	r0, r6
 80041bc:	47c0      	blx	r8
 80041be:	3001      	adds	r0, #1
 80041c0:	d0e6      	beq.n	8004190 <_printf_common+0xb4>
 80041c2:	f109 0901 	add.w	r9, r9, #1
 80041c6:	e7d7      	b.n	8004178 <_printf_common+0x9c>

080041c8 <_printf_i>:
 80041c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041cc:	4617      	mov	r7, r2
 80041ce:	7e0a      	ldrb	r2, [r1, #24]
 80041d0:	b085      	sub	sp, #20
 80041d2:	2a6e      	cmp	r2, #110	; 0x6e
 80041d4:	4698      	mov	r8, r3
 80041d6:	4606      	mov	r6, r0
 80041d8:	460c      	mov	r4, r1
 80041da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041dc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80041e0:	f000 80bc 	beq.w	800435c <_printf_i+0x194>
 80041e4:	d81a      	bhi.n	800421c <_printf_i+0x54>
 80041e6:	2a63      	cmp	r2, #99	; 0x63
 80041e8:	d02e      	beq.n	8004248 <_printf_i+0x80>
 80041ea:	d80a      	bhi.n	8004202 <_printf_i+0x3a>
 80041ec:	2a00      	cmp	r2, #0
 80041ee:	f000 80c8 	beq.w	8004382 <_printf_i+0x1ba>
 80041f2:	2a58      	cmp	r2, #88	; 0x58
 80041f4:	f000 808a 	beq.w	800430c <_printf_i+0x144>
 80041f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041fc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004200:	e02a      	b.n	8004258 <_printf_i+0x90>
 8004202:	2a64      	cmp	r2, #100	; 0x64
 8004204:	d001      	beq.n	800420a <_printf_i+0x42>
 8004206:	2a69      	cmp	r2, #105	; 0x69
 8004208:	d1f6      	bne.n	80041f8 <_printf_i+0x30>
 800420a:	6821      	ldr	r1, [r4, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004212:	d023      	beq.n	800425c <_printf_i+0x94>
 8004214:	1d11      	adds	r1, r2, #4
 8004216:	6019      	str	r1, [r3, #0]
 8004218:	6813      	ldr	r3, [r2, #0]
 800421a:	e027      	b.n	800426c <_printf_i+0xa4>
 800421c:	2a73      	cmp	r2, #115	; 0x73
 800421e:	f000 80b4 	beq.w	800438a <_printf_i+0x1c2>
 8004222:	d808      	bhi.n	8004236 <_printf_i+0x6e>
 8004224:	2a6f      	cmp	r2, #111	; 0x6f
 8004226:	d02a      	beq.n	800427e <_printf_i+0xb6>
 8004228:	2a70      	cmp	r2, #112	; 0x70
 800422a:	d1e5      	bne.n	80041f8 <_printf_i+0x30>
 800422c:	680a      	ldr	r2, [r1, #0]
 800422e:	f042 0220 	orr.w	r2, r2, #32
 8004232:	600a      	str	r2, [r1, #0]
 8004234:	e003      	b.n	800423e <_printf_i+0x76>
 8004236:	2a75      	cmp	r2, #117	; 0x75
 8004238:	d021      	beq.n	800427e <_printf_i+0xb6>
 800423a:	2a78      	cmp	r2, #120	; 0x78
 800423c:	d1dc      	bne.n	80041f8 <_printf_i+0x30>
 800423e:	2278      	movs	r2, #120	; 0x78
 8004240:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004244:	496e      	ldr	r1, [pc, #440]	; (8004400 <_printf_i+0x238>)
 8004246:	e064      	b.n	8004312 <_printf_i+0x14a>
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800424e:	1d11      	adds	r1, r2, #4
 8004250:	6019      	str	r1, [r3, #0]
 8004252:	6813      	ldr	r3, [r2, #0]
 8004254:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004258:	2301      	movs	r3, #1
 800425a:	e0a3      	b.n	80043a4 <_printf_i+0x1dc>
 800425c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004260:	f102 0104 	add.w	r1, r2, #4
 8004264:	6019      	str	r1, [r3, #0]
 8004266:	d0d7      	beq.n	8004218 <_printf_i+0x50>
 8004268:	f9b2 3000 	ldrsh.w	r3, [r2]
 800426c:	2b00      	cmp	r3, #0
 800426e:	da03      	bge.n	8004278 <_printf_i+0xb0>
 8004270:	222d      	movs	r2, #45	; 0x2d
 8004272:	425b      	negs	r3, r3
 8004274:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004278:	4962      	ldr	r1, [pc, #392]	; (8004404 <_printf_i+0x23c>)
 800427a:	220a      	movs	r2, #10
 800427c:	e017      	b.n	80042ae <_printf_i+0xe6>
 800427e:	6820      	ldr	r0, [r4, #0]
 8004280:	6819      	ldr	r1, [r3, #0]
 8004282:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004286:	d003      	beq.n	8004290 <_printf_i+0xc8>
 8004288:	1d08      	adds	r0, r1, #4
 800428a:	6018      	str	r0, [r3, #0]
 800428c:	680b      	ldr	r3, [r1, #0]
 800428e:	e006      	b.n	800429e <_printf_i+0xd6>
 8004290:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004294:	f101 0004 	add.w	r0, r1, #4
 8004298:	6018      	str	r0, [r3, #0]
 800429a:	d0f7      	beq.n	800428c <_printf_i+0xc4>
 800429c:	880b      	ldrh	r3, [r1, #0]
 800429e:	4959      	ldr	r1, [pc, #356]	; (8004404 <_printf_i+0x23c>)
 80042a0:	2a6f      	cmp	r2, #111	; 0x6f
 80042a2:	bf14      	ite	ne
 80042a4:	220a      	movne	r2, #10
 80042a6:	2208      	moveq	r2, #8
 80042a8:	2000      	movs	r0, #0
 80042aa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80042ae:	6865      	ldr	r5, [r4, #4]
 80042b0:	60a5      	str	r5, [r4, #8]
 80042b2:	2d00      	cmp	r5, #0
 80042b4:	f2c0 809c 	blt.w	80043f0 <_printf_i+0x228>
 80042b8:	6820      	ldr	r0, [r4, #0]
 80042ba:	f020 0004 	bic.w	r0, r0, #4
 80042be:	6020      	str	r0, [r4, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d13f      	bne.n	8004344 <_printf_i+0x17c>
 80042c4:	2d00      	cmp	r5, #0
 80042c6:	f040 8095 	bne.w	80043f4 <_printf_i+0x22c>
 80042ca:	4675      	mov	r5, lr
 80042cc:	2a08      	cmp	r2, #8
 80042ce:	d10b      	bne.n	80042e8 <_printf_i+0x120>
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	07da      	lsls	r2, r3, #31
 80042d4:	d508      	bpl.n	80042e8 <_printf_i+0x120>
 80042d6:	6923      	ldr	r3, [r4, #16]
 80042d8:	6862      	ldr	r2, [r4, #4]
 80042da:	429a      	cmp	r2, r3
 80042dc:	bfde      	ittt	le
 80042de:	2330      	movle	r3, #48	; 0x30
 80042e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042e8:	ebae 0305 	sub.w	r3, lr, r5
 80042ec:	6123      	str	r3, [r4, #16]
 80042ee:	f8cd 8000 	str.w	r8, [sp]
 80042f2:	463b      	mov	r3, r7
 80042f4:	aa03      	add	r2, sp, #12
 80042f6:	4621      	mov	r1, r4
 80042f8:	4630      	mov	r0, r6
 80042fa:	f7ff feef 	bl	80040dc <_printf_common>
 80042fe:	3001      	adds	r0, #1
 8004300:	d155      	bne.n	80043ae <_printf_i+0x1e6>
 8004302:	f04f 30ff 	mov.w	r0, #4294967295
 8004306:	b005      	add	sp, #20
 8004308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800430c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004310:	493c      	ldr	r1, [pc, #240]	; (8004404 <_printf_i+0x23c>)
 8004312:	6822      	ldr	r2, [r4, #0]
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	f012 0f80 	tst.w	r2, #128	; 0x80
 800431a:	f100 0504 	add.w	r5, r0, #4
 800431e:	601d      	str	r5, [r3, #0]
 8004320:	d001      	beq.n	8004326 <_printf_i+0x15e>
 8004322:	6803      	ldr	r3, [r0, #0]
 8004324:	e002      	b.n	800432c <_printf_i+0x164>
 8004326:	0655      	lsls	r5, r2, #25
 8004328:	d5fb      	bpl.n	8004322 <_printf_i+0x15a>
 800432a:	8803      	ldrh	r3, [r0, #0]
 800432c:	07d0      	lsls	r0, r2, #31
 800432e:	bf44      	itt	mi
 8004330:	f042 0220 	orrmi.w	r2, r2, #32
 8004334:	6022      	strmi	r2, [r4, #0]
 8004336:	b91b      	cbnz	r3, 8004340 <_printf_i+0x178>
 8004338:	6822      	ldr	r2, [r4, #0]
 800433a:	f022 0220 	bic.w	r2, r2, #32
 800433e:	6022      	str	r2, [r4, #0]
 8004340:	2210      	movs	r2, #16
 8004342:	e7b1      	b.n	80042a8 <_printf_i+0xe0>
 8004344:	4675      	mov	r5, lr
 8004346:	fbb3 f0f2 	udiv	r0, r3, r2
 800434a:	fb02 3310 	mls	r3, r2, r0, r3
 800434e:	5ccb      	ldrb	r3, [r1, r3]
 8004350:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004354:	4603      	mov	r3, r0
 8004356:	2800      	cmp	r0, #0
 8004358:	d1f5      	bne.n	8004346 <_printf_i+0x17e>
 800435a:	e7b7      	b.n	80042cc <_printf_i+0x104>
 800435c:	6808      	ldr	r0, [r1, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	6949      	ldr	r1, [r1, #20]
 8004362:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004366:	d004      	beq.n	8004372 <_printf_i+0x1aa>
 8004368:	1d10      	adds	r0, r2, #4
 800436a:	6018      	str	r0, [r3, #0]
 800436c:	6813      	ldr	r3, [r2, #0]
 800436e:	6019      	str	r1, [r3, #0]
 8004370:	e007      	b.n	8004382 <_printf_i+0x1ba>
 8004372:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004376:	f102 0004 	add.w	r0, r2, #4
 800437a:	6018      	str	r0, [r3, #0]
 800437c:	6813      	ldr	r3, [r2, #0]
 800437e:	d0f6      	beq.n	800436e <_printf_i+0x1a6>
 8004380:	8019      	strh	r1, [r3, #0]
 8004382:	2300      	movs	r3, #0
 8004384:	6123      	str	r3, [r4, #16]
 8004386:	4675      	mov	r5, lr
 8004388:	e7b1      	b.n	80042ee <_printf_i+0x126>
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	1d11      	adds	r1, r2, #4
 800438e:	6019      	str	r1, [r3, #0]
 8004390:	6815      	ldr	r5, [r2, #0]
 8004392:	6862      	ldr	r2, [r4, #4]
 8004394:	2100      	movs	r1, #0
 8004396:	4628      	mov	r0, r5
 8004398:	f7fb ff42 	bl	8000220 <memchr>
 800439c:	b108      	cbz	r0, 80043a2 <_printf_i+0x1da>
 800439e:	1b40      	subs	r0, r0, r5
 80043a0:	6060      	str	r0, [r4, #4]
 80043a2:	6863      	ldr	r3, [r4, #4]
 80043a4:	6123      	str	r3, [r4, #16]
 80043a6:	2300      	movs	r3, #0
 80043a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043ac:	e79f      	b.n	80042ee <_printf_i+0x126>
 80043ae:	6923      	ldr	r3, [r4, #16]
 80043b0:	462a      	mov	r2, r5
 80043b2:	4639      	mov	r1, r7
 80043b4:	4630      	mov	r0, r6
 80043b6:	47c0      	blx	r8
 80043b8:	3001      	adds	r0, #1
 80043ba:	d0a2      	beq.n	8004302 <_printf_i+0x13a>
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	079b      	lsls	r3, r3, #30
 80043c0:	d507      	bpl.n	80043d2 <_printf_i+0x20a>
 80043c2:	2500      	movs	r5, #0
 80043c4:	f104 0919 	add.w	r9, r4, #25
 80043c8:	68e3      	ldr	r3, [r4, #12]
 80043ca:	9a03      	ldr	r2, [sp, #12]
 80043cc:	1a9b      	subs	r3, r3, r2
 80043ce:	429d      	cmp	r5, r3
 80043d0:	db05      	blt.n	80043de <_printf_i+0x216>
 80043d2:	68e0      	ldr	r0, [r4, #12]
 80043d4:	9b03      	ldr	r3, [sp, #12]
 80043d6:	4298      	cmp	r0, r3
 80043d8:	bfb8      	it	lt
 80043da:	4618      	movlt	r0, r3
 80043dc:	e793      	b.n	8004306 <_printf_i+0x13e>
 80043de:	2301      	movs	r3, #1
 80043e0:	464a      	mov	r2, r9
 80043e2:	4639      	mov	r1, r7
 80043e4:	4630      	mov	r0, r6
 80043e6:	47c0      	blx	r8
 80043e8:	3001      	adds	r0, #1
 80043ea:	d08a      	beq.n	8004302 <_printf_i+0x13a>
 80043ec:	3501      	adds	r5, #1
 80043ee:	e7eb      	b.n	80043c8 <_printf_i+0x200>
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1a7      	bne.n	8004344 <_printf_i+0x17c>
 80043f4:	780b      	ldrb	r3, [r1, #0]
 80043f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043fe:	e765      	b.n	80042cc <_printf_i+0x104>
 8004400:	080046da 	.word	0x080046da
 8004404:	080046c9 	.word	0x080046c9

08004408 <memcpy>:
 8004408:	b510      	push	{r4, lr}
 800440a:	1e43      	subs	r3, r0, #1
 800440c:	440a      	add	r2, r1
 800440e:	4291      	cmp	r1, r2
 8004410:	d100      	bne.n	8004414 <memcpy+0xc>
 8004412:	bd10      	pop	{r4, pc}
 8004414:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800441c:	e7f7      	b.n	800440e <memcpy+0x6>

0800441e <memmove>:
 800441e:	4288      	cmp	r0, r1
 8004420:	b510      	push	{r4, lr}
 8004422:	eb01 0302 	add.w	r3, r1, r2
 8004426:	d803      	bhi.n	8004430 <memmove+0x12>
 8004428:	1e42      	subs	r2, r0, #1
 800442a:	4299      	cmp	r1, r3
 800442c:	d10c      	bne.n	8004448 <memmove+0x2a>
 800442e:	bd10      	pop	{r4, pc}
 8004430:	4298      	cmp	r0, r3
 8004432:	d2f9      	bcs.n	8004428 <memmove+0xa>
 8004434:	1881      	adds	r1, r0, r2
 8004436:	1ad2      	subs	r2, r2, r3
 8004438:	42d3      	cmn	r3, r2
 800443a:	d100      	bne.n	800443e <memmove+0x20>
 800443c:	bd10      	pop	{r4, pc}
 800443e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004442:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004446:	e7f7      	b.n	8004438 <memmove+0x1a>
 8004448:	f811 4b01 	ldrb.w	r4, [r1], #1
 800444c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004450:	e7eb      	b.n	800442a <memmove+0xc>
	...

08004454 <_free_r>:
 8004454:	b538      	push	{r3, r4, r5, lr}
 8004456:	4605      	mov	r5, r0
 8004458:	2900      	cmp	r1, #0
 800445a:	d045      	beq.n	80044e8 <_free_r+0x94>
 800445c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004460:	1f0c      	subs	r4, r1, #4
 8004462:	2b00      	cmp	r3, #0
 8004464:	bfb8      	it	lt
 8004466:	18e4      	addlt	r4, r4, r3
 8004468:	f000 f8d6 	bl	8004618 <__malloc_lock>
 800446c:	4a1f      	ldr	r2, [pc, #124]	; (80044ec <_free_r+0x98>)
 800446e:	6813      	ldr	r3, [r2, #0]
 8004470:	4610      	mov	r0, r2
 8004472:	b933      	cbnz	r3, 8004482 <_free_r+0x2e>
 8004474:	6063      	str	r3, [r4, #4]
 8004476:	6014      	str	r4, [r2, #0]
 8004478:	4628      	mov	r0, r5
 800447a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800447e:	f000 b8cc 	b.w	800461a <__malloc_unlock>
 8004482:	42a3      	cmp	r3, r4
 8004484:	d90c      	bls.n	80044a0 <_free_r+0x4c>
 8004486:	6821      	ldr	r1, [r4, #0]
 8004488:	1862      	adds	r2, r4, r1
 800448a:	4293      	cmp	r3, r2
 800448c:	bf04      	itt	eq
 800448e:	681a      	ldreq	r2, [r3, #0]
 8004490:	685b      	ldreq	r3, [r3, #4]
 8004492:	6063      	str	r3, [r4, #4]
 8004494:	bf04      	itt	eq
 8004496:	1852      	addeq	r2, r2, r1
 8004498:	6022      	streq	r2, [r4, #0]
 800449a:	6004      	str	r4, [r0, #0]
 800449c:	e7ec      	b.n	8004478 <_free_r+0x24>
 800449e:	4613      	mov	r3, r2
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	b10a      	cbz	r2, 80044a8 <_free_r+0x54>
 80044a4:	42a2      	cmp	r2, r4
 80044a6:	d9fa      	bls.n	800449e <_free_r+0x4a>
 80044a8:	6819      	ldr	r1, [r3, #0]
 80044aa:	1858      	adds	r0, r3, r1
 80044ac:	42a0      	cmp	r0, r4
 80044ae:	d10b      	bne.n	80044c8 <_free_r+0x74>
 80044b0:	6820      	ldr	r0, [r4, #0]
 80044b2:	4401      	add	r1, r0
 80044b4:	1858      	adds	r0, r3, r1
 80044b6:	4282      	cmp	r2, r0
 80044b8:	6019      	str	r1, [r3, #0]
 80044ba:	d1dd      	bne.n	8004478 <_free_r+0x24>
 80044bc:	6810      	ldr	r0, [r2, #0]
 80044be:	6852      	ldr	r2, [r2, #4]
 80044c0:	605a      	str	r2, [r3, #4]
 80044c2:	4401      	add	r1, r0
 80044c4:	6019      	str	r1, [r3, #0]
 80044c6:	e7d7      	b.n	8004478 <_free_r+0x24>
 80044c8:	d902      	bls.n	80044d0 <_free_r+0x7c>
 80044ca:	230c      	movs	r3, #12
 80044cc:	602b      	str	r3, [r5, #0]
 80044ce:	e7d3      	b.n	8004478 <_free_r+0x24>
 80044d0:	6820      	ldr	r0, [r4, #0]
 80044d2:	1821      	adds	r1, r4, r0
 80044d4:	428a      	cmp	r2, r1
 80044d6:	bf04      	itt	eq
 80044d8:	6811      	ldreq	r1, [r2, #0]
 80044da:	6852      	ldreq	r2, [r2, #4]
 80044dc:	6062      	str	r2, [r4, #4]
 80044de:	bf04      	itt	eq
 80044e0:	1809      	addeq	r1, r1, r0
 80044e2:	6021      	streq	r1, [r4, #0]
 80044e4:	605c      	str	r4, [r3, #4]
 80044e6:	e7c7      	b.n	8004478 <_free_r+0x24>
 80044e8:	bd38      	pop	{r3, r4, r5, pc}
 80044ea:	bf00      	nop
 80044ec:	20000110 	.word	0x20000110

080044f0 <_malloc_r>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	1ccd      	adds	r5, r1, #3
 80044f4:	f025 0503 	bic.w	r5, r5, #3
 80044f8:	3508      	adds	r5, #8
 80044fa:	2d0c      	cmp	r5, #12
 80044fc:	bf38      	it	cc
 80044fe:	250c      	movcc	r5, #12
 8004500:	2d00      	cmp	r5, #0
 8004502:	4606      	mov	r6, r0
 8004504:	db01      	blt.n	800450a <_malloc_r+0x1a>
 8004506:	42a9      	cmp	r1, r5
 8004508:	d903      	bls.n	8004512 <_malloc_r+0x22>
 800450a:	230c      	movs	r3, #12
 800450c:	6033      	str	r3, [r6, #0]
 800450e:	2000      	movs	r0, #0
 8004510:	bd70      	pop	{r4, r5, r6, pc}
 8004512:	f000 f881 	bl	8004618 <__malloc_lock>
 8004516:	4a23      	ldr	r2, [pc, #140]	; (80045a4 <_malloc_r+0xb4>)
 8004518:	6814      	ldr	r4, [r2, #0]
 800451a:	4621      	mov	r1, r4
 800451c:	b991      	cbnz	r1, 8004544 <_malloc_r+0x54>
 800451e:	4c22      	ldr	r4, [pc, #136]	; (80045a8 <_malloc_r+0xb8>)
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	b91b      	cbnz	r3, 800452c <_malloc_r+0x3c>
 8004524:	4630      	mov	r0, r6
 8004526:	f000 f867 	bl	80045f8 <_sbrk_r>
 800452a:	6020      	str	r0, [r4, #0]
 800452c:	4629      	mov	r1, r5
 800452e:	4630      	mov	r0, r6
 8004530:	f000 f862 	bl	80045f8 <_sbrk_r>
 8004534:	1c43      	adds	r3, r0, #1
 8004536:	d126      	bne.n	8004586 <_malloc_r+0x96>
 8004538:	230c      	movs	r3, #12
 800453a:	6033      	str	r3, [r6, #0]
 800453c:	4630      	mov	r0, r6
 800453e:	f000 f86c 	bl	800461a <__malloc_unlock>
 8004542:	e7e4      	b.n	800450e <_malloc_r+0x1e>
 8004544:	680b      	ldr	r3, [r1, #0]
 8004546:	1b5b      	subs	r3, r3, r5
 8004548:	d41a      	bmi.n	8004580 <_malloc_r+0x90>
 800454a:	2b0b      	cmp	r3, #11
 800454c:	d90f      	bls.n	800456e <_malloc_r+0x7e>
 800454e:	600b      	str	r3, [r1, #0]
 8004550:	50cd      	str	r5, [r1, r3]
 8004552:	18cc      	adds	r4, r1, r3
 8004554:	4630      	mov	r0, r6
 8004556:	f000 f860 	bl	800461a <__malloc_unlock>
 800455a:	f104 000b 	add.w	r0, r4, #11
 800455e:	1d23      	adds	r3, r4, #4
 8004560:	f020 0007 	bic.w	r0, r0, #7
 8004564:	1ac3      	subs	r3, r0, r3
 8004566:	d01b      	beq.n	80045a0 <_malloc_r+0xb0>
 8004568:	425a      	negs	r2, r3
 800456a:	50e2      	str	r2, [r4, r3]
 800456c:	bd70      	pop	{r4, r5, r6, pc}
 800456e:	428c      	cmp	r4, r1
 8004570:	bf0d      	iteet	eq
 8004572:	6863      	ldreq	r3, [r4, #4]
 8004574:	684b      	ldrne	r3, [r1, #4]
 8004576:	6063      	strne	r3, [r4, #4]
 8004578:	6013      	streq	r3, [r2, #0]
 800457a:	bf18      	it	ne
 800457c:	460c      	movne	r4, r1
 800457e:	e7e9      	b.n	8004554 <_malloc_r+0x64>
 8004580:	460c      	mov	r4, r1
 8004582:	6849      	ldr	r1, [r1, #4]
 8004584:	e7ca      	b.n	800451c <_malloc_r+0x2c>
 8004586:	1cc4      	adds	r4, r0, #3
 8004588:	f024 0403 	bic.w	r4, r4, #3
 800458c:	42a0      	cmp	r0, r4
 800458e:	d005      	beq.n	800459c <_malloc_r+0xac>
 8004590:	1a21      	subs	r1, r4, r0
 8004592:	4630      	mov	r0, r6
 8004594:	f000 f830 	bl	80045f8 <_sbrk_r>
 8004598:	3001      	adds	r0, #1
 800459a:	d0cd      	beq.n	8004538 <_malloc_r+0x48>
 800459c:	6025      	str	r5, [r4, #0]
 800459e:	e7d9      	b.n	8004554 <_malloc_r+0x64>
 80045a0:	bd70      	pop	{r4, r5, r6, pc}
 80045a2:	bf00      	nop
 80045a4:	20000110 	.word	0x20000110
 80045a8:	20000114 	.word	0x20000114

080045ac <_realloc_r>:
 80045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ae:	4607      	mov	r7, r0
 80045b0:	4614      	mov	r4, r2
 80045b2:	460e      	mov	r6, r1
 80045b4:	b921      	cbnz	r1, 80045c0 <_realloc_r+0x14>
 80045b6:	4611      	mov	r1, r2
 80045b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80045bc:	f7ff bf98 	b.w	80044f0 <_malloc_r>
 80045c0:	b922      	cbnz	r2, 80045cc <_realloc_r+0x20>
 80045c2:	f7ff ff47 	bl	8004454 <_free_r>
 80045c6:	4625      	mov	r5, r4
 80045c8:	4628      	mov	r0, r5
 80045ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045cc:	f000 f826 	bl	800461c <_malloc_usable_size_r>
 80045d0:	4284      	cmp	r4, r0
 80045d2:	d90f      	bls.n	80045f4 <_realloc_r+0x48>
 80045d4:	4621      	mov	r1, r4
 80045d6:	4638      	mov	r0, r7
 80045d8:	f7ff ff8a 	bl	80044f0 <_malloc_r>
 80045dc:	4605      	mov	r5, r0
 80045de:	2800      	cmp	r0, #0
 80045e0:	d0f2      	beq.n	80045c8 <_realloc_r+0x1c>
 80045e2:	4631      	mov	r1, r6
 80045e4:	4622      	mov	r2, r4
 80045e6:	f7ff ff0f 	bl	8004408 <memcpy>
 80045ea:	4631      	mov	r1, r6
 80045ec:	4638      	mov	r0, r7
 80045ee:	f7ff ff31 	bl	8004454 <_free_r>
 80045f2:	e7e9      	b.n	80045c8 <_realloc_r+0x1c>
 80045f4:	4635      	mov	r5, r6
 80045f6:	e7e7      	b.n	80045c8 <_realloc_r+0x1c>

080045f8 <_sbrk_r>:
 80045f8:	b538      	push	{r3, r4, r5, lr}
 80045fa:	4c06      	ldr	r4, [pc, #24]	; (8004614 <_sbrk_r+0x1c>)
 80045fc:	2300      	movs	r3, #0
 80045fe:	4605      	mov	r5, r0
 8004600:	4608      	mov	r0, r1
 8004602:	6023      	str	r3, [r4, #0]
 8004604:	f000 f814 	bl	8004630 <_sbrk>
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	d102      	bne.n	8004612 <_sbrk_r+0x1a>
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	b103      	cbz	r3, 8004612 <_sbrk_r+0x1a>
 8004610:	602b      	str	r3, [r5, #0]
 8004612:	bd38      	pop	{r3, r4, r5, pc}
 8004614:	20000340 	.word	0x20000340

08004618 <__malloc_lock>:
 8004618:	4770      	bx	lr

0800461a <__malloc_unlock>:
 800461a:	4770      	bx	lr

0800461c <_malloc_usable_size_r>:
 800461c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004620:	2800      	cmp	r0, #0
 8004622:	f1a0 0004 	sub.w	r0, r0, #4
 8004626:	bfbc      	itt	lt
 8004628:	580b      	ldrlt	r3, [r1, r0]
 800462a:	18c0      	addlt	r0, r0, r3
 800462c:	4770      	bx	lr
	...

08004630 <_sbrk>:
 8004630:	4b04      	ldr	r3, [pc, #16]	; (8004644 <_sbrk+0x14>)
 8004632:	6819      	ldr	r1, [r3, #0]
 8004634:	4602      	mov	r2, r0
 8004636:	b909      	cbnz	r1, 800463c <_sbrk+0xc>
 8004638:	4903      	ldr	r1, [pc, #12]	; (8004648 <_sbrk+0x18>)
 800463a:	6019      	str	r1, [r3, #0]
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	4402      	add	r2, r0
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	4770      	bx	lr
 8004644:	20000118 	.word	0x20000118
 8004648:	20000344 	.word	0x20000344

0800464c <_init>:
 800464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464e:	bf00      	nop
 8004650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004652:	bc08      	pop	{r3}
 8004654:	469e      	mov	lr, r3
 8004656:	4770      	bx	lr

08004658 <_fini>:
 8004658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465a:	bf00      	nop
 800465c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465e:	bc08      	pop	{r3}
 8004660:	469e      	mov	lr, r3
 8004662:	4770      	bx	lr
